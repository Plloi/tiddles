author: Felix Küppers
core-version: >=5.1.5
created: 20160506172907568
dependents: $:/plugins/felixhayashi/vis
depends: $:/plugins/felixhayashi/vis
description: TiddlyMap – Map drawing and topic visualization for your wiki
list: readme license
plugin-type: plugin
released: Sun, 07 Feb 2016 01:08:58 GMT
source: https://github.com/felixhayashi/TW5-TiddlyMap
suggested: $:/plugins/felixhayashi/topstoryview
title: $:/plugins/felixhayashi/tiddlymap
type: application/json
version: 0.11.2+8941

{
    "tiddlers": {
        "$:/plugins/felixhayashi/tiddlymap/layout": {
            "title": "$:/plugins/felixhayashi/tiddlymap/layout",
            "type": "text/vnd.tiddlywiki",
            "tags": [
                "$:/tags/Stylesheet"
            ],
            "text": "\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline \n\n﻿.tc-page-container-wrapper.tc-modal-displayed{-webkit-filter:inherit;-moz-filter:inherit;filter:inherit}.tc-modal-wrapper{z-index:1010}.tc-modal-wrapper .tc-modal-header svg{vertical-align:sub}.tc-modal-wrapper .tc-modal-header h3{line-height:10px}.tc-modal-wrapper .tc-modal-body{min-height:250px;max-height:70vh;padding-top:0px;padding-bottom:0px;overflow:auto}.tc-modal-wrapper .tc-modal-footer{padding:8px}.tc-modal-wrapper .tc-modal-footer .tmap-dialog-button{font-weight:bold}.tc-modal-wrapper .tc-modal-footer .tmap-hidden-close-button{display:none}table.tmap-table tr:nth-child(odd),.tc-modal-body table.tmap-config-table tr:nth-child(odd){background-color:#F0F0F0}table.tmap-table tr:nth-child(even),.tc-modal-body table.tmap-config-table tr:nth-child(even){background-color:#FFFFFF}.tmap-save-canvas-preview{text-align:center}.tmap-save-canvas-preview img{background-color:white;border:1px solid lightgray;max-width:100%;max-height:100px}.tmap-list-separator{display:block;background-color:#efefef;margin:10px 0 5px 0;cursor:default;border-bottom:1px dotted gray;font-weight:bold;font-size:0.8em}.tmap-unicode-icon{width:1em;display:inline-block;text-align:center;color:black}html .tmap-link{color:#5778D8}html .tmap-link:hover{color:white;background:#5778D8}html .tmap-small-list,html .tmap-smaller-list,html .tmap-very-small-list{overflow:auto;min-height:2em;max-height:9em;display:block}html .tmap-smaller-list{max-height:7em}html .tmap-very-small-list{max-height:5empx}html .tc-tiddler-controls button.tmap-active-button svg{fill:#888888}html #tmap-node-filter-dialog #tmap-filter-tips{font-size:0.8em}html #tmap-node-filter-dialog textarea{height:100px;max-height:300px;overflow:auto;width:100%;font-size:11px;font-family:\"Courier New\", Courier, monospace}@media (max-width: {{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}}){.tc-sidebar-scrollable .tmap-desktop-editor .tmap-widget:not(.tmap-fullscreen){display:none}}@media (min-width: {{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}}){.tc-sidebar-scrollable .tmap-mobile-editor{display:none}.tc-modal-wrapper{z-index:1010}.tc-modal-wrapper .tc-modal{boder:1px solid #999999;left:calc(50% - 400px);width:802px}.tc-modal-wrapper .tc-modal-body{left:calc(50% - 400px);width:800px}}@-o-keyframes fadein-keyframes{0%{opacity:0}100%{opacity:1}}@-moz-keyframes fadein-keyframes{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadein-keyframes{0%{opacity:0}100%{opacity:1}}@keyframes flash fadein-keyframes{0%{opacity:0}100%{opacity:1}}@-o-keyframes fadeout-keyframes{0%{opacity:1}100%{opacity:0}}@-moz-keyframes fadeout-keyframes{0%{opacity:1}100%{opacity:0}}@-webkit-keyframes fadeout-keyframes{0%{opacity:1}100%{opacity:0}}@keyframes flash fadeout-keyframes{0%{opacity:1}100%{opacity:0}}.tmap-config-widget{background:#F0F0F0;padding:5px;margin:5px 0;box-sizing:border-box;display:block}.tmap-config-widget .vis-network{display:none}.tmap-config-widget .vis-configuration-wrapper{width:100%}.tmap-config-widget .vis-configuration-wrapper .vis-config-rangeinput{height:inherit;margin-left:4px}.tmap-config-widget .vis-configuration-wrapper .vis-configuration.vis-config-item{width:100%;height:inherit;background:none;padding-left:0px;left:0}.tmap-config-widget .vis-configuration-wrapper .vis-configuration.vis-config-item.tmap-vis-config-item-active .vis-config-label::after{content:\"(inherited)\";position:absolute;display:inline-block;margin-left:10px;-o-animation:fadein-keyframes 1s;-moz-animation:fadein-keyframes 1s;-webkit-animation:fadein-keyframes 1s;animation:fadein-keyframes 1s;content:\"✔\";color:green;font-weight:bold;font-size:15px}.tmap-config-widget .vis-configuration-wrapper .vis-configuration.vis-config-item button.tmap-config-item-reset{vertical-align:top;margin-left:5px}.tmap-config-widget .vis-configuration-wrapper .vis-configuration.vis-config-item .vis-config-range{width:150px}.tmap-config-widget .vis-configuration-wrapper .vis-configuration.vis-config-item .vis-config-range::-moz-range-track{width:150px !important}.tmap-config-widget .vis-configuration-wrapper .vis-configuration.vis-config-item .vis-config-label{width:150px}.tmap-config-widget::after{clear:both;content:\"\";display:block}.tmap-flash-message{border:1px solid lightgray;padding:5px;margin:6px 0;display:block;color:#333333}.tmap-flash-message.tmap-info,.tmap-flash-message.tmap-plain,.tmap-flash-message.tmap-neutral{background:#F0F0F0}.tmap-flash-message.tmap-info::before,.tmap-flash-message.tmap-plain::before,.tmap-flash-message.tmap-neutral::before{content:\"i\";display:inline-block;border-radius:50%;width:0.8em;border:2px solid;font-family:serif;text-align:center;height:0.8em;font-weight:bold;line-height:0.8em;vertical-align:text-top;margin-right:2px}.tmap-flash-message.tmap-valid,.tmap-flash-message.tmap-success{background:#D1EED4}.tmap-flash-message.tmap-valid::before,.tmap-flash-message.tmap-success::before{content:\"i\";display:inline-block;border-radius:50%;width:0.8em;border:2px solid;font-family:serif;text-align:center;height:0.8em;font-weight:bold;line-height:0.8em;vertical-align:text-top;margin-right:2px}.tmap-flash-message.tmap-warning{background:#FFF6D1}.tmap-flash-message.tmap-warning::before{content:\"\";display:inline-block;background:url(<<tmap \"datauri\" \"$:/core/images/warning\" \"\">>);display:inline-block;width:1em;height:1em;background-size:100% 100%;vertical-align:text-top;margin-right:2px}.tmap-flash-message.tmap-malformed,.tmap-flash-message.tmap-invalid,.tmap-flash-message.tmap-danger{background:#EED5D1}.tmap-flash-message.tmap-malformed::before,.tmap-flash-message.tmap-invalid::before,.tmap-flash-message.tmap-danger::before{content:\"\";display:inline-block;background:url(<<tmap \"datauri\" \"$:/core/images/warning\" \"\">>);display:inline-block;width:1em;height:1em;background-size:100% 100%;vertical-align:text-top;margin-right:2px}.tmap-widget{background:#FFFFFF;width:auto;position:relative;border:1px dotted lightgray;padding:2px;color:#666;display:block}.tmap-widget.tmap-click-to-use:not(.tmap-fullscreen) .vis-network:not(.vis-active){cursor:pointer}.tmap-widget.tmap-click-to-use:not(.tmap-fullscreen) .vis-network:not(.vis-active) .vis-navigation{display:none}.tmap-widget.tmap-click-to-use:not(.tmap-fullscreen) .vis-network:not(.vis-active):hover:before{color:gray;background:white;content:\"Click to use\";font-size:14px;font-weight:bold;right:calc(50% - 65px - 5px);position:absolute;text-align:center;top:calc(50% - 14px - 5px);width:130px;z-index:2000;padding:5px;pointer-events:none;background-color:rgba(255,255,255,0.3)}.tmap-widget .tmap-loading-bar{display:none;position:absolute;text-align:center;font-size:2em;padding:10px;top:50%;background:rgba(245,245,245,0.5);z-index:1;width:250px;margin:auto;left:0px;right:0px}.tmap-widget .tmap-vis-graph{height:calc(100% - 35px)}.tmap-widget.tmap-no-buttons .vis-navigation{display:none}.tmap-widget.tmap-advanced-editor .tmap-topbar{background:#d6d9d8}.tmap-widget.tmap-advanced-editor .tmap-topbar .tmap-active-button{color:#488DCD}.tmap-widget.tmap-advanced-editor .tmap-topbar .tmap-active-button svg{fill:#488DCD}.tmap-widget.tmap-advanced-editor .tmap-topbar .tmap-neigh-scope-button{font-size:1.5em;vertical-align:bottom}.tmap-widget .tmap-menu-bar{width:100%}.tmap-widget .tmap-topbar{background:#F5F5F5;border-bottom:1px solid lightgray;padding:3px 5px;height:35px;position:relative}.tmap-widget .tmap-topbar .tmap-view-label{width:100%;text-align:center;font-weight:bold;padding-top:3px}.tmap-widget .tmap-topbar .tmap-focus-button{position:absolute;right:10px}.tmap-widget .tmap-topbar .tmap-focus-button input{width:140px}.tmap-widget .tmap-topbar .tmap-search-dropdown{position:relative}.tmap-widget .tmap-topbar .tmap-search-dropdown .tc-drop-down{position:absolute;z-index:999;right:0px}.tmap-widget .tmap-topbar .tc-drop-down{background-color:#F3F3F3;min-width:170px;max-width:210px;padding:5px;margin:5px 0}.tmap-widget .tmap-topbar .tc-drop-down button,.tmap-widget .tmap-topbar .tc-drop-down a{padding:0px;text-decoration:none}.tmap-widget .tmap-topbar .tc-drop-down button:hover,.tmap-widget .tmap-topbar .tc-drop-down a:hover{color:#ffffff}.tmap-widget .tmap-topbar .tc-drop-down button svg,.tmap-widget .tmap-topbar .tc-drop-down a svg{vertical-align:middle}.tmap-widget .tmap-topbar [hidden]{display:none}.tmap-widget .tmap-topbar .tc-block-dropdown{width:370px;min-width:370px;padding:5px;margin:15px 0 0 -370px}.tmap-widget .tmap-topbar .tc-block-dropdown a{display:inline;padding:0px}.tmap-widget .tmap-topbar select{width:30%;max-width:200px;word-wrap:initial;padding:0px}.tmap-widget .tmap-topbar button{line-height:inherit;color:#666}.tmap-widget .tmap-topbar>*{display:inline-block}.tmap-widget .tmap-topbar .tmap-separator:after{color:#bdbdbd;margin:3px;content:\" | \"}.tmap-widget .tmap-topbar .tc-edit-add-tag .tc-add-tag-name input{width:70%}.tmap-widget .tmap-topbar .tc-sidebar-header{text-shadow:none}.tmap-widget .tmap-topbar .tc-edit-tags{border:none;padding:inherit;box-shadow:none}.tmap-widget.tmap-static-mode .tmap-topbar{height:initial}.tmap-widget.tmap-static-mode .tmap-vis-graph{text-align:center;cursor:not-allowed}.tmap-widget.tmap-static-mode .tmap-vis-graph:not(.tmap-graph-placeholder):hover::before{box-shadow:10px 10px 5px lightgray;color:gray;background:white;content:\"Static\";font-size:18px;font-weight:bold;left:50%;margin-left:-100px;position:absolute;text-align:center;top:50px;width:200px;z-index:2000;padding:5px;pointer-events:none}.tmap-widget.tmap-static-mode .tmap-vis-graph.tmap-graph-placeholder::before{content:\"No Preview\";display:block;text-align:center;padding:20px}.tmap-widget.tmap-plain-design{border:none;padding:0px}.tmap-widget.tmap-plain-design .tmap-topbar{display:none}.tc-sidebar-scrollable .tmap-widget{position:absolute;min-height:350px}.tmap-widget div.vis-network .vis-edit-mode{height:26px}.tmap-widget div.vis-network .vis-manipulation{height:34px;border-top:1px solid #d6d9d8;background:rgba(245,245,245,0.7)}.tmap-widget div.vis-network .vis-navigation .vis-button.tmap-button-enabled{right:15px}.tmap-widget div.vis-network .vis-navigation .vis-button.tmap-button-enabled.tmap-fullscreen-button{bottom:90px;background-image:url(<<tmap \"datauri\" \"$:/plugins/felixhayashi/tiddlymap/media/fullscreen.png\" \"\">>)}.tmap-widget div.vis-network .vis-navigation .vis-button.tmap-button-enabled.tmap-halfscreen-button{bottom:130px;background-image:url(<<tmap \"datauri\" \"$:/plugins/felixhayashi/tiddlymap/media/halfscreen.png\" \"\">>)}.tmap-widget div.vis-network .vis-navigation .vis-button:hover{box-shadow:0 0 3px 3px rgba(75,75,75,0.3)}.tmap-widget div.vis-network .vis-navigation .vis-button:hover:before{background:beige;display:block;color:black;padding:3px;position:relative;border:1px solid lightgray;width:80px;left:-100px;top:-50px;z-index:1000;text-align:center}.tmap-widget div.vis-network .vis-navigation .vis-button:hover.vis-up:before{left:30px;content:\"Scroll up\"}.tmap-widget div.vis-network .vis-navigation .vis-button:hover.vis-down:before{left:30px;content:\"Scroll down\"}.tmap-widget div.vis-network .vis-navigation .vis-button:hover.vis-right:before{left:30px;content:\"Scroll right\"}.tmap-widget div.vis-network .vis-navigation .vis-button:hover.vis-left:before{left:30px;content:\"Scroll left\"}.tmap-widget div.vis-network .vis-navigation .vis-button:hover.vis-zoomOut:before{content:\"Zoom out\"}.tmap-widget div.vis-network .vis-navigation .vis-button:hover.vis-zoomIn:before{content:\"Zoom in\"}.tmap-widget div.vis-network .vis-navigation .vis-button:hover.vis-zoomExtends:before{content:\"Fit whole graph\"}.tmap-widget div.vis-network .vis-navigation .vis-button:hover.tmap-fullscreen-button:before{content:\"Toggle Fullscreen\"}.tmap-widget div.vis-network .vis-navigation .vis-button:hover.tmap-halfscreen-button:before{content:\"Toggle Halfscreen\"}.tc-dropzone>.tc-story-river .tmap-widget .vis-navigation .tmap-halfscreen-button{display:none}.tc-dropzone>.tc-story-river .tmap-widget:not(.tmap-fullscreen) .vis-navigation .vis-button{display:none}.tc-dropzone>.tc-story-river .tmap-widget:hover .vis-navigation .vis-button.tmap-fullscreen-button{display:block}.tc-dropzone>.tc-story-river .tmap-widget:hover .vis-navigation .vis-button.vis-zoomExtends{display:block}body.tmap-has-fullscreen-widget{overflow:hidden}body.tmap-has-fullscreen-widget .tmap-widget.tmap-fullscreen{background:white !important;height:100% !important;width:100% !important;position:fixed !important;top:0 !important;right:0 !important;bottom:0 !important;left:0 !important;z-index:999 !important;border:none !important;margin:0 !important}body.tmap-has-fullscreen-widget .tc-dropzone>*.tmap-has-fullscreen-widget{background:white !important;height:100% !important;width:100% !important;position:fixed !important;top:0 !important;right:0 !important;bottom:0 !important;left:0 !important;z-index:999 !important;border:none !important;margin:0 !important}body.tmap-has-fullscreen-widget .tc-dropzone>*:not(.tmap-has-fullscreen-widget){display:none}body.tmap-has-halfscreen-widget .tmap-widget.tmap-halfscreen{background:white !important;height:100% !important;width:100% !important;position:fixed !important;top:0 !important;right:0 !important;bottom:0 !important;left:0 !important;z-index:999 !important;border:none !important;margin:0 !important;position:absolute !important;border-left:1px solid lightgray !important}.tc-modal-footer .tmap-hidden-close-button{display:none}.tmap-modal-content{position:relative;padding:1em 0;padding-top:0}.tmap-modal-content table tr td{vertical-align:top}.tmap-modal-content :not(pre)>code{padding:1px;font-size:0.9em;position:relative;top:-1px}.tmap-modal-content :not(pre)>code{color:#666}.tmap-modal-content .tc-tab-set .tc-tab-content{margin-top:0.5em}.tmap-modal-content .tc-image-button{font-size:14px}.tmap-modal-content fieldset{margin:0px}.tmap-modal-content fieldset legend{font-weight:bold}.tc-modal-body .tmap-modal-editor>p{margin:0px}.tc-modal-body .tmap-modal-editor .tmap-template-select select{width:50%}.tc-modal-body .tmap-modal-editor .tc-tiddler-frame{margin:auto;width:auto}.tc-modal-body .tmap-modal-editor .tc-tiddler-frame .tc-tiddler-controls{display:none}.tc-modal-body .tmap-modal-editor .tc-tiddler-frame .tc-tiddler-title{display:none}.tc-modal-body table{margin:6px 0;border:none;width:100%}.tc-modal-body table td,.tc-modal-body table th{border:1px solid lightgray}.tc-modal-body table.tmap-key-value-table th{width:30%;background-color:#F0F0F0}.tc-modal-body table.tmap-config-table.tmap-large-input tr td:last-child{width:20%}.tc-modal-body table.tmap-config-table.tmap-small-input tr td:last-child{width:60%}.tc-modal-body table.tmap-config-table tr td{border:none;vertical-align:top;padding:5px}.tc-modal-body table.tmap-config-table tr td:first-child{width:15%}.tc-modal-body table.tmap-config-table tr td:last-child{width:40%}.tc-modal-body table.tmap-config-table tr td input:not([type=radio]),.tc-modal-body table.tmap-config-table tr td textarea,.tc-modal-body table.tmap-config-table tr td select{width:100%;word-wrap:normal}.tc-modal-body table.tmap-config-table tr td textarea{height:100%}.tc-modal-body table.tmap-config-table tr td .tmap-no-stretch input,.tc-modal-body table.tmap-config-table tr td .tmap-no-stretch textarea,.tc-modal-body table.tmap-config-table tr td .tmap-no-stretch select{width:auto}.tc-modal-body table.tmap-config-table tr td div.tmap-button-wrapper{text-align:center}.tc-modal-body table.tmap-config-table tr td .tmap-note{margin-top:0.5em}.tc-modal-body table.tmap-config-table tr td .tmap-description{font-style:italic}#tmap-element-type-manager>div:first-child{height:50vh;float:left;width:21%;background:linear-gradient(90deg, #f5f5f5 0%, #fff 50%)}#tmap-element-type-manager>div:first-child .tmap-searchbar{padding:1em 0 0 0}#tmap-element-type-manager>div:first-child .tmap-searchbar input{width:calc(100% - 36px)}#tmap-element-type-manager>div:first-child .tmap-searchbar button{width:30px;float:right}#tmap-element-type-manager>div:first-child ul{height:calc(100% - 65px);overflow:auto;margin-top:1em;padding:0}#tmap-element-type-manager>div:first-child ul.no-bullets li{list-style:none}#tmap-element-type-manager>div:first-child ul li{white-space:nowrap}#tmap-element-type-manager>div:first-child ul li .tmap-ranking{width:30px;display:inline-block}#tmap-element-type-manager>div:last-child{height:100%;width:calc(79% - 15px);float:right}#tmap-element-type-manager>div:last-child .tc-tab-set .tc-tab-content{overflow:auto;height:50vh}.tmap-manage-node-types .tmap-edge-type-specific{display:none !important}.tmap-manage-edge-types .tmap-node-type-specific{display:none !important}.tmap-modal-fullscreen-editor .tc-tab-content p{margin:1em 0}.tmap-has-pending-template{background-color:#C1EDC4}#tmap-search-table td{border:none;padding-left:0px}#tmap-search-table td:first-child{width:30px}#tmap-search-table b{display:inline-block;width:40px;text-align:right}#tmap-search-table ul{padding-left:20px;margin:1em 0 0 0}#tmap-search-table ul li{list-style:inherit}#tmap-search-table ul button{text-align:left}button.tmap-go-back{margin-bottom:1em;font-weight:bold}.tmap-badges>span,.tmap-badge{background:gray;font-size:11px;color:white;padding:3px 4px;display:inline-block;font-weight:bold;border-radius:2px;line-height:1em;cursor:help}.tmap-badges>span.tmap-red-flag,.tmap-badge.tmap-red-flag{background:red}.tmap-popup{display:none;position:absolute;opacity:0;cursor:auto;min-width:100px;min-height:50px;max-width:<<tmap option config.sys.popups.width>>;max-height:<<tmap option config.sys.popups.height>>;padding:5px;resize:both;overflow:auto;font-family:verdana;font-size:14px;background-color:#f5f4ed;-moz-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;border:1px solid #808074;box-shadow:3px 3px 10px rgba(0,0,0,0.2);transition:opacity 0.3s ease}.tmap-popup[style*=\"height\"]{max-height:none !important}.tmap-popup[style*=\"width\"]{max-width:none !important}.tmap-popup.tmap-popup-active{opacity:1}.tmap-quick-connect{font-size:0.7em}.tmap-quick-connect p{padding-left:0;padding-right:0}.tmap-quick-connect .tc-drop-down{padding:5px;width:250px;white-space:normal;line-height:1em;position:absolute;z-index:1000;right:50px;background:linear-gradient(45deg, #f5f5f5 0%, #fff 50%, #f5f5f5 100%)}.tmap-quick-connect .tc-drop-down:first-child{padding-top:0;margin-top:0}.tmap-quick-connect .tc-drop-down .title{margin:1.5em 0 0.5em 0;font-weight:bold;color:gray}.tmap-quick-connect .tc-drop-down select{width:80px;word-wrap:initial}.tmap-quick-connect .tc-drop-down table{width:100%;border:none;margin:0.5em 0}.tmap-quick-connect .tc-drop-down table td,.tmap-quick-connect .tc-drop-down table th{padding:3px 3px 3px 0;vertical-align:middle;font-weight:normal;border:none}.tmap-quick-connect .tc-drop-down table td table,.tmap-quick-connect .tc-drop-down table th table{margin:0}.tmap-quick-connect .tc-drop-down .tmap-quick-connect-search-bar,.tmap-quick-connect .tc-drop-down .tmap-quick-connect-existing-bar{background:#F1F1F1;margin-top:0;border-bottom:1px solid #D5D5D5;border-top:1px solid #D5D5D5}.tmap-quick-connect .tc-drop-down table.tmap-quick-connect-search-bar td,.tmap-quick-connect .tc-drop-down th{padding:5px}.tmap-quick-connect .tc-drop-down .tmap-quick-connect-existing-bar{padding:5px}.tmap-quick-connect .tc-drop-down .tmap-connection-table th,.tmap-quick-connect .tc-drop-down .tmap-connection-table td{text-align:left;padding:1px 1px 1px 0}.tmap-quick-connect .tc-drop-down .tmap-connection-table button{width:20px;padding:0px}.tmap-quick-connect .tc-drop-down .tmap-scroll-table{height:120px;overflow:auto;display:block}.tmap-quick-connect .tc-drop-down hr{border:0;height:0;border-top:1px solid rgba(0,0,0,0.1);border-bottom:1px solid rgba(255,255,255,0.3)}.tmap-quick-connect .tc-drop-down a{display:inline;padding:0;color:#5778d8;background:transparent}.tmap-quick-connect .tc-drop-down a:hover{background:transparent;color:#5778d8;text-decoration:underline}.tmap-quick-connect .tc-drop-down button{display:inline-block;padding:0px 3px;text-align:center;color:#333333;line-height:1.0}.tmap-quick-connect .tc-drop-down button:hover{color:#ffffff}.tmap-quick-connect .tc-drop-down button svg{fill:inherit}.tmap-quick-connect .tc-drop-down button svg:hover{fill:#ffffff}\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/Adapter": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/Adapter\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\"use strict\";module.exports=Adapter;var ViewAbstraction=require(\"$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction\");var EdgeType=require(\"$:/plugins/felixhayashi/tiddlymap/js/EdgeType\");var NodeType=require(\"$:/plugins/felixhayashi/tiddlymap/js/NodeType\");var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");var vis=require(\"$:/plugins/felixhayashi/vis/vis.js\");var getContrastColour=require(\"$:/core/modules/macros/contrastcolour.js\").run;function Adapter(){this.visShapesWithTextInside=utils.getLookupTable([\"ellipse\",\"circle\",\"database\",\"box\",\"text\"]);this.isTransTypeEnabled=typeof $tw.wiki.getTiddlerTranscludes===\"function\"}Adapter.prototype.deleteEdge=function(e){return this._processEdge(e,\"delete\")};Adapter.prototype.deleteEdges=function(e){e=utils.convert(e,\"array\");for(var t=e.length;t--;){this.deleteEdge(e[t])}};Adapter.prototype.insertEdge=function(e){return this._processEdge(e,\"insert\")};Adapter.prototype._processEdge=function(e,t){$tm.logger(\"debug\",\"Edge\",t,e);if(typeof e!==\"object\"||!t||!e.from)return;if(t===\"insert\"&&!e.to)return;var i=$tm.indeces.tById[e.from];if(!i||!utils.tiddlerExists(i))return;var r=new EdgeType(e.type);var s=utils.getTiddler(i);var a=r.namespace;if(a===\"tw-list\"){if(!e.to)return;return this._processListEdge(s,e,r,t)}else if(a===\"tw-field\"){if(!e.to)return;return this._processFieldEdge(s,e,r,t)}else if(a===\"tw-body\"){return null}else{return this._processTmapEdge(s,e,r,t)}return e};Adapter.prototype._processTmapEdge=function(e,t,i,r){if(r===\"delete\"&&!t.id)return;var s=utils.parseFieldData(e,\"tmap.edges\",{});if(r===\"insert\"){t.id=t.id||utils.genUUID();s[t.id]={to:t.to,type:i.id};if(!i.exists()){i.save()}}else{delete s[t.id]}utils.writeFieldData(e,\"tmap.edges\",s);return t};Adapter.prototype._processListEdge=function(e,t,i,r){var s=i.name;var a=utils.getTiddler(e);var o=$tw.utils.parseStringArray(e.fields[s]);o=(o||[]).slice();var d=$tm.indeces.tById[t.to];if(r===\"insert\"){o.push(d);if(!i.exists()){i.save()}}else{var n=o.indexOf(d);if(n>-1){o.splice(n,1)}}utils.setField(a,s,$tw.utils.stringifyList(o));return t};Adapter.prototype._processFieldEdge=function(e,t,i,r){var s=$tm.indeces.tById[t.to];if(s==null)return;var a=r===\"insert\"?s:\"\";utils.setField(e,i.name,a);if(!i.exists()){i.save()}return t};Adapter.prototype.getAdjacencyList=function(e,t){$tm.start(\"Creating adjacency list\");t=t||{};if(!t.edges){var i=utils.getMatches($tm.selector.allPotentialNodes);t.edges=this.getEdgesForSet(i,t.toWL,t.typeWL)}var r=utils.groupByProperty(t.edges,e||\"to\");$tm.stop(\"Creating adjacency list\");return r};Adapter.prototype.getNeighbours=function(e,t){$tm.start(\"Get neighbours\");t=t||{};var i=utils.getArrayValuesAsHashmapKeys(e);var r=new ViewAbstraction(t.view);var s=t.addProperties;var a=utils.makeHashMap();var o=$tm.indeces.allETy;var d=utils.makeHashMap();var n=t.toWL;var l=t.typeWL;var p=$tm.indeces.tById;var u=$tm.indeces.idByT;var f=parseInt(t.steps)>0?t.steps:1;var g=t.direction||r.exists()&&r.getConfig(\"neighbourhood_directions\");var c=!g||g===\"both\";var v=c||g===\"in\";var y=c||g===\"out\";var h=this.getAdjacencyList(\"to\",t);var m=function(e,t){a[e.id]=e;var r=p[e[t]];if(!i[r]){i[r]=true;var o=this.makeNode(r,s);if(o){d[o.id]=o;A.push(r)}}}.bind(this);for(var w=0;w<f&&e.length;w++){var A=[];for(var b=e.length;b--;){if(utils.isSystemOrDraft(e[b])){continue}var T=this.getEdges(e[b],n,l);for(var $ in T){var E=o[T[$].type];if(c||y&&E.toArrow||v&&E.invertedArrow){m(T[$],\"to\")}}var N=h[u[e[b]]];if(!N)continue;for(var x=N.length;x--;){var E=o[N[x].type];if(c||v&&E.toArrow||y&&E.invertedArrow){m(N[x],\"from\")}}}e=A}var k={nodes:d,edges:a};$tm.logger(\"debug\",\"Retrieved neighbourhood\",k,\"steps\",w);$tm.stop(\"Get neighbours\");return k};Adapter.prototype.getGraph=function(e){$tm.start(\"Assembling Graph\");e=e||{};var t=new ViewAbstraction(e.view);var i=utils.getMatches(e.filter||t.exists()&&t.getNodeFilter(\"compiled\"));var r=utils.getArrayValuesAsHashmapKeys(i);var s=e.edgeTypeWL||t.exists()&&t.getEdgeTypeFilter(\"whitelist\");var a=parseInt(e.neighbourhoodScope||t.exists()&&t.getConfig(\"neighbourhood_scope\"));var o={edges:this.getEdgesForSet(i,r,s),nodes:this.selectNodesByReferences(i,{view:t,outputType:\"hashmap\"})};if(a){var d=this.getNeighbours(i,{steps:a,view:t,typeWL:s,addProperties:{group:\"tmap:neighbour\"}});utils.merge(o,d);if(t.exists()&&t.isEnabled(\"show_inter_neighbour_edges\")){var n=this.getTiddlersById(d.nodes);var r=utils.getArrayValuesAsHashmapKeys(n);$tw.utils.extend(o.edges,this.getEdgesForSet(n,r))}}this._removeObsoleteViewData(o.nodes,t);this.attachStylesToNodes(o.nodes,t);$tm.stop(\"Assembling Graph\");$tm.logger(\"debug\",\"Assembled graph:\",o);return o};Adapter.prototype.getEdges=function(e,t,i){var r=utils.getTiddler(e);if(!r||utils.isSystemOrDraft(r))return;var s=utils.makeHashMap();this._addTmapEdges(s,r,t,i);this._addBodyAndFieldEdges(s,r,t,i);return s};Adapter.prototype._addBodyAndFieldEdges=function(e,t,i,r){var s=t.fields;var a=utils.getTiddlerRef(t);var o=$tm.indeces;var d=o.maETyFiNa;var n=utils.makeHashMap();if(!r||r[\"tw-body:link\"]){n[\"tw-body:link\"]=$tw.wiki.getTiddlerLinks(a)}if(this.isTransTypeEnabled&&(!r||r[\"tw-body:transclude\"])){n[\"tw-body:transclude\"]=$tw.wiki.getTiddlerTranscludes(a)}for(var l in s){var p=d[l];if(!p||r&&!r[p.id])continue;if(p.namespace===\"tw-field\"){n[p.id]=[s[l]]}else if(p.namespace===\"tw-list\"){n[p.id]=$tw.utils.parseStringArray(s[l])}else if(p.namespace===\"tw-filter\"){var u=s[l];n[p.id]=utils.getMatches(u,i)}}if(!n)return;var f=t.fields[\"tmap.id\"];var g=o.idByT;var c=o.allETy;for(var v in n){var y=n[v];if(!y)continue;var p=c[v];for(var h=y.length;h--;){var m=y[h];if(!m||!$tw.wiki.tiddlerExists(m)||utils.isSystemOrDraft(m)||i&&!i[m])continue;var w=p.id+$tw.utils.hashString(a+m);var A=this.makeEdge(f,g[m],p,w);if(A){e[A.id]=A}}}};Adapter.prototype._addTmapEdges=function(e,t,i,r){var s=utils.parseFieldData(t,\"tmap.edges\");if(!s)return;var a=$tm.indeces.tById;var o=t.fields[\"tmap.id\"];for(var d in s){var n=s[d];var l=a[n.to];if(l&&(!i||i[l])&&(!r||r[n.type])){var p=this.makeEdge(o,n.to,n.type,d);if(p){e[d]=p}}}};Adapter.prototype.getEdgesForSet=function(e,t,i){var r=utils.makeHashMap();for(var s=e.length;s--;){$tw.utils.extend(r,this.getEdges(e[s],t,i))}return r};Adapter.prototype.selectEdgesByType=function(e){var t=utils.makeHashMap();t[new EdgeType(e).id]=true;return this.getEdgesForSet(this.getAllPotentialNodes(),null,t)};Adapter.prototype.getAllPotentialNodes=function(){return utils.getMatches($tm.selector.allPotentialNodes)};Adapter.prototype._processEdgesWithType=function(e,t){e=new EdgeType(e);$tm.logger(\"debug\",\"Processing edges\",e,t);var i=this.selectEdgesByType(e);if(t.action===\"rename\"){var r=new EdgeType(t.newName);r.load(e);r.save()}for(var s in i){this._processEdge(i[s],\"delete\");if(t.action===\"rename\"){i[s].type=t.newName;this._processEdge(i[s],\"insert\")}}$tw.wiki.deleteTiddler(e.fullPath)};Adapter.prototype.selectNodesByFilter=function(e,t){var i=utils.getMatches(e);return this.selectNodesByReferences(i,t)};Adapter.prototype.selectNodesByReferences=function(e,t){t=t||{};var i=t.addProperties;var r=utils.makeHashMap();var s=Object.keys(e);for(var a=s.length;a--;){var o=this.makeNode(e[s[a]],i);if(o){r[o.id]=o}}return utils.convert(r,t.outputType)};Adapter.prototype.selectNodesByIds=function(e,t){var i=this.getTiddlersById(e);return this.selectNodesByReferences(i,t)};Adapter.prototype.selectNodeById=function(e,t){t=utils.merge(t,{outputType:\"hashmap\"});var i=this.selectNodesByIds([e],t);return i[e]};Adapter.prototype.makeEdge=function(e,t,i,r){if(!e||!t)return;if(e instanceof $tw.Tiddler){e=e.fields[\"tmap.id\"]}else if(typeof e===\"object\"){e=e.id}i=$tm.indeces.allETy[i]||new EdgeType(i);var s=i.getLabel();var a={id:r||utils.genUUID(),from:e,to:t,type:i.id};if(utils.isTrue(i[\"show-label\"],true)){a.label=s}a=$tw.utils.extend(a,i.style);return a};Adapter.prototype.removeNodeType=function(e){var e=new NodeType(e);$tw.wiki.deleteTiddler(e.fullPath)};Adapter.prototype.makeNode=function(e,t){var i=utils.getTiddler(e);if(!i||utils.isSystemOrDraft(i))return;var r=utils.merge({},t);r.id=this.assignId(i);var s=i.fields[$tm.field.nodeLabel];r.label=s&&$tm.field.nodeLabel!==\"title\"?$tw.wiki.renderText(\"text/plain\",\"text/vnd-tiddlywiki\",s):i.fields.title;return r};Adapter.prototype.getInheritedNodeStyles=function(e){var t=this.getTiddlersById(e);var i={};var r=$tm.indeces.glNTy;for(var s=r.length;s--;){var a=r[s];if(a.id===\"tmap:neighbour\"){var o=$tm.indeces.tById;var d=[];for(var n in e){if(e[n].group===\"tmap:neighbour\"){d.push(o[n])}}}else{var d=a.getInheritors(t)}for(var l=d.length;l--;){var p=d[l];var u=i[p]=i[p]||{};u.style=utils.merge(u.style||{},a.style);if(a[\"fa-icon\"]){u[\"fa-icon\"]=a[\"fa-icon\"]}else if(a[\"tw-icon\"]){u[\"tw-icon\"]=a[\"tw-icon\"]}}}return i};Adapter.prototype.attachStylesToEdges=function(e,t){};Adapter.prototype._removeObsoleteViewData=function(e,t){t=new ViewAbstraction(t);if(!t.exists()||!e)return;var i=t.getNodeData();var r=0;for(var s in i){if(e[s]===undefined&&i[s]!=null){i[s]=undefined;r++}}if(r){$tm.logger(\"debug\",\"[Cleanup]\",\"Removed obsolete node data:\",t.getLabel(),r);t.saveNodeData(i)}};Adapter.prototype.attachStylesToNodes=function(e,t){t=new ViewAbstraction(t);var i=this.getInheritedNodeStyles(e);var r=t.exists()?t.getNodeData():utils.makeHashMap();var s=t.exists()&&!t.isEnabled(\"physics_mode\");var a=$tm.field.nodeIcon;var o=$tm.indeces.tById;for(var d in e){var n=o[d];var l=$tw.wiki.getTiddler(n);var p=l.fields;var u=e[d];var f=null;var g=null;if(i[n]){if(i[n].style){utils.merge(u,i[n].style)}f=i[n][\"fa-icon\"];g=i[n][\"tw-icon\"]}if(p.color){u.color=p.color}if(p[\"tmap.style\"]){utils.merge(u,utils.parseJSON(p[\"tmap.style\"]))}f=p[\"tmap.fa-icon\"]||f;g=p[\"icon\"]||g;if(r[d]){utils.merge(u,r[d]);if(s){u.fixed={x:u.x!=null,y:u.y!=null}}f=r[d][\"fa-icon\"]||f;g=r[d][\"tw-icon\"]||g}var c=u.color!==null&&typeof u.color===\"object\";var v=c?u.color.background:u.color;u.color={background:v,border:c?u.color.border:undefined};this._addNodeIcon(u,f,g);u.font=u.font||{};if(u.shape&&!this.visShapesWithTextInside[u.shape]){u.font.color=\"black\"}else if(!u.font.color&&v){u.font.color=getContrastColour(v,v,\"black\",\"white\")}if(u.shape===\"icon\"&&typeof u.icon===\"object\"){u.icon.color=v}}};Adapter.prototype.deleteNode=function(e){if(!e)return;var t=typeof e===\"object\"?e.id:e;var i=$tm.indeces.tById[t];if(i){utils.deleteTiddlers([i])}var r=utils.getMatches($tm.selector.allViews);for(var s=r.length;s--;){var a=new ViewAbstraction(r[s]);a.removeNode(t);if(a.getNodeData(t)){a.saveNodeData(t,null)}}var o=this.getNeighbours([i]);this.deleteEdges(o.edges)};Adapter.prototype.deleteNodes=function(e){e=utils.convert(e,\"array\");for(var t=e.length;t--;){this.deleteNode(e[t])}};Adapter.prototype.storePositions=function(e,t){t=new ViewAbstraction(t);if(!t.exists())return;t.saveNodeData(e)};Adapter.prototype.assignId=function(e,t){var i=utils.getTiddler(e,true);if(!i)return;var r=i.fields[\"tmap.id\"];if(!r||t){r=utils.genUUID();utils.setField(i,\"tmap.id\",r);$tm.logger(\"info\",\"Assigning new id to\",i.fields.title)}$tm.indeces.tById[r]=i.fields.title;$tm.indeces.idByT[i.fields.title]=r;return r};Adapter.prototype.insertNode=function(e,t,i){i=i||{};e=e||{};var r={\"tmap.id\":null};if(!i.fields||!i.fields.text){r.text=\"\"}var s=$tw.wiki.generateNewTitle(e.label||utils.getRandomLabel());e.label=r.title=s;var a=new $tw.Tiddler(i.fields,r,$tw.wiki.getModificationFields(),$tw.wiki.getCreationFields());$tw.wiki.addTiddler(a);e=this.makeNode(a,e);var t=new ViewAbstraction(t);if(t.exists()){t.addNode(e)}return e};Adapter.prototype._getFAdigits=function(e){return e.length===4?e:e.substr(3,4)};Adapter.prototype.getTiddlersById=function(e){if(Array.isArray(e)){e=utils.getArrayValuesAsHashmapKeys(e)}else if(e instanceof vis.DataSet){e=utils.getLookupTable(e,\"id\")}var t=[];var i=$tm.indeces.tById;for(var r in e){if(i[r])t.push(i[r])}return t};Adapter.prototype.getId=function(e){return $tm.indeces.idByT[utils.getTiddlerRef(e)]};Adapter.prototype._addNodeIcon=function(e,t,i){if(t){e.shape=\"icon\";e.icon={shape:\"icon\",face:\"FontAwesome\",color:e.color,code:String.fromCharCode(\"0x\"+this._getFAdigits(t))};return}if(!i)return;var r=utils.getTiddler(i);if(!r)return;if(r.fields[\"_canonical_uri\"]){e.image=r.fields[\"_canonical_uri\"];e.shape=\"image\";return}if(r.fields.text){e.image=utils.getDataUri(r);e.shape=\"image\";return}};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/Adapter",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/CallbackManager": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/CallbackManager\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\"use strict\";module.exports=CallbackManager;var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");function CallbackManager(){this.callbacks=utils.makeHashMap()}CallbackManager.prototype.add=function(e,a,l){$tm.logger(\"debug\",'A callback was registered for changes of \"'+e+'\"');this.callbacks[e]={execute:a,isDeleteOnCall:typeof l===\"boolean\"?l:true}};CallbackManager.prototype.remove=function(e){if(!e)return;if(typeof e===\"string\"){e=[e]}for(var a=e.length;a--;){var l=e[a];if(this.callbacks[l]){$tm.logger(\"debug\",'A callback for \"'+l+'\" will be deleted');delete this.callbacks[l]}}};CallbackManager.prototype.handleChanges=function(e){if(this.callbacks.length==0)return;for(var a in e){if(!this.callbacks[a])continue;if($tw.wiki.getTiddler(a)){$tm.logger(\"debug\",\"Executing a callback for: \"+a);this.callbacks[a].execute(a);if(!this.callbacks.isDeleteOnCall)continue}this.remove(a)}};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/CallbackManager",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/DialogManager": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/DialogManager\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\"use strict\";module.exports=DialogManager;var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");var CallbackManager=require(\"$:/plugins/felixhayashi/tiddlymap/js/CallbackManager\");function DialogManager(t,e){this.callbackManager=t;if(e){this.context=e}}DialogManager.prototype.open=function(t,e,i){if(utils.isTrue($tm.config.sys.suppressedDialogs[t],false)){$tm.logger(\"warning\",\"Suppressed dialog\",t);return}e=e||{};$tm.logger(\"debug\",\"Dialog param object\",e);if(typeof i===\"function\"&&this.context){i=i.bind(this.context)}var a=$tm.path.tempRoot+\"/dialog-\"+utils.genUUID();var l=utils.getTiddler($tm.path.dialogs+\"/\"+t);var r={title:a,buttons:l.fields[\"buttons\"]||\"ok_cancel\",classes:\"tmap-modal-content \"+l.fields[\"classes\"],output:a+\"/output\",result:a+\"/result\",temp:a+\"/temp\",template:l.fields.title,templateId:t,currentTiddler:a+\"/output\",text:utils.getText($tm.path.dialogs)};if(e.dialog){if(e.dialog.preselects){$tw.wiki.addTiddler(new $tw.Tiddler({title:r.output},utils.flatten(e.dialog.preselects)));delete e.dialog.preselects}utils.merge(r,e.dialog)}r.footer=utils.getText($tm.path.footers);r=utils.flatten(r);e=utils.flatten(e);var s=function(t){this.getElement(\"hidden-close-button\").click();var e=$tw.wiki.getTiddler(t);var l=e.fields.text;if(l){var s=$tw.wiki.getTiddler(r.output)}else{var s=null;$tm.notify(\"operation cancelled\")}if(typeof i===\"function\"){i(l,s)}utils.deleteByPrefix(a)}.bind(this);this.callbackManager.add(r.result,s,true);var n=new $tw.Tiddler(l,e,r);$tw.wiki.addTiddler(n);$tm.logger(\"debug\",\"Opening dialog\",n);$tw.rootWidget.dispatchEvent({type:\"tm-modal\",param:n.fields.title,paramObject:n.fields});this.addKeyBindings();return n};DialogManager.prototype.getElement=function(t){return utils.getFirstElementByClassName(\"tmap-\"+t)};DialogManager.prototype.addKeyBindings=function(){var t=$tm.keycharm({container:utils.getFirstElementByClassName(\"tc-modal\")});var e=/tmap-triggers-(.+?)-on-(.+?)(?:\\s|$)/;var i=document.getElementsByClassName(\"tmap-trigger-field\");for(var a=i.length;a--;){var l=i[a].className.split(\" \");for(var r=l.length;r--;){var s=l[r].match(e);if(!s){continue}var n=s[1];var o=s[2];var d=this.getElement(n);if(!d)continue;t.bind(o,function(){this.click()}.bind(d))}}};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/DialogManager",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/exception": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/exception\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\"use strict\";module.exports={};var exception=module.exports;exception.EnvironmentError=function(e){this.name=\"EnvironmentError\";this.message=\"Critical parts of the underlying system changed: \"+e};exception.DependencyError=function(e){this.name=\"DependencyError\";this.message=\"TiddlyMap cannot run without: \"+e};for(var ex in exception){exception[ex].prototype=Object.create(Error.prototype);exception[ex].constructor=exception[ex]}",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/exception",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/fixer": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/fixer\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\"use strict\";module.exports={};var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");var Adapter=require(\"$:/plugins/felixhayashi/tiddlymap/js/Adapter\");var ViewAbstraction=require(\"$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction\");var EdgeType=require(\"$:/plugins/felixhayashi/tiddlymap/js/EdgeType\");var moveEdges=function(e,t){var r=utils.getTiddlersByPrefix(e);for(var i=0;i<r.length;i++){var a=utils.getBasename(r[i]);if(a===\"__noname__\"){a=\"tmap:unknown\"}a=new EdgeType(a);if(!a.exists())a.save();var s=$tw.wiki.getTiddlerData(r[i]);for(var u=0;u<s.length;u++){s[u].type=(t?t+\":\":\"\")+a.id;$tm.adapter.insertEdge(s[u])}$tw.wiki.deleteTiddler(r[i])}};var executeUpgrade=function(e,t,r){if(!utils.isLeftVersionGreater(e,t))return;$tm.logger(\"debug\",\"Upgrading data structure to \"+e);var i=r();utils.setEntry($tm.ref.sysMeta,\"dataStructureState\",e);return i};var fixer=module.exports;fixer.fixId=function(){var e=$tw.wiki.getTiddlerData($tm.ref.sysMeta,{});var t={before:\"0.9.0\",after:\"0.9.2\"};executeUpgrade(\"0.9.2\",e.dataStructureState,function(){if(utils.isLeftVersionGreater(\"0.9.2\",e.originalVersion)){var t=\"$:/plugins/felixhayashi/tiddlymap/config/sys/user\";var r=utils.getEntry(t,\"field.nodeId\",\"tmap.id\");utils.moveFieldValues(r,\"tmap.id\",true,false)}})};fixer.fix=function(){var e=$tw.wiki.getTiddlerData($tm.ref.sysMeta,{});$tm.logger(\"debug\",\"Fixer is started\");$tm.logger(\"debug\",\"Data-structure currently in use: \",e.dataStructureState);executeUpgrade(\"0.7.0\",e.dataStructureState,function(){moveEdges(\"$:/plugins/felixhayashi/tiddlymap/graph/edges\",null);var e=$tm.selector.allViews;var t=utils.getMatches(e);for(var r=0;r<t.length;r++){var i=new ViewAbstraction(t[r]);moveEdges(i.getRoot()+\"/graph/edges\",i)}});executeUpgrade(\"0.7.32\",e.dataStructureState,function(){var e=new $tm.ViewAbstraction(\"Live View\");if(!e.exists())return;e.setNodeFilter(\"[field:title{$:/temp/tmap/currentTiddler}]\",true);e.setConfig({\"refresh-trigger\":null,\"refresh-triggers\":$tw.utils.stringifyList([\"$:/temp/tmap/currentTiddler\"])})});executeUpgrade(\"0.9.0\",e.dataStructureState,function(){var e=$tm.ref.visUserConf;var t=utils.unflatten($tw.wiki.getTiddlerData(e,{}));if(typeof t.groups===\"object\"){var r=new $tm.NodeType(\"tmap:neighbour\");r.setStyle(t.groups[\"neighbours\"]);r.save();delete t.groups;$tw.wiki.setTiddlerData(e,t)}});fixer.fixId();executeUpgrade(\"0.9.16\",e.dataStructureState,function(){var e=$tm.indeces.glNTy;for(var t=e.length;t--;){e[t].save(null,true)}});executeUpgrade(\"0.10.3\",e.dataStructureState,function(){var e=$tm.ref.liveTab;if(utils.getTiddler(e).hasTag(\"$:/tags/SideBar\")){$tw.wiki.deleteTiddler(e);utils.setField(e,\"tags\",\"$:/tags/SideBar\")}});executeUpgrade(\"0.11.0\",e.dataStructureState,function(){var e=utils.getMatches($tm.selector.allViews);for(var t=e.length;t--;){var r=new ViewAbstraction(e[t]);var i=r.getEdgeTypeFilter(\"raw\");var a=\"edge_type_namespace\";r.setConfig(a,r.getConfig(a));if(i){var s=$tm.path.edgeTypes;i=utils.replaceAll(i,\"\",[s,s+\"/\",\"[prefix[\"+s+\"]]\",\"[prefix[\"+s+\"/]]\",[\"[suffix[tw-body:link]]\",\"[[tw-body:link]]\"],[\"[suffix[tw-list:tags]]\",\"[[tw-list:tags]]\"],[\"[suffix[tw-list:list]]\",\"[[tw-body:list]]\"],[\"[suffix[tmap:unknown]]\",\"[[tmap:unknown]]\"],[\"[suffix[unknown]]\",\"[[tmap:unknown]]\"]]);var u=\"-[prefix[_]] \"+i}else{var u=$tm.filter.defaultEdgeTypeFilter}r.setEdgeTypeFilter(u)}})};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/fixer",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/EdgeType": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/EdgeType\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\"use strict\";module.exports=EdgeType;var MapElementType=require(\"$:/plugins/felixhayashi/tiddlymap/js/MapElementType\");var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");function EdgeType(e,t,r){if(e instanceof EdgeType)return e;r=r||{};this.root=$tm.path.edgeTypes;var i=EdgeType._getIdParts(e,this.root);if(!i.name)return new EdgeType(\"tmap:unknown\");this.marker=i.marker;this.name=i.name;this.namespace=i.namespace;this.id=EdgeType._getId(this.marker,this.namespace,this.name);if(!this.namespace&&r.namespace){if(!new EdgeType(this.id).exists()){return new EdgeType(r.namespace+\":\"+this.name)}}MapElementType.call(this,this.id,this.root,EdgeType._fieldMeta,t);var s=this.style&&this.style.arrows;if(s){this.invertedArrow=this._isArrow(s,\"from\");this.toArrow=this._isArrow(s,\"to\")||this._isArrow(s,\"middle\");this.biArrow=this.invertedArrow===this.toArrow;if(this.biArrow)this.toArrow=this.invertedArrow=true}else{this.toArrow=true}}EdgeType.prototype=Object.create(MapElementType.prototype);EdgeType._fieldMeta=$tw.utils.extend({},MapElementType._fieldMeta,{label:{},\"show-label\":{}});EdgeType.edgeTypeRegexStr=\"^(_?)([^:_][^:]*):?([^:]*)\";EdgeType.edgeTypeRegex=new RegExp(EdgeType.edgeTypeRegexStr);EdgeType._getIdParts=function(e,t){e=utils.getWithoutPrefix(e||\"\",t+\"/\");var r=e.match(EdgeType.edgeTypeRegex)||[];return{marker:r[1]||\"\",namespace:r[3]&&r[2]||\"\",name:r[3]||r[2]||\"\"}};EdgeType._getId=function(e,t,r){return e+t+(t?\":\":\"\")+r};EdgeType.prototype.getLabel=function(){return this.label||this.name};EdgeType.prototype._isArrow=function(e,t){var r=e[t];return t===\"to\"&&r==null||r===true||typeof r===\"object\"&&r.enabled!==false};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/EdgeType",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/MapElementType": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/MapElementType\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\"use strict\";module.exports=MapElementType;var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");function MapElementType(t,i,e,s){this.id=t;this.root=i;this._fieldMeta=e;this.fullPath=this.root+\"/\"+this.id;this.isShipped=$tw.wiki.getSubTiddler($tm.path.pluginRoot,this.fullPath);this.load(s||this.fullPath)}MapElementType._fieldMeta={description:{},style:{parse:utils.parseJSON,stringify:JSON.stringify},modified:{},created:{}};MapElementType.prototype.load=function(t){if(!t)return;if(typeof t===\"string\"){var i=utils.startsWith(t,this.root);var e=i?t:this.root+\"/\"+t;this.loadFromTiddler(e)}else if(t instanceof $tw.Tiddler){this.loadFromTiddler(t)}else if(typeof t===\"object\"){for(var s in this._fieldMeta){this[s]=t[s]}}};MapElementType.prototype.loadFromTiddler=function(t){var i=utils.getTiddler(t);if(!i)return;var e=$tw.wiki.getSubTiddler($tm.path.pluginRoot,this.fullPath)||{};var s=$tw.utils.extend({},e.fields,i.fields);for(var l in this._fieldMeta){var r=this._fieldMeta[l].parse;var a=s[l];this[l]=r?r.call(this,a):a}};MapElementType.prototype.exists=function(){return utils.tiddlerExists(this.fullPath)};MapElementType.prototype.setStyle=function(t,i){if(typeof t===\"string\"){t=utils.parseJSON(t)}if(typeof t===\"object\"){if(i){utils.merge(this.style,t)}else{this.style=t}}};MapElementType.prototype.save=function(t,i){if(!t){t=this.fullPath}else if(typeof t!==\"string\"){return}var e={title:t,text:\"\"};if(!utils.startsWith(t,this.root)){e.id=this.id}if(i!==true){this.modified=new Date}if(!this.exists()){this.created=this.modified}for(var s in this._fieldMeta){var l=this._fieldMeta[s].stringify;e[s]=l?l.call(this,this[s]):this[s]}$tw.wiki.addTiddler(new $tw.Tiddler(e))};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/MapElementType",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/NodeType": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/NodeType\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\"use strict\";module.exports=NodeType;var MapElementType=require(\"$:/plugins/felixhayashi/tiddlymap/js/MapElementType\");var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");function NodeType(e,t){if(e instanceof NodeType){return e}e=typeof e===\"string\"?utils.getWithoutPrefix(e,$tm.path.nodeTypes+\"/\"):\"tmap:unknown\";MapElementType.call(this,e,$tm.path.nodeTypes,NodeType._fieldMeta,t)}NodeType.prototype=Object.create(MapElementType.prototype);NodeType._fieldMeta=$tw.utils.extend({},MapElementType._fieldMeta,{view:{},priority:{parse:function(e){return isNaN(e)?1:parseInt(e)},stringify:function(e){return utils.isInteger(e)?e.toString():\"1\"}},scope:{stringify:utils.getWithoutNewLines},\"fa-icon\":{},\"tw-icon\":{}});NodeType.prototype.getInheritors=function(e){var t=this.scope;return t?utils.getMatches(t,e||$tw.wiki.allTitles()):[]};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/NodeType",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/Popup": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/Popup\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\"use strict\";module.exports=Popup;var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");function Popup(t,e){e=e||{};this._parentDomNode=t;this._domNode=document.createElement(\"div\");this._domNode.style.display=\"none\";this._domNode.className=\"tmap-popup\";this._parentDomNode.appendChild(this._domNode);$tw.utils.addClass(this._domNode,e.className);this._isEnabled=true;this._isPreventShowOrHide=false;this._timeoutShow=null;this._timeoutHide=null;this._signature=null;this._isDisplayNoneAfterAnimation=true;this._hideDelayLeavingPopup=200;this._hideDelay=utils.isInteger(parseInt(e.hideDelay))?parseInt(e.hideDelay):200;this._showDelay=utils.isInteger(parseInt(e.showDelay))?parseInt(e.showDelay):200;utils.bind(this,[\"_show\",\"_hide\",\"_handleEnter\",\"_handleLeave\",\"_handleAnimationEnd\"]);this._listeners={mouseenter:this._handleEnter,mouseleave:this._handleLeave};var i=this._handleAnimationEnd;this._listeners[$tw.utils.convertEventName(\"animationEnd\")]=i;this._listeners[$tw.utils.convertEventName(\"transitionEnd\")]=i;utils.setDomListeners(\"add\",this._domNode,this._listeners,false)}Popup.prototype._handleEnter=function(t){this._isPreventShowOrHide=true};Popup.prototype._handleLeave=function(t){this._isPreventShowOrHide=false;this.hide(this._hideDelayLeavingPopup)};Popup.prototype._handleAnimationEnd=function(){if(this._isDisplayNoneAfterAnimation){this._domNode.style.display=\"none\"}};Popup.prototype._hide=function(t){if(!t&&this._isPreventShowOrHide)return;this._signature=null;this._isDisplayNoneAfterAnimation=true;$tw.utils.removeClass(this._domNode,\"tmap-popup-active\")};Popup.prototype._show=function(t,e){if(this._isPreventShowOrHide||$tm.mouse.ctrlKey||!this._isEnabled){return}this._domNode.style.display=\"none\";$tw.utils.removeClass(this._domNode,\"tmap-popup-active\");this._domNode.removeAttribute(\"style\");utils.removeDOMChildNodes(this._domNode);var i=this._domNode.appendChild(document.createElement(\"div\"));if(typeof e===\"function\"){e(t,i)}else{i.innerHTML=e}if(!i.childNodes.length)return;var s=this._parentDomNode.getBoundingClientRect();var o=$tm.mouse.clientX;var n=$tm.mouse.clientY;var h=s.left<o&&o<s.right&&s.top<n&&n<s.bottom;if(!h)return;this._signature=t;this._domNode.style.display=\"block\";var d=this._domNode.getBoundingClientRect();var a=s.right-(o+d.width);var l=o-d.width-s.left;var r=a>l;var p=s.bottom-(n+d.height);var u=n-d.height-s.top;var m=p>u;var _=r?-15:d.width+15;var v=m?-15:d.height+15;this._domNode.style.left=o-s.left-_+\"px\";this._domNode.style.top=n-s.top-v+\"px\";this._isDisplayNoneAfterAnimation=false;$tw.utils.addClass(this._domNode,\"tmap-popup-active\")};Popup.prototype.show=function(t,e,i){this._clearTimeouts();i=utils.isInteger(i)?i:this._showDelay;this._timeoutShow=window.setTimeout(this._show,i,t,e)};Popup.prototype.hide=function(t,e){this._clearTimeouts();t=utils.isInteger(t)?t:this._hideDelay;if(e||t===0){this._hide(e)}else{this._timeoutHide=window.setTimeout(this._hide,t,e)}};Popup.prototype.setEnabled=function(t){this._isEnabled=t};Popup.prototype._clearTimeouts=function(){window.clearTimeout(this._timeoutShow);window.clearTimeout(this._timeoutHide);this._timeoutShow=undefined;this._timeoutHide=undefined};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/Popup",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/URL": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/URL\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\"use strict\";module.exports=Url;/**\n * <<<\n * Lightweight URL manipulation with JavaScript. This library is \n * independent of any other libraries and has pretty simple interface\n * and lightweight code-base. Some ideas of query string parsing \n * had been taken from Jan Wolter.\"\n * \n * @see http://unixpapa.com/js/querystring.html\n * @license MIT\n * @author Mykhailo Stadnyk <mikhus@gmail.com>\n * <<< https://github.com/Mikhus/jsurl\n * \n * @class\n * @param {string} url\n */\nfunction Url(t){this.paths=function(t){var e=\"\",r=0,o;if(t&&t.length&&t+\"\"!==t){if(this.isAbsolute()){e=\"/\"}for(o=t.length;r<o;r++){t[r]=encode(t[r])}this.path=e+t.join(\"/\")}t=(this.path.charAt(0)===\"/\"?this.path.slice(1):this.path).split(\"/\");for(r=0,o=t.length;r<o;r++){t[r]=decode(t[r])}return t};this.encode=encode;this.decode=decode;this.isAbsolute=function(){return this.protocol||this.path.charAt(0)===\"/\"};this.toString=function(){return(this.protocol&&this.protocol+\"://\")+(this.user&&encode(this.user)+(this.pass&&\":\"+encode(this.pass))+\"@\")+(this.host&&this.host)+(this.port&&\":\"+this.port)+(this.path&&this.path)+(this.query.toString()&&\"?\"+this.query)+(this.hash&&\"#\"+encode(this.hash))};parse(this,t)}var map={protocol:\"protocol\",host:\"hostname\",port:\"port\",path:\"pathname\",query:\"search\",hash:\"hash\"},defaultPorts={ftp:21,gopher:70,http:80,https:443,ws:80,wss:443},parse=function(t,e){var r=document,o=r.createElement(\"a\"),e=e||r.location.href,s=e.match(/\\/\\/(.*?)(?::(.*?))?@/)||[],i;o.href=e;for(i in map){t[i]=o[map[i]]||\"\"}t.protocol=t.protocol.replace(/:$/,\"\");t.query=t.query.replace(/^\\?/,\"\");t.hash=decode(t.hash.replace(/^#/,\"\"));t.user=decode(s[1]||\"\");t.pass=decode(s[2]||\"\");t.port=defaultPorts[t.protocol]==t.port||t.port==0?\"\":t.port;if(!t.protocol&&!/^([a-z]+:)?\\/\\//.test(e)){var h=new Url(r.location.href.match(/(.*\\/)/)[0]),n=h.path.split(\"/\"),a=t.path.split(\"/\"),c=[\"protocol\",\"user\",\"pass\",\"host\",\"port\"],p=c.length;n.pop();for(i=0;i<p;i++){t[c[i]]=h[c[i]]}while(a[0]==\"..\"){n.pop();a.shift()}t.path=(e.charAt(0)!=\"/\"?n.join(\"/\"):\"\")+\"/\"+a.join(\"/\")}else{t.path=t.path.replace(/^\\/?/,\"/\")}t.paths((t.path.charAt(0)==\"/\"?t.path.slice(1):t.path).split(\"/\"));parseQs(t)},encode=function(t){return encodeURIComponent(t).replace(/'/g,\"%27\")},decode=function(t){t=t.replace(/\\+/g,\" \");t=t.replace(/%([ef][0-9a-f])%([89ab][0-9a-f])%([89ab][0-9a-f])/gi,function(t,e,r,o){var s=parseInt(e,16)-224,i=parseInt(r,16)-128;if(s==0&&i<32){return t}var h=parseInt(o,16)-128,n=(s<<12)+(i<<6)+h;if(n>65535){return t}return String.fromCharCode(n)});t=t.replace(/%([cd][0-9a-f])%([89ab][0-9a-f])/gi,function(t,e,r){var o=parseInt(e,16)-192;if(o<2){return t}var s=parseInt(r,16)-128;return String.fromCharCode((o<<6)+s)});t=t.replace(/%([0-7][0-9a-f])/gi,function(t,e){return String.fromCharCode(parseInt(e,16))});return t},parseQs=function(t){var e=t.query;t.query=new function(t){var e=/([^=&]+)(=([^&]*))?/g,r;while(r=e.exec(t)){var o=decodeURIComponent(r[1].replace(/\\+/g,\" \")),s=r[3]?decode(r[3]):\"\";if(this[o]!=null){if(!(this[o]instanceof Array)){this[o]=[this[o]]}this[o].push(s)}else{this[o]=s}}this.clear=function(){for(var t in this){if(!(this[t]instanceof Function)){delete this[t]}}};this.count=function(){var t=0,e;for(e in this){if(!(this[e]instanceof Function)){t++}}return t};this.isEmpty=function(){return this.count()===0};this.toString=function(){var t=\"\",e=encode,r,o;for(r in this){if(this[r]instanceof Function){continue}if(this[r]instanceof Array){var s=this[r].length;if(s){for(o=0;o<s;o++){t+=t?\"&\":\"\";t+=e(r)+\"=\"+e(this[r][o])}}else{t+=(t?\"&\":\"\")+e(r)+\"=\"}}else{t+=t?\"&\":\"\";t+=e(r)+\"=\"+e(this[r])}}return t}}(e)};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/URL",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/utils": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/utils\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\"use strict\";module.exports={};var vis=require(\"$:/plugins/felixhayashi/vis/vis.js\");var exception=require(\"$:/plugins/felixhayashi/tiddlymap/js/exception\");var URL=require(\"$:/plugins/felixhayashi/tiddlymap/js/URL\");var utils=module.exports;utils.deleteTiddlers=function(e){var t=Object.keys(e);var i=$tw.wiki.getTiddlerList(\"$:/StoryList\");for(var r=t.length;r--;){var n=utils.getTiddlerRef(e[t[r]]);if(!$tw.wiki.tiddlerExists(e[t[r]])){continue}var l=i.indexOf(n);if(l!==-1){i.splice(l,1);utils.setField(\"$:/StoryList\",\"list\",i)}$tw.wiki.deleteTiddler(n)}};utils.moveFieldValues=function(e,t,i,r,n){if(e===t)return;var l=n||$tw.wiki.allTitles();for(var s=l.length;s--;){var u=utils.getTiddler(l[s]);if(u.isDraft()||!u.fields[e]||!r&&$tw.wiki.isSystemTiddler(l[s])){continue}var a={};a[t]=u.fields[e];if(i){a[e]=undefined}$tw.wiki.addTiddler(new $tw.Tiddler(u,a))}};utils.getLabel=function(e,t){var i=utils.getTiddler(e);return i&&i.fields[t]?i.fields[t]:i.fields.title};utils.ucFirst=function(e){return e&&e[0].toUpperCase()+e.slice(1)};utils.convert=function(e,t){if(typeof e!==\"object\")return;switch(t){case\"array\":return utils.getValues(e);case\"hashmap\":case\"object\":if(e instanceof vis.DataSet){return e.get({returnType:\"Object\"})}else{return e}case\"dataset\":default:if(e instanceof vis.DataSet){return e}if(!Array.isArray(e)){e=utils.getValues(e)}return new vis.DataSet(e)}};utils.getValues=function(e){if(Array.isArray(e)){return e}else if(e instanceof vis.DataSet){return e.get({returnType:\"Array\"})}var t=[];var i=Object.keys(e);for(var r=i.length;r--;){t.push(e[i[r]])}return t};utils.getDataUri=function(e,t,i){var r=utils.getTiddler(e);var t=t||r.fields.type||\"image/svg+xml\";var n=r.fields.text;var l=$tw.config.contentTypeInfo[t].encoding;if(t===\"image/svg+xml\"){n=n.replace(/\\r?\\n|\\r/g,\" \");if(!utils.hasSubString(\"xmlns\",n)){n=n.replace(/<svg/,'<svg xmlns=\"http://www.w3.org/2000/svg\"')}}if(i&&l!==\"base64\"){l=\"base64\";n=window.btoa(n)}return\"data:\"+t+\";\"+l+\",\"+n};utils.hasOwnProp=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)};utils.makeHashMap=function(){var e=Object.create(null);Object.defineProperty(e,\"hasOwnProperty\",{enumerable:false,configurable:false,writable:false,value:Object.prototype.hasOwnProperty.bind(e)});return e};utils.getMatches=function(e,t){var i=undefined;if(typeof e===\"string\"){e=$tw.wiki.compileFilter(e)}if(t!=null&&typeof t===\"object\"){var r=$tw.wiki;if(!Array.isArray(t)){t=Object.keys(t)}i=function(e){for(var i=t.length;i--;){var n=r.getTiddler(t[i]);e(n,t[i])}}}return e.call($tw.wiki,i)};var eTyFiltAutoPrefix=\"[all[]] \";utils.getEdgeTypeMatches=function(e,t){if(!t){var i=$tm.path.edgeTypes+\"/\";t=utils.getTiddlersByPrefix(i,{iterator:\"eachTiddlerPlusShadows\",removePrefix:true})}if(t!=null&&!Array.isArray(t)){t=Object.keys(t)}return utils.getMatches(eTyFiltAutoPrefix+(e||\"\"),t)};utils.isEdgeTypeMatch=function(e,t){return utils.isMatch(e,eTyFiltAutoPrefix+(t||\"\"))};utils.isMatch=function(e,t){var i=utils.getTiddlerRef(e);var r=utils.getMatches(t,[i]);return i===r[0]};utils.isInteger=Number.isInteger||function(e){return typeof e===\"number\"&&isFinite(e)&&Math.floor(e)===e};utils.escapeRegex=function(e){return e.replace(/[-$^?.+*[\\]\\\\(){}|]/g,\"\\\\$&\")};utils.replaceAll=function(e,t,i){t=t||\"\";for(var r=i.length;r--;){var n=i[r];var l=t;if(Array.isArray(n)){l=n[1];n=n[0]}e=e.replace(n,l)}return e};utils.isTrue=function(e,t){if(e==null){return!!t}else if(typeof e===\"string\"){var i=parseInt(e);return isNaN(i)?e===\"true\":i!==0}else if(typeof e===\"boolean\"){return e}else if(typeof e===\"number\"){return i!==0}return false};utils.getTiddlerRef=function(e){if(e instanceof $tw.Tiddler){return e.fields.title}else if(typeof e===\"string\"){return e}};utils.getTiddler=function(e,t){if(e instanceof $tw.Tiddler){if(!t){return e}e=e.fields.title}return $tw.wiki.getTiddler(e)};utils.getBasename=function(e){return e.substring(e.lastIndexOf(\"/\")+1)};utils.notify=function(e){var t=\"$:/temp/tiddlymap/notify\";$tw.wiki.addTiddler(new $tw.Tiddler({title:t,text:e}));$tw.notifier.display(t)};utils.tiddlerExists=function(e){var t=utils.getTiddlerRef(e);return t&&($tw.wiki.tiddlerExists(t)||$tw.wiki.isShadowTiddler(t))};utils.isPreviewed=function(e){if(e){if(e.getVariable(\"tv-tiddler-preview\")){return true}else{var t=\"tc-tiddler-preview-preview\";return!!utils.getAncestorWithClass(e.parentDomNode,t)}}return false};utils.getAncestorWithClass=function(e,t){if(typeof e!==\"object\"||typeof t!==\"string\")return;while(e.parentNode){e=e.parentNode;if($tw.utils.hasClass(e,t)){return e}}};utils.getPropertiesByPrefix=function(e,t,i){var r=utils.makeHashMap();for(var n in e){if(utils.startsWith(n,t)){r[i?n.substr(t.length):n]=e[n]}}return r};utils.getWithoutPrefix=function(e,t){return utils.startsWith(e,t)?e.substr(t.length):e};utils.hasKeyWithPrefix=function(e,t){for(var i in e){if(utils.startsWith(i,t)){return true}}return false};utils.startsWith=function(e,t){return e.substring(0,t.length)===t};utils.hasElements=function(e){return Object.keys(e).length>0};utils.groupByProperty=function(e,t){e=utils.getIterableCollection(e);var i=utils.makeHashMap();var r=Object.keys(e);for(var n in r){var l=e[r[n]];var s=l[t];if(s==null){throw\"Cannot group by property \"+t}else{if(!Array.isArray(i[s])){i[s]=[]}i[s].push(l)}}return i};utils.findAndRemoveClassNames=function(e){for(var t=e.length;t--;){var i=document.getElementsByClassName(e[t]);for(var r=i.length;r--;){$tw.utils.removeClass(i[r],e[t])}}};utils.parseFieldData=function(e,t,i){var r=utils.getTiddler(e);if(!r)return i;if(!t)t=\"text\";return utils.parseJSON(r.fields[t],i)};utils.getImgFromWeb=function(e,t){if(!e||typeof t!==\"function\")return;var i=new XMLHttpRequest;i.open(\"GET\",e,true);i.responseType=\"blob\";i.onerror=function(e){console.log(e)};i.onload=function(e){if(this.readyState===4&&this.status===200){var i=this.response;t(window.URL.createObjectURL(i))}};try{i.send()}catch(r){console.log(r)}};utils.parseJSON=function(e,t){try{return JSON.parse(e)}catch(i){return t}};utils.writeFieldData=function(e,t,i){if(typeof i===\"object\"){utils.setField(e,t,JSON.stringify(i))}};utils.getPrettyFilter=function(e){e=e.trim().replace(\"][\",\"] [\");var t=/[\\+\\-]?\\[.+?[\\]\\}\\>]\\]/g;var i=e.match(t);e=e.replace(t,\" [] \").trim();var r=e.split(/\\s+/);var n=0;var l=[];for(var s=0;s<r.length;s++){l[s]=r[s]===\"[]\"?i[n++]:r[s]}return l.join(\"\\n\")};utils.setField=function(e,t,i){if(!e||!t)return;var r=utils.getTiddlerRef(e);var n={title:r};n[t]=i;var l=$tw.wiki.getTiddler(r,true);if(t!==\"text\"&&l&&!l.fields.text){n.text=\"\"}var l=new $tw.Tiddler(l,n);$tw.wiki.addTiddler(l);return l};utils.clone=function(e,t){utils.setField(e,\"title\",t)};utils.setEntry=function(e,t,i){$tw.wiki.setText(utils.getTiddlerRef(e),null,t,i)};utils.getEntry=function(e,t,i){var r=$tw.wiki.getTiddlerData(utils.getTiddlerRef(e),{});return r[t]==null?i:r[t]};utils.isLeftVersionGreater=function(e,t){return e!==t&&$tw.utils.checkVersions(e,t)};utils.getField=function(e,t,i){var r=utils.getTiddler(e);return!r?i||\"\":r.fields[t]||i||\"\"};utils.getText=function(e,t){return utils.getField(e,\"text\",t)};utils.setText=function(e,t){utils.setField(e,\"text\",t)};utils.getFirstElementByClassName=function(e,t,i){var r=(t||document).getElementsByClassName(e)[0];if(!r&&(typeof i===\"boolean\"?i:true)){var n=\"Missing element with class \"+e+\" inside \"+t;throw new utils.exception.EnvironmentError(n)}return r};utils.isDraft=function(e){var t=utils.getTiddler(e);return t&&t.isDraft()};utils.getRandomInt=function(e,t){return Math.floor(Math.random()*(t-e)+e)};utils.pickRandom=function(e){return e[utils.getRandomInt(0,e.length-1)]};utils.getRandomLabel=function(e){e=e||{};var t=[\"exciting\",\"notable\",\"epic\",\"new\",\"fancy\",\"great\",\"cool\",\"fresh\",\"funky\",\"clever\"];var i=[\"concept\",\"idea\",\"thought\",\"topic\",\"subject\"];return\"My\"+\" \"+utils.pickRandom(t)+\" \"+(e.object||utils.pickRandom(i))+(e.plural?\"s\":\"\")};utils.merge=function(){var e=function(t,i){if(typeof t!==\"object\"){t={}}for(var r in i){if(i.hasOwnProperty(r)){if(i[r]!=null){t[r]=typeof i[r]===\"object\"?e(t[r],i[r]):i[r]}}}return t};return function(t){for(var i=1,r=arguments.length;i<r;i++){var n=arguments[i];if(n!=null&&typeof n===\"object\"){t=e(t,n)}}return t}}();utils.drawRaster=function(e,t,i,r,n){var r=parseInt(r)||10;var l=e.canvas;var s=l.width/t;var u=l.width/t;var a=i.x-s/2;var f=i.y-u/2;for(var o=a;o<s;o+=r){e.moveTo(o,f);e.lineTo(o,u)}for(var d=f;d<u;d+=r){e.moveTo(a,d);e.lineTo(s,d)}e.strokeStyle=n||\"#D9D9D9\";e.stroke()};utils.isSystemOrDraft=function(e){if($tw.wiki.isSystemTiddler(utils.getTiddlerRef(e))){return true}var t=utils.getTiddler(e);return t&&t.isDraft()};utils.getMergedTiddlers=function(e,t){if(!Array.isArray(e))return;for(var i=e.length;i--;){e[i]=utils.getTiddler(e[i])}if(!e.length)return;e.push({title:t||e[0].fields.title},$tw.wiki.getModificationFields(),$tw.wiki.getCreationFields());e.unshift(null);return new(Function.prototype.bind.apply($tw.Tiddler,e))};utils.getChildWidgetByProperty=function(e,t,i){var r=e.children;for(var n=r.length;n--;){var l=r[n];if(l[t]===i){return l}else{l=utils.getChildWidgetByProperty(l,t,i);if(l){return l}}}};utils.setDomListeners=function(e,t,i,r){r=typeof r===\"boolean\"?r:false;e=e+\"EventListener\";for(var n in i){var l=i[n];if(typeof l===\"function\"){t[e](n,l,r)}else{t[e](n,l[0],typeof l[1]===\"boolean\"?l[1]:r)}}};utils.removeArrayElement=function(e,t){var i=e.indexOf(t);if(i>-1){return e.splice(i,1)[0]}};utils.removeDOMChildNodes=function(e){for(var t=e.childNodes.length;t--;){e.removeChild(e.childNodes[t])}};utils.addTWlisteners=function(e,t,i){for(var r in e){t.addEventListener(r,e[r].bind(i))}};utils.bind=function(e,t){if(typeof t===\"string\"){t=[t]}else{for(var i=t.length;i--;){var r=e[t[i]];if(typeof r===\"function\"){e[t[i]]=r.bind(e)}}}};utils.mv=function(e,t,i,r){if(e===t||!e||!t)return;i=typeof i===\"boolean\"?i:false;r=typeof r===\"boolean\"?r:true;var n=utils.getTiddlersByPrefix(e);var l=utils.makeHashMap();for(var s=n.length;s--;){var u=n[s];var a=u.replace(e,t);if($tw.wiki.tiddlerExists(a)&&!i){return}l[u]=a}for(var u in l){utils.setField(u,\"title\",l[u]);if(r)$tw.wiki.deleteTiddler(u)}return l};utils.cp=function(e,t,i){return utils.mv(e,t,i,false)};utils.inArray=function(e,t){return t.indexOf(e)!==-1};utils.hasSubString=function(e,t){return e.indexOf(t)!==-1};utils.joinAndWrap=function(e,t,i,r){if(!r)r=\" \";return t+e.join(i+r+t)+i};utils.keysOfItemsWithProperty=function(e,t,i,r){e=utils.getIterableCollection(e);var n=Object.keys(e);var l=[];var r=typeof r===\"number\"?r:n.length;for(var s=0,u=n.length;s<u;s++){var a=n[s];if(typeof e[a]===\"object\"&&e[a][t]){if(!i||e[a][t]===i){l.push(a);if(l.length===r){break}}}}return l};utils.keyOfItemWithProperty=function(e,t,i){var r=utils.keysOfItemsWithProperty(e,t,i,1);return r.length?r[0]:undefined};utils.deleteByPrefix=function(e,t){if(!e)return;t=t||$tw.wiki.allTitles();var i=[];for(var r=t.length;r--;){if(utils.startsWith(t[r],e)){$tw.wiki.deleteTiddler(t[r]);i.push(i[r])}}return i};utils.getIterableCollection=function(e){return e instanceof vis.DataSet?e.get():e};utils.getLookupTable=function(e,t){e=utils.getIterableCollection(e);var i=utils.makeHashMap();var r=Object.keys(e);for(var n=0,l=r.length;n<l;n++){var s=r[n];var u=t?e[s][t]:e[s];var a=typeof u;if(a===\"string\"&&u!==\"\"||a===\"number\"){if(!i[u]){i[u]=t?e[s]:true;continue}}throw'TiddlyMap: Cannot use \"'+ltIndex+'\" as lookup table index'}return i};utils.getWithoutNewLines=function(e){if(typeof e===\"string\"){return e.replace(/[\\n\\r]/g,\" \")}};utils.getArrayValuesAsHashmapKeys=function(e){return utils.getLookupTable(e)};utils.getTiddlersWithField=function(e,t,i){if(!i||typeof i!==\"object\")i={};var r=i.tiddlers||$tw.wiki.allTitles();var n=i.limit||0;var l=i.isIncludeDrafts===true;var s=utils.makeHashMap();var u=Object.keys(r);var a=$tw.utils.hop;for(var f=u.length;f--;){var o=utils.getTiddler(r[u[f]]);var d=o.fields;if(a(d,e)&&(!a(d,\"draft.of\")||l)){if(!t||d[e]===t){s[d.title]=o;if(--n===0)break}}}return s};utils.getTiddlerWithField=function(e,t){var i=utils.getTiddlersWithField(e,t,{limit:1});return Object.keys(i)[0]};utils.getTiddlersByPrefix=function(e,t){t=t||{};var i=t.removePrefix===true;var r=[];$tw.wiki[t.iterator||\"each\"](function(t,n){if(utils.startsWith(n,e)){r.push(i?utils.getWithoutPrefix(n,e):n)}});return r};utils.addTiddler=function(e,t){var i=utils.getTiddler(e);if(!t&&i)return i;i=new $tw.Tiddler({title:e,text:\"\"},$tw.wiki.getModificationFields(),$tw.wiki.getCreationFields());$tw.wiki.addTiddler(i);return i};utils.getSnapshotTitle=function(e,t){return\"Snapshot – \"+e+\" (\"+(new Date).toDateString()+\")\"+\".\"+(t||\"png\")};utils.exception=exception;utils.URL=URL;utils.makeDraftTiddler=function(e){var t=$tw.wiki.findDraft(e);if(t){return $tw.wiki.getTiddler(t)}var i=$tw.wiki.getTiddler(e);t=utils.generateDraftTitle(e);var r=new $tw.Tiddler(i,{title:t,\"draft.title\":e,\"draft.of\":e},$tw.wiki.getModificationFields());$tw.wiki.addTiddler(r);return r};utils.generateDraftTitle=function(e){var t=0,i;do{i=\"Draft \"+(t?t+1+\" \":\"\")+\"of '\"+e+\"'\";t++}while($tw.wiki.tiddlerExists(i));return i};utils.touch=function(e){utils.setField(e,\"modified\",new Date)};utils.getFullScreenApis=function(){var e=document,t=e.body,i={_requestFullscreen:t.webkitRequestFullscreen!==undefined?\"webkitRequestFullscreen\":t.mozRequestFullScreen!==undefined?\"mozRequestFullScreen\":t.msRequestFullscreen!==undefined?\"msRequestFullscreen\":t.requestFullscreen!==undefined?\"requestFullscreen\":\"\",_exitFullscreen:e.webkitExitFullscreen!==undefined?\"webkitExitFullscreen\":e.mozCancelFullScreen!==undefined?\"mozCancelFullScreen\":e.msExitFullscreen!==undefined?\"msExitFullscreen\":e.exitFullscreen!==undefined?\"exitFullscreen\":\"\",_fullscreenElement:e.webkitFullscreenElement!==undefined?\"webkitFullscreenElement\":e.mozFullScreenElement!==undefined?\"mozFullScreenElement\":e.msFullscreenElement!==undefined?\"msFullscreenElement\":e.fullscreenElement!==undefined?\"fullscreenElement\":\"\",_fullscreenChange:e.webkitFullscreenElement!==undefined?\"webkitfullscreenchange\":e.mozFullScreenElement!==undefined?\"mozfullscreenchange\":e.msFullscreenElement!==undefined?\"MSFullscreenChange\":e.fullscreenElement!==undefined?\"fullscreenchange\":\"\"};if(!i._requestFullscreen||!i._exitFullscreen||!i._fullscreenElement){return null}else{return i}};utils.flatten=function(e,t){t=t||{};var i=t.delimiter||\".\";var r=t.prefix||\"\";var n={};function l(e,s){Object.keys(e).forEach(function(u){var a=e[u];var f=t.safe&&Array.isArray(a);var o=Object.prototype.toString.call(a);var d=o===\"[object Object]\"||o===\"[object Array]\";var c=s?s+i+u:r+u;if(!f&&d){return l(a,c)}n[c]=a})}l(e);return n};utils.unflatten=function(e,t){t=t||{};var i=t.delimiter||\".\";var r={};if(Object.prototype.toString.call(e)!==\"[object Object]\"){return e}function n(e){var t=Number(e);return isNaN(t)||e.indexOf(\".\")!==-1?e:t}Object.keys(e).forEach(function(l){var s=l.split(i);var u=n(s.shift());var a=n(s[0]);var f=r;while(a!==undefined){if(f[u]===undefined){f[u]=typeof a===\"number\"&&!t.object?[]:{}}f=f[u];if(s.length>0){u=n(s.shift());a=n(s[0])}}f[u]=utils.unflatten(e[l],t)});return r};utils.genUUID=function(){var e=\"0123456789abcdefghijklmnopqrstuvwxyz\".split(\"\");return function(){var t=e,i=new Array(36);var r=0,n;for(var l=0;l<36;l++){if(l==8||l==13||l==18||l==23){i[l]=\"-\"}else if(l==14){i[l]=\"4\"}else{if(r<=2)r=33554432+Math.random()*16777216|0;n=r&15;r=r>>4;i[l]=t[l==19?n&3|8:n]}}return i.join(\"\")}}();",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/utils",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\"use strict\";module.exports=ViewAbstraction;var EdgeType=require(\"$:/plugins/felixhayashi/tiddlymap/js/EdgeType\");var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");function ViewAbstraction(t,e){e=e||{};this._edgeTypePath=$tm.path.edgeTypes;if(t instanceof ViewAbstraction){return t}this._registerPaths(t,e.isCreate);if(e.isCreate){this._createView(e)}else if(!this.exists()){return{exists:function(){return false}}}this.rebuildCache()}ViewAbstraction.prototype._noNeedToRebuildCache=false;ViewAbstraction.prototype._registerPaths=function(t,e){this.comp=this.comp||utils.makeHashMap();this.comp.config=this._getConfigPath(t,e);this.comp.map=this.comp.config+\"/map\";this.comp.nodeFilter=this.comp.config+\"/filter/nodes\";this.comp.edgeTypeFilter=this.comp.config+\"/filter/edges\"};ViewAbstraction.prototype._getConfigPath=function(t,e){if(t instanceof $tw.Tiddler){return t.fields.title}if(typeof t===\"string\"){t=utils.getWithoutPrefix(t,$tm.path.views+\"/\");if(t&&!utils.hasSubString(t,\"/\")){return $tm.path.views+\"/\"+t}}if(e){var i=$tm.path.views+\"/\"+utils.getRandomLabel({plural:true});return $tw.wiki.generateNewTitle(i)}};ViewAbstraction.prototype.getPaths=function(){return this.comp};ViewAbstraction.prototype._createView=function(t){if(this.exists()){if(!t.isForce)return;this.destroy()}var e=new ViewAbstraction(t.protoView);if(e.exists()){var i=utils.cp(e.getRoot(),this.comp.config,true)}var r={};r.title=this.comp.config;if(!t.isHidden){r[$tm.field.viewMarker]=true}r.id=utils.genUUID();$tw.wiki.addTiddler(new $tw.Tiddler(utils.getTiddler(this.comp.config),r));this.setEdgeTypeFilter($tm.filter.defaultEdgeTypeFilter)};ViewAbstraction.prototype.isLocked=function(){return $tw.wiki.isShadowTiddler(this.comp.config)};ViewAbstraction.prototype.update=function(t){var e=t.changedTiddlers;if(t[$tm.path.edgeTypes]||utils.hasKeyWithPrefix(e,this.comp.config)){this.rebuildCache();return true}};ViewAbstraction.prototype.rebuildCache=function(t){if(!t&&this._noNeedToRebuildCache){this._noNeedToRebuildCache=false;return}this.config=this.getConfig(null,true);this.nodeData=this.getNodeData(null,true);this.nodeFilter=this.getNodeFilter(null,true);this.edgeTypeFilter=this.getEdgeTypeFilter(null,true)};ViewAbstraction.prototype.addPlaceholder=function(t){utils.cp(t,this.getRoot()+\"/snapshot\",true)};ViewAbstraction.prototype.exists=function(){return utils.tiddlerExists(this.comp.config)};ViewAbstraction.prototype.getRoot=function(){return this.comp.config};ViewAbstraction.prototype.getCreationDate=function(t){var e=$tw.wiki.getTiddler(this.comp.config).fields[\"created\"];if(t){return e instanceof Date?$tw.utils.formatDateString(e,\"DDth MMM YYYY\"):\"\"}return e};ViewAbstraction.prototype.getLabel=function(){return utils.getBasename(this.comp.config)};ViewAbstraction.prototype.destroy=function(){var t=\"[prefix[\"+this.getRoot()+\"]]\";utils.deleteTiddlers(utils.getMatches(t))};ViewAbstraction.prototype.getOccurrences=function(){var t=\"[regexp:text[<\\\\$(tiddlymap|tmap).*?view=.\"+this.getLabel()+\"..*?>]]\";return utils.getMatches(t)};ViewAbstraction.prototype.rename=function(t){if(typeof t!==\"string\")return false;if(utils.inArray(\"/\",t)){$tm.notify('A view name must not contain any \"/\"');return false}var e=this.getLabel();var i=$tm.path.views+\"/\"+t;var r=this.getRoot();var o=utils.mv(r,i,true);if($tm.config.sys.defaultView===e){utils.setEntry($tm.ref.sysUserConf,\"defaultView\",t)}if($tm.config.sys.liveTab.fallbackView===e){utils.setEntry($tm.ref.sysUserConf,\"liveTab.fallbackView\",t)}$tw.wiki.each(function(i,r){if(i.fields[\"tmap.open-view\"]===e){utils.setField(r,\"tmap.open-view\",t)}else if(utils.startsWith(r,$tm.path.views)){var o=new ViewAbstraction(r);if(!o.exists())return;var s=o.getNodeData();for(var n in s){if(s[n][\"open-view\"]===e){s[n][\"open-view\"]=t}}o.saveNodeData(s)}});this._registerPaths(t);this.rebuildCache()};ViewAbstraction.prototype.isEnabled=function(t){return utils.isTrue(this.getConfig(t),false)};ViewAbstraction.prototype.getConfig=function(t,e,i){if(!e&&this.config){var r=this.config}else{var o=$tw.wiki.getTiddler(this.comp.config).fields;var r=utils.getPropertiesByPrefix(o,\"config.\")}return t?r[utils.startsWith(t,\"config.\")?t:\"config.\"+t]:r};ViewAbstraction.prototype.getHierarchyEdgeTypes=function(){if(this.getConfig(\"layout.active\")!==\"hierarchical\")return[];var t=utils.getPropertiesByPrefix(this.getConfig(),\"config.layout.hierarchical.order-by-\",true);var e=utils.makeHashMap();for(var i in t){if(t[i]===\"true\"){var r=utils.getTiddler($tm.indeces.tById[i]);if(r){e[utils.getBasename(r.fields.title)]=true}}}return e};ViewAbstraction.prototype.setConfig=function(){var t=arguments;if(t[0]==null)return;if(t.length===1&&typeof t[0]===\"object\"){for(var e in t[0]){this.setConfig(e,t[0][e])}}else if(t.length===2&&typeof t[0]===\"string\"){var e=utils.getWithoutPrefix(t[0],\"config.\");var i=t[1];if(i===undefined)return;if(i===null){$tm.logger(\"debug\",\"Removing config\",e);delete this.config[\"config.\"+e]}else{if(e===\"edge_type_namespace\"){var r=i.match(/[^:]+/);i=r?r[0]:\"\"}}$tm.logger(\"log\",\"Setting config\",e,i);this.config[\"config.\"+e]=i}else{return}$tw.wiki.addTiddler(new $tw.Tiddler($tw.wiki.getTiddler(this.comp.config),this.config));this._noNeedToRebuildCache=true};ViewAbstraction.prototype.isExplicitNode=function(t){var e=$tw.utils.escapeRegExp(this._getAddNodeFilterPart(t));return this.getNodeFilter(\"raw\").match(e)};ViewAbstraction.prototype.isLiveView=function(){return this.getLabel()===$tm.misc.liveViewLabel};ViewAbstraction.prototype._getAddNodeFilterPart=function(t){if(!t){throw\"Supplied param is not a node!\"}var e=typeof t===\"object\"?t.id:t;return\"[field:tmap.id[\"+e+\"]]\"};ViewAbstraction.prototype.setNodeFilter=function(t,e){t=t.replace(/[\\n\\r]/g,\" \");if(this.getNodeFilter(\"raw\")===t){return}if(this.isLiveView()&&!e){var i=\"You must not change the live view's node filter!\";$tm.notify(i);return}utils.setField(this.comp.nodeFilter,\"filter\",t);$tm.logger(\"debug\",\"Node filter set to\",t);this.nodeFilter=this.getNodeFilter(null,true);this._noNeedToRebuildCache=true};ViewAbstraction.prototype.setEdgeTypeFilter=function(t){t=t.replace(/[\\n\\r]/g,\" \");if(this.getEdgeTypeFilter(\"raw\")===t){return}utils.setField(this.comp.edgeTypeFilter,\"filter\",t);$tm.logger(\"debug\",\"Edge filter set to\",t);this.edgeTypeFilter=this.getEdgeTypeFilter(null,true);this._noNeedToRebuildCache=true};ViewAbstraction.prototype.addNode=function(t){if(this.isExplicitNode(t))return false;var e=this._getAddNodeFilterPart(t);this.setNodeFilter(this.getNodeFilter(\"raw\")+\" \"+e);this.saveNodePosition(t)};ViewAbstraction.prototype.removeNode=function(t){if(!this.isExplicitNode(t))return false;var e=this._getAddNodeFilterPart(t);var i=this.getNodeFilter(\"raw\").replace(e,\"\");this.setNodeFilter(i);return true};ViewAbstraction.prototype.getEdgeTypeFilter=function(t,e){if(!e&&this.edgeTypeFilter){var i=this.edgeTypeFilter}else{var i=utils.makeHashMap();var r=$tm.indeces.allETy;var o=Object.keys(r);var s=$tw.wiki.getTiddler(this.comp.edgeTypeFilter);i.raw=s&&s.fields.filter||\"\";i.pretty=utils.getPrettyFilter(i.raw);i.matches=utils.getEdgeTypeMatches(i.raw,r);i.whitelist=utils.getLookupTable(i.matches)}return t?i[t]:i};ViewAbstraction.prototype.isEdgeTypeVisible=function(t){var e={namespace:this.getConfig(\"edge_type_namespace\")};var t=new EdgeType(t,null,e);return utils.isEdgeTypeMatch(t.id,this.edgeTypeFilter.raw)};ViewAbstraction.prototype.getNodeFilter=function(t,e){if(!e&&this.nodeFilter){var i=this.nodeFilter}else{var i=utils.makeHashMap();var r=$tw.wiki.getTiddler(this.comp.nodeFilter);i.raw=r&&r.fields.filter||\"\";i.pretty=utils.getPrettyFilter(i.raw);i.compiled=$tw.wiki.compileFilter(i.raw)}return t?i[t]:i};ViewAbstraction.prototype.getNodeData=function(t,e){var i=!e&&this.nodeData?this.nodeData:utils.parseFieldData(this.comp.map,\"text\",{});return t?i[t]:i};ViewAbstraction.prototype.equals=function(t){if(t===this)return true;var t=new ViewAbstraction(t);return t.exists()&&this.getRoot()===t.getRoot()};ViewAbstraction.prototype.saveNodeData=function(){var t=arguments;var e=this.getNodeData();if(t.length===2){if(typeof t[1]===\"object\"){if(t[1]===null){e[t[0]]=undefined}else{e[t[0]]=$tw.utils.extend(e[t[0]]||{},t[1])}}}else if(t.length===1&&typeof t[0]===\"object\"){$tm.logger(\"log\",\"Storing data in\",this.comp.map);$tw.utils.extend(e,t[0])}else{return}utils.writeFieldData(this.comp.map,\"text\",e);this.nodeData=e;this._noNeedToRebuildCache=true};ViewAbstraction.prototype.saveNodePosition=function(t){if(t.id&&t.x&&t.y){this.saveNodeData(t.id,{x:t.x,y:t.y})}};ViewAbstraction.prototype.saveNodeStyle=function(t,e){var i=this.getNodeData()[t];if(i){for(var r in i){if(r!==\"x\"&&r!==\"y\")i[r]=undefined}}this.saveNodeData(t,e)};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/config/vis": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/config/vis\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\"use strict\";module.exports={locale:\"en_EN\",clickToUse:false,autoResize:false,height:\"100%\",width:\"100%\",configure:{enabled:false},interaction:{dragNodes:true,dragView:true,hideEdgesOnDrag:false,hideNodesOnDrag:false,hover:true,navigationButtons:true,multiselect:true,selectable:true,selectConnectedEdges:true,tooltipDelay:600,zoomView:false,keyboard:{enabled:false,speed:{x:10,y:10,zoom:.02},bindToWindow:false}},manipulation:{initiallyActive:true},nodes:{shape:\"box\",shadow:{enabled:false},color:{border:\"#2B7CE9\",background:\"#97C2FC\"}},edges:{smooth:{enabled:true},color:{color:\"#848484\",inherit:false},arrows:{to:{enabled:true}}},physics:{forceAtlas2Based:{gravitationalConstant:-300,springLength:0,springConstant:.2,centralGravity:.015,damping:.4},solver:\"forceAtlas2Based\",stabilization:{enabled:true,iterations:1e3,updateInterval:10,onlyDynamicEdges:false,fit:false}}};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/config/vis",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/macro/tmap": {
            "text": "/*\\\ntitle: $:/plugins/felixhayashi/tiddlymap/js/macro/tmap\ntype: application/javascript\nmodule-type: macro\n\n@preserve\n\n\\*/\n\"use strict\";exports.name=\"tmap\";exports.params=getParamSlots(5);exports.run=run;var EdgeType=require(\"$:/plugins/felixhayashi/tiddlymap/js/EdgeType\");var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");var ViewAbstraction=require(\"$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction\");function run(){this.substVarRefs=this.substituteVariableReferences;var r=command[arguments[0]];var t=null;if(typeof r===\"function\"){var e=Array.prototype.slice.call(arguments,1);var t=r.apply(this,e)}return typeof t===\"string\"?t:\"\"}function getParamSlots(r){var t=[];for(var e=0;e<r;e++){t.push({name:\"arg\"+e})}return t}var command=utils.makeHashMap();command.basename=function(r){var t=r||this.getVariable(\"currentTiddler\");return utils.getBasename(t)};command.datauri=function(r,t){return utils.getDataUri(r,t,true)};command.testJSON=function(r){var t=$tw.wiki.getTiddler(this.getVariable(\"currentTiddler\"));try{JSON.parse(t.fields[r]);return\"valid\"}catch(e){return\"malformed\"}};command.splitAndSelect=function(r,t){var e=this.getVariable(\"currentTiddler\");var a=e.split(r)[t];return a!=null?a:e};command.concat=function(){var r=\"\";for(var t=1,e=arguments.length;t<e;t++){r+=arguments[t]}return r};command.uuid=function(){return utils.genUUID()};command.regRepl=function(){var r=this.substVarRefs(arguments[0]);var t=arguments[1];var e=this.substVarRefs(arguments[2]);var a=this.substVarRefs(arguments[4]);return r.replace(new RegExp(t,a),e)};command.halfOfString=function(){var r=this.substVarRefs(arguments[0]);if(!r)return\"\";return r.substr(0,Math.ceil(r.length/2))};command.isETyVisible=function(r,t,e){e=command.getETyId.call(this,r,e);return\"\"+utils.isEdgeTypeMatch(e,t)};command.getETyId=function(r,t){t=t||this.getVariable(\"currentTiddler\");return new EdgeType(t,null,{namespace:r}).id};command.scale=function(){var r=\"\";for(var t=1,e=parseInt(arguments[0]);t<e;t++){r+=\"[[\"+t+\"]]\"}return r};command.mergeFields=function(){var r=utils.getTiddler(arguments[0]);var t=arguments[1];var e=arguments[2]||\" \";if(!r)return;var a=utils.getPropertiesByPrefix(r.fields,t);var n=\"\";for(var i in a){if(typeof a[i]===\"string\"){n+=a[i]+e}}return n};command.option=function(r,t){var e=$tm;var a=r.split(\".\");for(var n=0;n<a.length;n++){if(typeof e==\"object\"&&e[a[n]]){e=e[a[n]]}}if(t&&typeof e===\"string\"&&utils.hasSubString(t)&&e.lastIndexOf(t)+t.length===e.length){e=e+t}return e};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/macro/tmap",
            "type": "application/javascript",
            "module-type": "macro"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/startup/caretaker": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/startup/caretaker\ntype: application/javascript\nmodule-type: startup\n\n@preserve\n\n\\*/\n\"use strict\";exports.name=\"tmap.caretaker\";exports.platforms=[\"browser\"];exports.after=[\"startup\",\"tmap.environment\"];exports.before=[\"rootwidget\"];exports.synchronous=true;exports.startup=startup;var visConfig=require(\"$:/plugins/felixhayashi/tiddlymap/js/config/vis\");var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");var fixer=require(\"$:/plugins/felixhayashi/tiddlymap/js/fixer\");var Adapter=require(\"$:/plugins/felixhayashi/tiddlymap/js/Adapter\");var DialogManager=require(\"$:/plugins/felixhayashi/tiddlymap/js/DialogManager\");var CallbackManager=require(\"$:/plugins/felixhayashi/tiddlymap/js/CallbackManager\");var ViewAbstraction=require(\"$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction\");var EdgeType=require(\"$:/plugins/felixhayashi/tiddlymap/js/EdgeType\");var NodeType=require(\"$:/plugins/felixhayashi/tiddlymap/js/NodeType\");var vis=require(\"$:/plugins/felixhayashi/vis/vis.js\");function startup(){$tm.utils=utils;$tm.keycharm=vis.keycharm;$tm.NodeType=NodeType;$tm.EdgeType=EdgeType;$tm.ViewAbstraction=ViewAbstraction;$tm.url=new $tm.utils.URL(window.location.href);updateGlobals();createMetaFile();cleanup();attachIndeces($tm);$tm.updateTree=updateTree;setDefaults();$tm.adapter=new Adapter;fixer.fix();$tm.callbackManager=new CallbackManager;$tm.dialogManager=new DialogManager($tm.callbackManager);$tm.registry=[];window.setInterval(routineCheck,5e3);registerChangeListener($tm.callbackManager);registerMousemoveListener();registerClickListener();maybePrepareForFullscreenStart($tm.url);$tm.logger(\"warn\",\"TiddlyMap's caretaker successfully started\")}var attachOptions=function(e){var t=e;if(!t.config)t.config=utils.makeHashMap();t.config.sys=utils.merge(t.config.sys,utils.unflatten($tw.wiki.getTiddlerData(t.ref.sysUserConf)));t.config.vis=utils.merge({},visConfig,utils.parseFieldData(t.ref.visUserConf));if(!t.field)t.field=utils.makeHashMap();$tw.utils.extend(t.field,t.config.sys.field)};var attachIndeces=function(e){$tm.start(\"Attaching Indeces\");if(!e.indeces){e.indeces={};var t=$tm.path.pluginRoot;e.indeces.tmapTiddlers=$tw.wiki.getPluginInfo(t).tiddlers}var i=$tw.wiki.allTitles();updateTiddlerVsIdIndeces(e.indeces,i);updateNodeTypesIndeces(e.indeces);updateEdgeTypesIndeces(e.indeces);$tm.stop(\"Attaching Indeces\")};var updateTiddlerVsIdIndeces=function(e,t){e=e||$tm.indeces;t=t||$tw.wiki.allTitles();fixer.fixId();var i=e.tById={};var a=e.idByT={};$tw.wiki.each(function(e,t){if(utils.isSystemOrDraft(e))return;var r=e.fields[\"tmap.id\"];if(!r){r=utils.genUUID();utils.setField(e,\"tmap.id\",r)}i[r]=t;a[t]=r})};var updateNodeTypesIndeces=function(e){e=e||$tm.indeces;var t=$tm.path.nodeTypes;var i=e.glNTy=[];$tw.wiki.eachTiddlerPlusShadows(function(e,a){if(utils.startsWith(a,t)){i.push(new NodeType(a))}});i.sort(function(e,t){return e.priority-t.priority})};var updateEdgeTypesIndeces=function(e){e=e||$tm.indeces;var t=$tm.path.edgeTypes;var i=e.allETy=utils.makeHashMap();var a=e.maETyFiNa=utils.makeHashMap();var r=utils.getLookupTable($tm.misc.magicETyNamespaces);$tw.wiki.eachTiddlerPlusShadows(function(e,s){if(utils.startsWith(s,t)){var n=new EdgeType(s);i[n.id]=n;if(r[n.namespace]){a[n.name]=n}}})};var updateAdjacencyList=function(e){};var attachFunctions=function(e){var t=e;var i=function(){};if(utils.isTrue($tm.config.sys.debug,false)&&console){t.logger=function(){if(arguments.length<2)return;var e=Array.prototype.slice.call(arguments);var t=e.shift(e);var i=console.hasOwnProperty(t)?t:\"debug\";console[i].apply(console,e)};t.start=function(e){console.time(\"[timer] \"+e)};t.stop=function(e){console.timeEnd(\"[timer] \"+e)}}else{t.logger=t.start=t.stop=i}t.notify=utils.isTrue($tm.config.sys.notifications)?utils.notify:i};var routineCheck=function(){for(var e=$tm.registry.length;e--;){var t=$tm.registry[e];if(!t.destruct||!t.isZombieWidget)return;if(t.isZombieWidget()){$tm.logger(\"warn\",\"a widget will be removed\");$tm.registry.splice(e,1);t.destruct()}}};var dispatchUpdates=function(e){var t=$tm.registry;for(var i=t.length;i--;){var a=t[i];if(!a.destruct||!a.isZombieWidget)return;if(a.update&&!a.isZombieWidget()){a.update(e)}}};var checkForDublicates=function(e){var t=e.fields[\"tmap.id\"];if(!t)return;var i=$tm;var a=utils.getTiddlersWithField(\"tmap.id\",t,{limit:2});delete a[e.fields.title];var r=Object.keys(a)[0];if(r){var s={param:{changedTiddler:e.fields.title,existingTiddler:r,id:t}};$tm.dialogManager.open(\"dublicateIdInfo\",s)}if(r){utils.setField(e,\"tmap.edges\",undefined);$tm.adapter.assignId(e,true)}};var updateGlobals=function(e){attachOptions($tm);attachFunctions($tm);$tm.logger(\"warn\",\"Rebuilt globals\")};var lastCurrentTiddler=null;var updateLiveViewTrigger=function(e){if(e[\"$:/HistoryList\"]){var t=utils.getField(\"$:/HistoryList\",\"current-tiddler\")}else if(e[\"$:/temp/focussedTiddler\"]){var t=utils.getField(\"$:/temp/focussedTiddler\",\"text\")}if(t!=null&&lastCurrentTiddler!==t){lastCurrentTiddler=t;utils.setField(\"$:/temp/tmap/currentTiddler\",\"text\",t)}};var printChanges=function(e,t){if(!utils.isTrue($tm.config.sys.debug,false))return;$tm.logger(\"warn\",\"=== Refresh \"+t+\" ===\");for(var i in e){var a=e[i].deleted?\"[Deleted]\":\"[Modified]\";$tm.logger(\"warn\",a,i,$tw.wiki.getTiddler(i))}};var registerMousemoveListener=function(){$tm.mouse={};var e=function(e){$tm.mouse=e};window.addEventListener(\"mousemove\",e,false)};var registerClickListener=function(){var e=$tm.path.tempPopups;window.addEventListener(\"click\",function(t){var i=utils.getTiddlersByPrefix(e);for(var a=i.length;a--;){if(utils.getText(i[a]))break}if(a===-1)return;if(!$tw.utils.hasClass(t.target,\"tc-drop-down\")&&!utils.getAncestorWithClass(t.target,\"tc-drop-down\")){for(var a=i.length;a--;){utils.setText(i[a],\"\")}}},false)};var updateTree=function(){updateGlobals();updateNodeTypesIndeces();updateEdgeTypesIndeces()};var registerChangeListener=function(e){var t=0;var i={};i[$tm.path.options]=updateGlobals;i[$tm.path.nodeTypes]=updateNodeTypesIndeces;i[$tm.path.edgeTypes]=updateEdgeTypesIndeces;$tw.wiki.addEventListener(\"change\",function(a){$tm.start(\"Caretaker handling changes\");printChanges(a,t++);e.handleChanges(a);var r={changedTiddlers:a};for(var s in a){var n=utils.getTiddler(s);if(n&&n.isDraft())continue;if($tw.wiki.isSystemTiddler(s)){handleSysTidChanges(s,n,r,i)}else{handleTidChanges(s,n,r)}}dispatchUpdates(r);updateLiveViewTrigger(a);$tm.stop(\"Caretaker handling changes\")})};var handleSysTidChanges=function(e,t,i,a){var r=$tm.path;for(var s in a){if(utils.startsWith(e,s)&&!i[s]){$tm.logger(\"warn\",\"[System change]\",s);a[s]();i[s]=true;return}}};var handleTidChanges=function(e,t,i){if(t){checkForDublicates(t);$tm.adapter.assignId(t)}else{var a=$tm.indeces.idByT[e];if(!a)return;var r=utils.getTiddlerWithField(\"tmap.id\",a);if(r){$tm.logger(\"warn\",\"[Renamed]\",e,\"into\",r)}else{$tm.adapter.deleteNode(a)}}};var cleanup=function(){utils.deleteByPrefix(\"$:/temp/felixhayashi\");utils.deleteByPrefix(\"$:/temp/tiddlymap\");utils.deleteByPrefix(\"$:/temp/tmap\")};var setDefaults=function(){var e=$tm.config.sys.defaultView;if(!e)return;utils.setField($tm.ref.defaultViewHolder,\"text\",e)};var maybePrepareForFullscreenStart=function(e){if(!e.query[\"tmap-enlarged\"])return;var t=$tm.ref;var i=utils.getTiddlersByPrefix(\"$:/state/tab/sidebar-\")[0];utils.setText(i,t.mainEditor);var a=new ViewAbstraction(e.query[\"tmap-view\"]);if(a.exists()){utils.setField(t.defaultViewHolder,\"text\",a.getLabel())}};var createMetaFile=function(){if(utils.tiddlerExists($tm.ref.sysMeta))return;$tm.logger(\"warn\",\"Creating meta file\");var e=$tw.wiki.getTiddler($tm.path.pluginRoot);$tw.wiki.setTiddlerData($tm.ref.sysMeta,{originalVersion:e.fields.version,dataStructureState:\"0.6.9\",showWelcomeMessage:true})};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/startup/caretaker",
            "type": "application/javascript",
            "module-type": "startup"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/startup/environment": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/startup/environment\ntype: application/javascript\nmodule-type: startup\n\n@preserve\n\n\\*/\n\"use strict\";exports.name=\"tmap.environment\";exports.platforms=[\"browser\"];exports.after=[\"startup\"];exports.before=[\"tmap.caretaker\"];exports.synchronous=true;exports.startup=run;function run(e){window.$tm={};$tm.path={pluginRoot:\"$:/plugins/felixhayashi/tiddlymap\",edgeTypes:\"$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes\",nodeTypes:\"$:/plugins/felixhayashi/tiddlymap/graph/nodeTypes\",views:\"$:/plugins/felixhayashi/tiddlymap/graph/views\",options:\"$:/plugins/felixhayashi/tiddlymap/config\",dialogs:\"$:/plugins/felixhayashi/tiddlymap/dialog\",footers:\"$:/plugins/felixhayashi/tiddlymap/dialogFooter\",tempRoot:\"$:/temp/tmap\",tempStates:\"$:/temp/tmap/state\",tempPopups:\"$:/temp/tmap/state/popup\",localHolders:\"$:/temp/tmap/holders\"};$tm.ref={defaultViewHolder:\"$:/plugins/felixhayashi/tiddlymap/misc/defaultViewHolder\",graphBar:\"$:/plugins/felixhayashi/tiddlymap/misc/advancedEditorBar\",sysUserConf:\"$:/plugins/felixhayashi/tiddlymap/config/sys/user\",visUserConf:\"$:/plugins/felixhayashi/tiddlymap/config/vis/user\",welcomeFlag:\"$:/plugins/felixhayashi/tiddlymap/flag/welcome\",focusButton:\"$:/plugins/felixhayashi/tiddlymap/misc/focusButton\",sysMeta:\"$:/plugins/felixhayashi/tiddlymap/misc/meta\",liveTab:\"$:/plugins/felixhayashi/tiddlymap/hook/liveTab\",mainEditor:\"$:/plugins/felixhayashi/tiddlymap/hook/editor\",sidebarBreakpoint:\"$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint\"};$tm.misc={unknownEdgeLabel:\"tmap:undefined\",liveViewLabel:\"Live View\",defaultViewLabel:\"Default\",mainEditorId:\"main_editor\",arrows:{\"in\":\"⇦\",out:\"➡\",bi:\"⇄\"},magicETyNamespaces:[\"tw-list\",\"tw-field\",\"tw-filter\"]};$tm.config={sys:{field:{nodeLabel:\"caption\",nodeIcon:\"icon\",nodeInfo:\"description\",viewMarker:\"isview\"},liveTab:{fallbackView:$tm.misc.liveViewLabel},suppressedDialogs:{},edgeClickBehaviour:\"manager\",debug:\"false\",notifications:\"true\",popups:{enabled:\"true\",delay:\"600\",width:\"240px\",height:\"140px\"},editNodeOnCreate:\"false\",singleClickMode:\"false\",editorMenuBar:{showNeighScopeButton:\"true\",showScreenshotButton:\"true\"}}};$tm.filter={nodeTypes:\"[prefix[\"+$tm.path.nodeTypes+\"]]\",edgeTypes:\"[prefix[\"+$tm.path.edgeTypes+\"]]\",views:\"[\"+$tm.config.sys.field.viewMarker+\"[true]]\"};$tm.filter.defaultEdgeTypeFilter=\" -[prefix[_]]\"+\" -[[tw-body:link]]\"+\" -[[tw-list:tags]]\"+\" -[[tw-list:list]]\";var i=$tm.selector={};var a=\"[all[tiddlers+shadows]!has[draft.of]]\";i.allEdgeTypes=a+\" +\"+$tm.filter.edgeTypes;i.allEdgeTypesById=i.allEdgeTypes+\" +[removeprefix[\"+$tm.path.edgeTypes+\"/]]\";i.allNodeTypes=a+\" +\"+$tm.filter.nodeTypes;i.allNodeTypesById=i.allNodeTypes+\" +[removeprefix[\"+$tm.path.nodeTypes+\"/]]\";i.allViews=a+\" +\"+$tm.filter.views;i.allViewsByLabel=i.allViews+\"+[removeprefix[\"+$tm.path.views+\"/]]\";i.allPotentialNodes=\"[all[tiddlers]!is[system]!has[draft.of]]\"}",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/startup/environment",
            "type": "application/javascript",
            "module-type": "startup"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/startup/listener": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/startup/listener\ntype: application/javascript\nmodule-type: startup\n\n@preserve\n\n\\*/\n\"use strict\";exports.name=\"tmap.listener\";exports.platforms=[\"browser\"];exports.after=[\"rootwidget\",\"tmap.caretaker\"];exports.before=[\"story\"];exports.synchronous=true;exports.startup=function(){new GlobalListener};var NodeType=require(\"$:/plugins/felixhayashi/tiddlymap/js/NodeType\");var EdgeType=require(\"$:/plugins/felixhayashi/tiddlymap/js/EdgeType\");var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");var visDefConf=require(\"$:/plugins/felixhayashi/tiddlymap/js/config/vis\");function GlobalListener(){this.wiki=$tw.wiki;utils.addTWlisteners({\"tmap:tm-remove-edge\":this.handleRemoveEdge,\"tmap:tm-load-type-form\":this.handleLoadTypeForm,\"tmap:tm-save-type-form\":this.handleSaveTypeForm,\"tmap:tm-create-type\":this.handleCreateType,\"tmap:tm-create-edge\":this.handleCreateEdge,\"tmap:tm-suppress-dialog\":this.handleSuppressDialog,\"tmap:tm-generate-widget\":this.handleGenerateWidget,\"tmap:tm-download-graph\":this.handleDownloadGraph,\"tmap:tm-configure-system\":this.handleConfigureSystem,\"tmap:tm-manage-edge-types\":this.handleOpenTypeManager,\"tmap:tm-manage-node-types\":this.handleOpenTypeManager,\"tmap:tm-cancel-dialog\":this.handleCancelDialog,\"tmap:tm-clear-tiddler\":this.handleClearTiddler,\"tmap:tm-merge-tiddlers\":this.handleMixTiddlers,\"tmap:tm-confirm-dialog\":this.handleConfirmDialog},$tw.rootWidget,this)}GlobalListener.prototype.handleCancelDialog=function(e){utils.setField(e.param,\"text\",\"\")};GlobalListener.prototype.handleClearTiddler=function(e){var t=e.paramObject;if(!t||!t.title)return;var a=utils.getTiddler(t.title);var i=a?a.fields:{};var r=t.keep?t.keep.split():[];var d={title:t.title,text:\"\"};for(var l=r.length;l--;){var s=r[l];d[s]=i[s]}$tw.wiki.deleteTiddler(t.title);$tw.wiki.addTiddler(new $tw.Tiddler(d))};GlobalListener.prototype.handleMixTiddlers=function(e){var t=e.paramObject;if(!t||!t.tiddlers)return;var a=$tw.utils.parseStringArray(t.tiddlers);var i=utils.getMergedTiddlers(a,t.output);$tw.wiki.addTiddler(i)};GlobalListener.prototype.handleConfirmDialog=function(e){utils.setField(e.param,\"text\",\"1\")};GlobalListener.prototype.handleSuppressDialog=function(e){if(utils.isTrue(e.paramObject.suppress,false)){utils.setEntry($tm.ref.sysUserConf,\"suppressedDialogs.\"+e.paramObject.dialog,true)}};GlobalListener.prototype.handleDownloadGraph=function(e){var t=$tm.adapter.getGraph({view:e.paramObject.view});t.nodes=utils.convert(t.nodes,\"array\");t.edges=utils.convert(t.edges,\"array\");var a=\"$:/temp/tmap/export\";utils.setField(a,\"text\",JSON.stringify(t,null,2));$tw.rootWidget.dispatchEvent({type:\"tm-download-file\",param:a,paramObject:{filename:e.paramObject.view+\".json\"}})};GlobalListener.prototype.handleConfigureSystem=function(){var e=$tm.adapter.getAllPotentialNodes();var t=$tm.adapter.getEdgesForSet(e);var a=$tw.wiki.getTiddler($tm.path.pluginRoot).fields;var i=$tw.wiki.getTiddlerData($tm.ref.sysMeta);var r=utils.getTiddler($tm.ref.liveTab).hasTag(\"$:/tags/SideBar\");var d={numberOfNodes:\"\"+e.length,numberOfEdges:\"\"+Object.keys(t).length,pluginVersion:\"v\"+a.version,dataStructureVersion:\"v\"+i.dataStructureState,dialog:{preselects:{liveTab:\"\"+r,\"vis-inherited\":JSON.stringify(visDefConf),\"config.vis\":utils.getText($tm.ref.visUserConf),\"config.sys\":$tm.config.sys}}};var l=\"globalConfig\";$tm.dialogManager.open(l,d,function(e,t){if(!e)return;var a=utils.getPropertiesByPrefix(t.fields,\"config.sys.\",true);$tw.wiki.setTiddlerData($tm.ref.sysUserConf,a);if(utils.isTrue(t.fields.liveTab,false)){utils.setField($tm.ref.liveTab,\"tags\",\"$:/tags/SideBar\")}else{$tw.wiki.deleteTiddler($tm.ref.liveTab)}utils.setField($tm.ref.visUserConf,\"text\",t.fields[\"config.vis\"])}.bind(this))};GlobalListener.prototype.handleGenerateWidget=function(e){if(!e.paramObject)e.paramObject={};var t={dialog:{preselects:{view:e.paramObject.view||$tm.misc.defaultViewLabel}}};$tm.dialogManager.open(\"widgetCodeGenerator\",t)};GlobalListener.prototype.handleRemoveEdge=function(e){$tm.adapter.deleteEdge(e.paramObject)};GlobalListener.prototype.handleCreateEdge=function(e){var t=e.paramObject.from;var a=e.paramObject.to;var i=e.paramObject.force;if(!t||!a)return;if(utils.tiddlerExists(t)&&utils.tiddlerExists(a)||i){utils.addTiddler(a);utils.addTiddler(t);var r={from:$tm.adapter.makeNode(t).id,to:$tm.adapter.makeNode(a).id,type:e.paramObject.label,id:e.paramObject.id};$tm.adapter.insertEdge(r);$tm.notify(\"Edge inserted\")}};GlobalListener.prototype.handleOpenTypeManager=function(e){if(!e.paramObject)e.paramObject={};var t=e.type.match(/tmap:tm-(.*)/)[1];if(t===\"manage-edge-types\"){var a=\"Edge-Type Manager\";var i=$tm.selector.allEdgeTypes;var r=$tm.path.edgeTypes}else{var a=\"Node-Type Manager\";var i=$tm.selector.allNodeTypes;var r=$tm.path.nodeTypes}var d={mode:t,topic:a,searchSelector:i,typeRootPath:r};var l=$tm.dialogManager.open(\"MapElementTypeManager\",d);if(e.paramObject.type){this.handleLoadTypeForm({paramObject:{mode:t,id:e.paramObject.type,output:l.fields[\"output\"]}})}};GlobalListener.prototype.handleLoadTypeForm=function(e){var t=e.paramObject.output;var a=e.paramObject.mode===\"manage-edge-types\"?new EdgeType(e.paramObject.id):new NodeType(e.paramObject.id);a.save(t);if(e.paramObject.mode===\"manage-edge-types\"){var i=$tm.adapter.selectEdgesByType(a);var r=Object.keys(i).length;utils.setField(t,\"temp.usageCount\",r)}$tw.wiki.addTiddler(new $tw.Tiddler(utils.getTiddler(t),{typeTRef:a.fullPath,\"temp.idImmutable\":a.isShipped?\"true\":\"\",\"temp.newId\":a.id,\"vis-inherited\":JSON.stringify($tm.config.vis)}));utils.deleteByPrefix(\"$:/state/tabs/MapElementTypeManager\")};GlobalListener.prototype.handleSaveTypeForm=function(e){var t=utils.getTiddler(e.paramObject.output);if(!t)return;var a=e.paramObject.mode;var i=a===\"manage-edge-types\"?new EdgeType(t.fields.id):new NodeType(t.fields.id);if(utils.isTrue(t.fields[\"temp.deleteType\"],false)){this.deleteType(a,i,t)}else{this.saveType(a,i,t)}};GlobalListener.prototype.deleteType=function(e,t,a){$tm.logger(\"debug\",\"Deleting type\",t);if(e===\"manage-edge-types\"){$tm.adapter._processEdgesWithType(t,{action:\"delete\"})}else{$tm.adapter.removeNodeType(t)}this.wiki.addTiddler(new $tw.Tiddler({title:utils.getTiddlerRef(a)}));$tm.notify(\"Deleted type\")};GlobalListener.prototype.saveType=function(e,t,a){var i=utils.getTiddler(a);t.loadFromTiddler(i);t.save();var r=i.fields[\"temp.newId\"];if(r&&r!==i.fields[\"id\"]){if(e===\"manage-edge-types\"){$tm.adapter._processEdgesWithType(t,{action:\"rename\",newName:r})}else{var d=new NodeType(r);d.load(t);d.save();$tw.wiki.deleteTiddler(t.fullPath)}utils.setField(i,\"id\",r)}$tm.notify(\"Saved type data\")};GlobalListener.prototype.handleCreateType=function(e){var t=e.paramObject.id||\"New type\";var a=e.paramObject.mode===\"manage-edge-types\"?new EdgeType(t):new NodeType(t);a.save();this.handleLoadTypeForm({paramObject:{id:a.id,mode:e.paramObject.mode,output:e.paramObject.output}})};GlobalListener.prototype.getTypeFromEvent=function(e){return e.paramObject.mode===\"manage-edge-types\"?new EdgeType(e.paramObject.id):new NodeType(e.paramObject.id)};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/startup/listener",
            "type": "application/javascript",
            "module-type": "startup"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/widget/MapConfigWidget": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/MapConfigWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\"use strict\";exports[\"tmap-config\"]=MapConfigWidget;var ViewAbstraction=require(\"$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction\");var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");var vis=require(\"$:/plugins/felixhayashi/vis/vis.js\");var Widget=require(\"$:/core/modules/widgets/widget.js\").widget;function MapConfigWidget(e,t){Widget.call(this);this.initialise(e,t);this.computeAttributes()}MapConfigWidget.prototype=Object.create(Widget.prototype);MapConfigWidget.prototype.render=function(e,t){this.parentDomNode=e;if(!this.domNode){this.domNode=this.document.createElement(\"div\");$tw.utils.addClass(this.domNode,\"tmap-config-widget\");e.insertBefore(this.domNode,t)}if(this.network){this.network.destroy()}this.networkContainer=document.createElement(\"div\");this.domNode.appendChild(this.networkContainer);this.refreshTrigger=this.getAttribute(\"refresh-trigger\");this.pipeTRef=this.getVariable(\"currentTiddler\");this.inheritedFields=$tw.utils.parseStringArray(this.getAttribute(\"inherited\"));this.extensionTField=this.getAttribute(\"extension\");this.mode=this.getAttribute(\"mode\");for(var i=0;i<this.inheritedFields.length;i++){var s=this.inheritedFields[i];var n=utils.parseFieldData(this.pipeTRef,s,{});if(this.mode===\"manage-edge-types\"){if(!n.edges){n={edges:n}}}else if(this.mode===\"manage-node-types\"){if(!n.nodes){n={nodes:n}}}this.inherited=utils.merge(this.inherited,n)}this.extension=utils.parseFieldData(this.pipeTRef,this.extensionTField,{});if(this.mode===\"manage-edge-types\"){if(!this.extension.edges){this.extension={edges:this.extension}}}else if(this.mode===\"manage-node-types\"){if(!this.extension.nodes){this.extension={nodes:this.extension}}}var r=utils.isTrue(this.getAttribute(\"save-only-changes\"));this.changes=r?{}:this.extension;var a={nodes:[],edges:[]};var o=utils.merge({},this.inherited,this.extension);$tw.utils.extend(o,{configure:{enabled:true,showButton:false,filter:this.getOptionFilter(this.mode)}});this.network=new vis.Network(this.networkContainer,a,o);this.network.on(\"configChange\",this.handleConfigChange.bind(this));var h=this.parentDomNode.getBoundingClientRect().height;this.parentDomNode.style[\"height\"]=h+\"px\";var l=this.handleResetEvent.bind(this);this.networkContainer.addEventListener(\"reset\",l,false);$tm.registry.push(this);this.enhanceConfigurator()};MapConfigWidget.prototype.handleResetEvent=function(e){var t={};t[e.detail.trigger.path]=null;this.handleConfigChange(t)};MapConfigWidget.prototype.handleConfigChange=function(e){var t=utils.flatten(this.changes);var i=utils.flatten(e);var s=Object.keys(utils.flatten(e))[0];var n=i[s]===null;if(n){t[s]=undefined;this.changes=utils.unflatten(t)}else{this.changes=utils.merge(this.changes,e)}var r=utils.merge({},this.changes);if(this.mode===\"manage-node-types\"){r=r[\"nodes\"]}if(this.mode===\"manage-edge-types\"){r=r[\"edges\"]}utils.writeFieldData(this.pipeTRef,this.extensionTField,r);var a=\"vis-configuration-wrapper\";var o=this.networkContainer.getElementsByClassName(a)[0];o.style.height=o.getBoundingClientRect().height+\"px\";if(n){window.setTimeout(this.refresh.bind(this),0)}else{window.setTimeout(this.enhanceConfigurator.bind(this),50)}};MapConfigWidget.prototype.enhanceConfigurator=function(){var e=\"vis-configuration-wrapper\";var t=this.networkContainer.getElementsByClassName(e)[0].children;var i=[];var s=utils.flatten(this.changes);for(var n=0;n<t.length;n++){if(!t[n].classList.contains(\"vis-config-item\"))continue;var r=new VisConfElement(t[n],i,n);i.push(r);if(r.level===0)continue;r.setActive(!!s[r.path])}};function VisConfElement(e,t,i){var s=\"getElementsByClassName\";var n=\"getElementsByTagName\";this.isActive=false;this.pos=i;this.el=e;this.inputEl=e[s](\"vis-config-colorBlock\")[0]||e[n](\"input\")[0];this.labelEl=e[s](\"vis-config-label\")[0]||e[s](\"vis-config-header\")[0]||e;var r=this.labelEl.innerText||this.labelEl.textContent;this.label=r&&r.match(/([a-zA-Z0-9]+)/)[1];this.level=parseInt(e.className.match(/.*vis-config-s(.).*/)[1])||0;this.path=this.label;if(this.level>0){for(var a=i;a--;){var o=t[a];if(o.level<this.level){this.path=o.path+\".\"+this.path;break}}}}VisConfElement.prototype.setActive=function(e){if(!e)return;var t=\"tmap-vis-config-item-\"+(e?\"active\":\"inactive\");$tw.utils.addClass(this.el,t);if(e){var i=document.createElement(\"button\");i.innerHTML=\"reset\";i.className=\"tmap-config-item-reset\";var s=this;i.addEventListener(\"click\",function(e){e.currentTarget.dispatchEvent(new CustomEvent(\"reset\",{detail:{trigger:s},bubbles:true,cancelable:true}))},false);this.el.appendChild(i)}};MapConfigWidget.prototype.getOptionFilter=function(e){var t={nodes:{borderWidth:true,borderWidthSelected:true,color:{background:true,border:true},font:{color:true,size:true},icon:true,labelHighlightBold:false,shadow:true,shape:true,shapeProperties:{borderDashes:true},size:true},edges:{arrows:true,color:true,dashes:true,font:true,labelHighlightBold:false,length:true,selfReferenceSize:false,shadow:true,smooth:true,width:true},interaction:{hideEdgesOnDrag:true,hideNodesOnDrag:true,tooltipDelay:true},layout:{hierarchical:false},manipulation:{initiallyActive:true},physics:{forceAtlas2Based:{gravitationalConstant:true,springLength:true,springConstant:true,damping:true,centralGravity:true}}};if(e===\"manage-edge-types\"){t={edges:t.edges}}else if(e===\"manage-node-types\"){t={nodes:t.nodes}}else{t.edges.arrows=false}return function(e,i){i=i.concat([e]);var s=t;for(var n=0,r=i.length;n<r;n++){if(s[i[n]]===true){return true}else if(s[i[n]]==null){return false}s=s[i[n]]}return false}};MapConfigWidget.prototype.isZombieWidget=function(){return!document.body.contains(this.parentDomNode)};MapConfigWidget.prototype.destruct=function(){if(this.network){this.network.destroy()}};MapConfigWidget.prototype.refresh=function(e){if(this.isZombieWidget()||!this.network)return;if(!e||e[this.refreshTrigger]){this.refreshSelf();return true}};MapConfigWidget.prototype.setNull=function(e){for(var t in e){if(typeof e[t]==\"object\"){this.setNull(e[t])}else{e[t]=undefined}}};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/widget/MapConfigWidget",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/widget/connections": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/connections\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\"use strict\";exports[\"tmap-edgelistitem\"]=EdgeListItemWidget;exports[\"tmap-connections\"]=EdgeListWidget;var Widget=require(\"$:/core/modules/widgets/widget.js\").widget;var EdgeType=require(\"$:/plugins/felixhayashi/tiddlymap/js/EdgeType\");var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");function EdgeListWidget(e,t){Widget.call(this,e,t)}EdgeListWidget.prototype=Object.create(Widget.prototype);EdgeListWidget.prototype.render=function(e,t){this.parentDomNode=e;this.computeAttributes();this.execute();this.renderChildren(e,t)};EdgeListWidget.prototype.execute=function(){var e=[this.getVariable(\"currentTiddler\")];var t=this.getAttribute(\"filter\",\"\");var i=this.getAttribute(\"direction\",\"both\");var r=$tm.indeces.allETy;var s=utils.getEdgeTypeMatches(t,r);var d={typeWL:utils.getLookupTable(s),direction:i};var o=$tm.adapter.getNeighbours(e,d);var a=o.nodes;var g=o.edges;var n=[];for(var h in g){var p=g[h];var l=a[p.to]||a[p.from];if(!l)continue;n.push({type:\"tmap-edgelistitem\",edge:p,typeWL:d.typeWL,neighbour:l,children:this.parseTreeNode.children})}if(!n.length){this.wasEmpty=true;n=this.getEmptyMessage()}else if(this.wasEmpty){this.removeChildDomNodes()}this.makeChildWidgets(n)};EdgeListWidget.prototype.getEmptyMessage=function(){var e=this.wiki.parseText(\"text/vnd.tiddlywiki\",this.getAttribute(\"emptyMessage\",\"\"),{parseAsInline:true});return e?e.tree:[]};EdgeListWidget.prototype.refresh=function(e){var t=this.computeAttributes();var i=Object.keys(t).length;if(i){this.refreshSelf();return true}for(var r in e){if(!utils.isSystemOrDraft(r)){this.refreshSelf();return true}}return this.refreshChildren(e)};function EdgeListItemWidget(e,t){Widget.call(this,e,t);this.arrows=$tm.misc.arrows}EdgeListItemWidget.prototype=Object.create(Widget.prototype);EdgeListItemWidget.prototype.execute=function(){var e=this.parseTreeNode;var t=$tm.indeces.tById[e.neighbour.id];var i=utils.flatten(e.edge);for(var r in i){if(typeof i[r]===\"string\"){this.setVariable(\"edge.\"+r,i[r])}}this.setVariable(\"currentTiddler\",t);this.setVariable(\"neighbour\",t);var s=$tm.indeces.allETy[i.type];var d=i.to===e.neighbour.id?\"to\":\"from\";var o=d;if(s.biArrow){o=\"bi\"}else{if(d===\"to\"&&s.invertedArrow){o=\"from\"}else if(d===\"from\"&&s.invertedArrow){o=\"to\"}}this.setVariable(\"direction\",o);this.setVariable(\"directionSymbol\",o===\"bi\"?this.arrows.bi:o===\"from\"?this.arrows.in:this.arrows.out);this.makeChildWidgets()};EdgeListItemWidget.prototype.refresh=function(e){return this.refreshChildren(e)};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/widget/connections",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/plugins/felixhayashi/tiddlymap/js/widget/MapWidget": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/MapWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\"use strict\";exports.tiddlymap=MapWidget;exports.tmap=MapWidget;var utils=require(\"$:/plugins/felixhayashi/tiddlymap/js/utils\");var DialogManager=require(\"$:/plugins/felixhayashi/tiddlymap/js/DialogManager\");var CallbackManager=require(\"$:/plugins/felixhayashi/tiddlymap/js/CallbackManager\");var ViewAbstraction=require(\"$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction\");var EdgeType=require(\"$:/plugins/felixhayashi/tiddlymap/js/EdgeType\");var NodeType=require(\"$:/plugins/felixhayashi/tiddlymap/js/NodeType\");var Popup=require(\"$:/plugins/felixhayashi/tiddlymap/js/Popup\");var vis=require(\"$:/plugins/felixhayashi/vis/vis.js\");var Widget=require(\"$:/core/modules/widgets/widget.js\").widget;function MapWidget(e,t){Widget.call(this,e,t);this.getAttr=this.getAttribute;this.isDebug=utils.isTrue($tm.config.sys.debug,false);utils.bind(this,[\"constructTooltip\",\"handleResizeEvent\",\"handleClickEvent\",\"handleCanvasKeyup\",\"handleCanvasKeydown\",\"handleCanvasScroll\",\"handleWidgetKeyup\",\"handleWidgetKeydown\",\"handleTriggeredRefresh\"]);this.callbackManager=new CallbackManager;this.dialogManager=new DialogManager(this.callbackManager,this);this.computeAttributes();this.editorMode=this.getAttr(\"editor\");this.clickToUse=utils.isTrue(this.getAttr(\"click-to-use\"),false);this.id=this.getAttr(\"object-id\")||this.getStateQualifier();this.widgetTempStatePath=$tm.path.tempStates+\"/\"+this.id;this.widgetPopupsPath=$tm.path.tempPopups+\"/\"+this.id;if(this.editorMode){utils.addTWlisteners({\"tmap:tm-create-view\":this.handleCreateView,\"tmap:tm-rename-view\":this.handleRenameView,\"tmap:tm-delete-view\":this.handleDeleteView,\"tmap:tm-edit-view\":this.handleEditView,\"tmap:tm-store-position\":this.handleStorePositions,\"tmap:tm-generate-widget\":this.handleGenerateWidget,\"tmap:tm-save-canvas\":this.handleSaveCanvas},this,this)}utils.addTWlisteners({\"tmap:tm-focus-node\":this.handleFocusNode,\"tmap:tm-reset-focus\":this.repaintGraph},this,this);this.visListeners={click:this.handleVisSingleClickEvent,doubleClick:this.handleVisDoubleClickEvent,stabilized:this.handleVisStabilizedEvent,selectNode:this.handleVisSelectNode,deselectNode:this.handleVisDeselectNode,dragStart:this.handleVisDragStart,dragEnd:this.handleVisDragEnd,hoverNode:this.handleVisHoverElement,hoverEdge:this.handleVisHoverElement,blurNode:this.handleVisBlurElement,blurEdge:this.handleVisBlurElement,oncontext:this.handleVisOnContext,beforeDrawing:this.handleVisBeforeDrawing,stabilizationProgress:this.handleVisLoading,stabilizationIterationsDone:this.handleVisLoadingDone};this.windowDomListeners={resize:[this.handleResizeEvent,false],click:[this.handleClickEvent,false]};this.canvasDomListeners={keyup:[this.handleCanvasKeyup,true],keydown:[this.handleCanvasKeydown,true],mousewheel:[this.handleCanvasScroll,true]};this.widgetDomListeners={keyup:[this.handleWidgetKeyup,true],keydown:[this.handleWidgetKeydown,true]}}MapWidget.prototype=Object.create(Widget.prototype);MapWidget.prototype.handleConnectionEvent=function(e,t){var i=this.view.getEdgeTypeFilter();var s={fromLabel:$tm.adapter.selectNodeById(e.from).label,toLabel:$tm.adapter.selectNodeById(e.to).label,viewNS:this.view.getConfig(\"edge_type_namespace\"),eTyFilter:i.raw};var a=\"getEdgeType\";this.dialogManager.open(a,s,function(s,a){if(s){var r=utils.getText(a);var o={namespace:this.view.getConfig(\"edge_type_namespace\")};var r=new EdgeType(r,null,o);if(!r.exists())r.save();e.type=r.id;$tm.adapter.insertEdge(e);if(!this.view.isEdgeTypeVisible(r.id)){var n={type:r.id,view:this.view.getLabel(),eTyFilter:i.pretty};this.dialogManager.open(\"edgeNotVisible\",n)}this.preventFitAfterRebuild=true}if(typeof t===\"function\"){t(s)}})};MapWidget.prototype.checkForFreshInstall=function(){var e=$tm.ref.sysMeta;if(!utils.getEntry(e,\"showWelcomeMessage\",true))return;utils.setEntry(e,\"showWelcomeMessage\",false);var t={};var i=\"welcome\";this.dialogManager.open(i,t,function(e,t){if(utils.tiddlerExists(\"$:/plugins/felixhayashi/topstoryview\")){utils.setText(\"$:/view\",\"top\");utils.setText(\"$:/config/Navigation/openLinkFromInsideRiver\",\"above\");utils.setText(\"$:/config/Navigation/openLinkFromOutsideRiver\",\"top\");utils.touch(\"$:/plugins/felixhayashi/topstoryview\")}var i=$tm.misc.defaultViewLabel;var s={label:\"Have fun with\",x:0,y:0};var a=$tm.adapter.insertNode(s,i);var s={label:\"TiddlyMap!!\",x:100,y:100};var r=$tm.adapter.insertNode(s,i);$tm.adapter.insertEdge({from:a.id,to:r.id})})};MapWidget.prototype.openStandardConfirmDialog=function(e,t){var i={message:t};this.dialogManager.open(\"getConfirmation\",i,e)};MapWidget.prototype.logger=function(e,t){if(this.isDebug){var i=Array.prototype.slice.call(arguments,1);i.unshift(\"@\"+this.id);i.unshift(e);$tm.logger.apply(this,i)}};MapWidget.prototype.render=function(e,t){this.parentDomNode=e;this.domNode=this.document.createElement(\"div\");e.insertBefore(this.domNode,t);this.registerClassNames(this.domNode);this.viewHolderRef=this.getViewHolderRef();this.view=this.getView();this.graphBarDomNode=this.document.createElement(\"div\");$tw.utils.addClass(this.graphBarDomNode,\"tmap-topbar\");this.domNode.appendChild(this.graphBarDomNode);this.graphDomNode=this.document.createElement(\"div\");this.domNode.appendChild(this.graphDomNode);$tw.utils.addClass(this.graphDomNode,\"tmap-vis-graph\");if(utils.isPreviewed(this)||this.domNode.isTiddlyWikiFakeDom){$tw.utils.addClass(this.domNode,\"tmap-static-mode\");this.renderPreview(this.graphBarDomNode,this.graphDomNode)}else{this.renderFullWidget(this.domNode,this.graphBarDomNode,this.graphDomNode)}};MapWidget.prototype.renderPreview=function(e,t){var i=this.view.getRoot()+\"/snapshot\";var s=utils.getTiddler(i);var a=this.document.createElement(\"span\");a.innerHTML=this.view.getLabel();a.className=\"tmap-view-label\";e.appendChild(a);if(s){var r=this.makeChildWidget({type:\"transclude\",attributes:{tiddler:{type:\"string\",value:i}}});r.renderChildren(t,null)}else{$tw.utils.addClass(t,\"tmap-graph-placeholder\")}};MapWidget.prototype.renderFullWidget=function(e,t,i){utils.setDomListeners(\"add\",window,this.windowDomListeners);utils.setDomListeners(\"add\",e,this.widgetDomListeners);this.addLoadingBar(this.domNode);var s={showDelay:$tm.config.sys.popups.delay};this.visTooltip=new Popup(this.domNode,s);this.sidebar=utils.getFirstElementByClassName(\"tc-sidebar-scrollable\");this.isInSidebar=this.sidebar&&!this.domNode.isTiddlyWikiFakeDom&&this.sidebar.contains(this.domNode);this.doFitAfterStabilize=true;this.preventFitAfterRebuild=false;this.initAndRenderEditorBar(t);this.initAndRenderGraph(i);$tm.registry.push(this);this.reloadRefreshTriggers();this.checkForFreshInstall();if(this.id===$tm.misc.mainEditorId){var a=$tm.url;if(a&&a.query[\"tmap-enlarged\"]){this.toggleEnlargedMode(a.query[\"tmap-enlarged\"])}}};MapWidget.prototype.registerClassNames=function(e){var t=$tw.utils.addClass;t(e,\"tmap-widget\");if(this.clickToUse){t(e,\"tmap-click-to-use\")}if(this.getAttr(\"editor\")===\"advanced\"){t(e,\"tmap-advanced-editor\")}if(this.getAttr(\"design\")===\"plain\"){t(e,\"tmap-plain-design\")}if(!utils.isTrue(this.getAttr(\"show-buttons\"),true)){t(e,\"tmap-no-buttons\")}if(this.getAttr(\"class\")){t(e,this.getAttr(\"class\"))}};MapWidget.prototype.addLoadingBar=function(e){this.graphLoadingBarDomNode=this.document.createElement(\"progress\");$tw.utils.addClass(this.graphLoadingBarDomNode,\"tmap-loading-bar\");e.appendChild(this.graphLoadingBarDomNode)};MapWidget.prototype.initAndRenderEditorBar=function(e){this.rebuildEditorBar()};MapWidget.prototype.rebuildEditorBar=function(){var e=this.view;var t={widgetQualifier:this.getStateQualifier(),widgetTempPath:this.widgetTempPath,widgetPopupsPath:this.widgetPopupsPath,isViewBound:String(this.isViewBound()),viewRoot:e.getRoot(),viewLabel:e.getLabel(),viewHolder:this.getViewHolderRef(),edgeTypeFilter:e.getPaths().edgeTypeFilter,allEdgesFilter:$tm.selector.allEdgeTypes,neighScopeBtnClass:\"tmap-neigh-scope-button\"+(e.isEnabled(\"neighbourhood_scope\")?\" \"+\"tmap-active-button\":\"\")};for(var i in t){this.setVariable(i,t[i])}var s={type:\"tiddler\",attributes:{tiddler:{type:\"string\",value:e.getRoot()}},children:[]};if(this.editorMode===\"advanced\"){s.children.push({type:\"transclude\",attributes:{tiddler:{type:\"string\",value:$tm.ref.graphBar}}})}else{s.children.push({type:\"element\",tag:\"span\",attributes:{\"class\":{type:\"string\",value:\"tmap-view-label\"}},children:[{type:\"text\",text:e.getLabel()}]})}s.children.push({type:\"transclude\",attributes:{tiddler:{type:\"string\",value:$tm.ref.focusButton}}});this.makeChildWidgets([s]);this.renderChildren(this.graphBarDomNode,this.graphBarDomNode.firstChild)};MapWidget.prototype.refresh=function(e){return false};MapWidget.prototype.update=function(e){if(!this.network||this.isZombieWidget()||utils.isPreviewed(this)){return}var t=e.changedTiddlers;var i=false;var s=false;var a=false;var r={};this.callbackManager.handleChanges(t);if(this.isViewSwitched(t)||this.hasChangedAttributes()||e[$tm.path.options]||e[$tm.path.nodeTypes]||t[this.view.getRoot()]){this.logger(\"warn\",\"View switched (or main config change)\");this.view=this.getView(true);this.reloadRefreshTriggers();i=true;a=true}else{var o=this.view.update(e);if(o&&!this.ignoreNextViewModification){this.logger(\"warn\",\"View components modified\");this.reloadBackgroundImage();i=true;s=true;r.resetEdgeTypeWL=true;if(!this.preventFitAfterRebuild){r.resetFocus={delay:0,duration:0}}}else{if(e[$tm.path.nodeTypes]){s=true}else if(this.hasChangedElements(t)){s=true}}}if(a){this.initAndRenderGraph(this.graphDomNode);this.visTooltip.hide(0,true)}else if(s){this.rebuildGraph(r);this.visTooltip.hide(0,true)}if(i){this.removeChildDomNodes();this.rebuildEditorBar()}else{this.refreshChildren(t)}this.ignoreNextViewModification=false};MapWidget.prototype.reloadRefreshTriggers=function(){this.callbackManager.remove(this.refreshTriggers);var e=this.getAttr(\"refresh-triggers\")||this.view.getConfig(\"refresh-triggers\");this.refreshTriggers=$tw.utils.parseStringArray(e)||[];this.logger(\"debug\",\"Registering refresh trigger\",this.refreshTriggers);for(var t=this.refreshTriggers.length;t--;){this.callbackManager.add(this.refreshTriggers[t],this.handleTriggeredRefresh,false)}};MapWidget.prototype.rebuildGraph=function(e){if(utils.isPreviewed(this))return;this.logger(\"debug\",\"Rebuilding graph\");e=e||{};this.hasNetworkStabilized=false;if(e.resetData){this.graphData.edges.clear();this.graphData.nodes.clear();this.graphData.edgesById=null;this.graphData.nodesById=null}if(!this.view.isEnabled(\"physics_mode\")){var t=this.visOptions.physics;t[t.solver].centralGravity=.015}if(!e.resetFocus){this.doFitAfterStabilize=false}this.rebuildGraphData();if(!utils.hasElements(this.graphData.nodesById)){return}this.network.stabilize();if(e.resetFocus&&!this.preventFitAfterRebuild){this.doFitAfterStabilize=true;this.fitGraph(e.resetFocus.delay,e.resetFocus.duration)}this.preventFitAfterRebuild=false};MapWidget.prototype.getContainer=function(){return this.domNode};MapWidget.prototype.rebuildGraphData=function(e){$tm.start(\"Reloading Network\");e=e||{};var t=$tm.adapter.getGraph({view:this.view});var i=t.nodes;var s=t.edges;this.graphData.nodes=this.getRefreshedDataSet(i,this.graphData.nodesById,this.graphData.nodes);this.graphData.edges=this.getRefreshedDataSet(s,this.graphData.edgesById,this.graphData.edges);this.graphData.nodesById=i;this.graphData.edgesById=s;utils.setField(\"$:/temp/tmap/nodes/\"+this.view.getLabel(),\"list\",$tm.adapter.getTiddlersById(i));$tm.stop(\"Reloading Network\");return this.graphData};MapWidget.prototype.isViewBound=function(){return utils.startsWith(this.getViewHolderRef(),$tm.path.localHolders)};MapWidget.prototype.isViewSwitched=function(e){return e[this.getViewHolderRef()]};MapWidget.prototype.hasChangedAttributes=function(){return Object.keys(this.computeAttributes()).length};MapWidget.prototype.hasChangedElements=function(e){var t=[];var i=this.graphData.nodesById;var s=this.view.isEnabled(\"neighbourhood_scope\");var a=this.view.getEdgeTypeFilter(\"whitelist\");for(var r in e){if(utils.isSystemOrDraft(r))continue;if(i[$tm.adapter.getId(r)]||s){return true}if(e[r].modified){t.push(r)}}if(t.length){var o=this.view.getNodeFilter(\"compiled\");var n=utils.getMatches(o,t);return!!n.length}};MapWidget.prototype.initAndRenderGraph=function(e){if(this.network)this._destructVis();this.logger(\"info\",\"Initializing and rendering the graph\");if(!this.isInSidebar){this.callbackManager.add(\"$:/state/sidebar\",this.handleResizeEvent)}this.visOptions=this.getVisOptions();this.graphData={nodes:new vis.DataSet,edges:new vis.DataSet,nodesById:utils.makeHashMap(),edgesById:utils.makeHashMap()};this.visTooltip.setEnabled(utils.isTrue($tm.config.sys.popups.enabled,true));this.network=new vis.Network(e,this.graphData,this.visOptions);this.canvas=e.getElementsByTagName(\"canvas\")[0];this.canvas.tabIndex=0;for(var t in this.visListeners){this.network.on(t,this.visListeners[t].bind(this))}this.addGraphButtons({\"fullscreen-button\":function(){this.toggleEnlargedMode(\"fullscreen\")},\"halfscreen-button\":function(){this.toggleEnlargedMode(\"halfscreen\")}});utils.setDomListeners(\"add\",this.canvas,this.canvasDomListeners);this.reloadBackgroundImage();this.rebuildGraph({resetFocus:{delay:0,duration:0}});this.handleResizeEvent();this.canvas.focus()};MapWidget.prototype.handleCanvasKeyup=function(){var e={from:null,to:null};return function(t){var i=this.network.getSelectedNodes();if(t.ctrlKey){t.preventDefault();if(t.keyCode===88){if(this.editorMode){this.handleAddNodesToClipboard(\"move\")}else{$tm.notify(\"Map is read only!\")}}else if(t.keyCode===67){this.handleAddNodesToClipboard(\"copy\")}else if(t.keyCode===86){this.handlePasteNodesFromClipboard()}else if(t.keyCode===65){var s=Object.keys(this.graphData.nodesById);this.network.selectNodes(s)}else if(t.keyCode===49||t.keyCode===50){if(i.length!==1)return;var a=t.keyCode===49?\"from\":\"to\";$tm.notify(utils.ucFirst(a)+\"-part selected\");e[a]=i[0];if(e.from&&e.to){this.handleConnectionEvent(e,function(){e={from:null,to:null}})}}}else if(t.keyCode===13){if(i.length!==1)return;this.openTiddlerWithId(i[0])}}}();MapWidget.prototype.handleCanvasKeydown=function(e){if(e.keyCode===46){e.preventDefault();this.handleRemoveElements(this.network.getSelection())}};MapWidget.prototype.handleCanvasScroll=function(e){var t=!!(e.ctrlKey||this.isInSidebar||this.enlargedMode);if(t){e.preventDefault()}if(t!==this.visOptions.interaction.zoomView){e.preventDefault();e.stopPropagation();this.visOptions.interaction.zoomView=t;this.network.setOptions({interaction:{zoomView:t}});return false}};MapWidget.prototype.handleWidgetKeyup=function(e){};MapWidget.prototype.handleWidgetKeydown=function(e){if(e.ctrlKey){e.preventDefault();if(e.keyCode===70){e.preventDefault();var t=this.widgetPopupsPath+\"/focus\";utils.setText(t,utils.getText(t)?\"\":\"1\")}else{return}}else if(e.keyCode===120){e.preventDefault();this.toggleEnlargedMode(\"halfscreen\")}else if(e.keyCode===121){e.preventDefault();this.toggleEnlargedMode(\"fullscreen\")}else if(e.keyCode===27){e.preventDefault();utils.deleteByPrefix(this.widgetPopupsPath)}else{return}this.canvas.focus()};MapWidget.prototype.handlePasteNodesFromClipboard=function(){if(!this.editorMode||this.view.isLiveView()){$tm.notify(\"Map is read only!\");return}if($tm.clipBoard){if($tm.clipBoard.type===\"nodes\"){var e=$tm.clipBoard.nodes;var t=Object.keys(e);if(t.length){for(var i in e){if(this.graphData.nodesById[i])continue;this.view.addNode(e[i]);this.graphData.nodes.update({id:i})}this.network.selectNodes(t);$tm.notify(\"pasted \"+t.length+\" nodes into map.\")}return}}$tm.notify(\"TiddlyMap clipboad is empty!\")};MapWidget.prototype.handleAddNodesToClipboard=function(e){var t=this.network.getSelectedNodes();if(!t.length)return;$tm.clipBoard={type:\"nodes\",nodes:this.graphData.nodes.get(t,{returnType:\"Object\"})};$tm.notify(\"Copied \"+t.length+\" nodes to clipboard\");if(e===\"move\"){for(var i=t.length;i--;){this.view.removeNode(t[i])}}};MapWidget.prototype.isMobileMode=function(){var e=utils.getText($tm.ref.sidebarBreakpoint,960);return window.innerWidth<=parseInt(e)};MapWidget.prototype.getVisOptions=function(){var e=$tm.config.vis;var t=utils.parseJSON(this.view.getConfig(\"vis\"));var i=utils.merge({},e,t);i.clickToUse=this.clickToUse;i.manipulation.enabled=!!this.editorMode;i.manipulation.deleteNode=function(e,t){this.handleRemoveElements(e);this.resetVisManipulationBar(t)}.bind(this);i.manipulation.deleteEdge=function(e,t){this.handleRemoveElements(e);this.resetVisManipulationBar(t)}.bind(this);i.manipulation.addEdge=function(e,t){this.handleConnectionEvent(e);this.resetVisManipulationBar(t)}.bind(this);i.manipulation.addNode=function(e,t){this.handleInsertNode(e);this.resetVisManipulationBar(t)}.bind(this);i.manipulation.editNode=function(e,t){this.handleEditNode(e);this.resetVisManipulationBar(t)}.bind(this);i.interaction.zoomView=!!(this.isInSidebar||this.enlargedMode);i.manipulation.editEdge=false;var s=i.physics;s[s.solver]=s[s.solver]||{};s.stabilization.iterations=1e3;this.logger(\"debug\",\"Loaded graph options\",i);return i};MapWidget.prototype.resetVisManipulationBar=function(e){if(e)e(null);this.network.disableEditMode();this.network.enableEditMode()};MapWidget.prototype.isVisInEditMode=function(){var e=\"vis-button vis-back\";return this.graphDomNode.getElementsByClassName(e).length>0};MapWidget.prototype.handleCreateView=function(){var e={view:this.view.getLabel()};var t=\"createView\";this.dialogManager.open(t,e,function(e,t){if(!e)return;var i=utils.getField(t,\"name\");var s=utils.getField(t,\"clone\",false);var a=new ViewAbstraction(i);if(a.exists()){$tm.notify(\"Forbidden! View already exists!\");return}if(s&&this.view.isLiveView()){$tm.notify(\"Forbidden to clone the live view!\");return}a=new ViewAbstraction(i,{isCreate:true,protoView:s?this.view:null});this.setView(a)})};MapWidget.prototype.handleRenameView=function(){if(this.view.isLocked()){$tm.notify(\"Forbidden!\");return}var e=this.view.getOccurrences();var t={count:e.length.toString(),filter:utils.joinAndWrap(e,\"[[\",\"]]\")};var i=\"renameView\";this.dialogManager.open(i,t,function(e,t){if(e){var i=utils.getText(t);var s=new ViewAbstraction(i);if(!i){$tm.notify(\"Invalid name!\")}else if(s.exists()){$tm.notify(\"Forbidden! View already exists!\")}else{this.view.rename(i);this.setView(this.view)}}})};MapWidget.prototype.handleEditView=function(){var e=JSON.stringify($tm.config.vis);var t=this.graphData;var i=this.view.getConfig();var s={\"filter.prettyNodeFltr\":this.view.getNodeFilter(\"pretty\"),\"filter.prettyEdgeFltr\":this.view.getEdgeTypeFilter(\"pretty\"),\"vis-inherited\":e};var a={view:this.view.getLabel(),createdOn:this.view.getCreationDate(true),numberOfNodes:Object.keys(t.nodesById).length.toString(),numberOfEdges:Object.keys(t.edgesById).length.toString(),dialog:{preselects:$tw.utils.extend({},i,s)}};var r=\"configureView\";this.dialogManager.open(r,a,function(e,t){if(!e)return;var i=utils.getPropertiesByPrefix(t.fields,\"config.\",true);var s=this.view.getConfig(\"background_image\");this.view.setConfig(i);if(i[\"physics_mode\"]&&!this.view.isEnabled(\"physics_mode\")){this.handleStorePositions()}var a=this.view.getConfig(\"background_image\");if(a&&a!==s){$tm.notify(\"Background changed! You may need to zoom out a bit.\")}var r=utils.getField(t,\"filter.prettyNodeFltr\",\"\");var o=utils.getField(t,\"filter.prettyEdgeFltr\",\"\");this.view.setNodeFilter(r);this.view.setEdgeTypeFilter(o)})};MapWidget.prototype.handleSaveCanvas=function(){var e=\"$:/temp/tmap/snapshot\";var t=this.createAndSaveSnapshot(e);var i=utils.getSnapshotTitle(this.view.getLabel(),\"png\");var s={dialog:{snapshot:e,width:this.canvas.width.toString(),height:this.canvas.height.toString(),preselects:{name:i,action:\"download\"}}};var a=\"saveCanvas\";this.dialogManager.open(a,s,function(t,s){if(!t)return;i=s.fields.name||i;var a=s.fields.action;if(a===\"download\"){this.handleDownloadSnapshot(i)}else if(a===\"wiki\"){utils.cp(e,i,true);this.dispatchEvent({type:\"tm-navigate\",navigateTo:i})}else if(a===\"placeholder\"){this.view.addPlaceholder(e)}$tw.wiki.deleteTiddler(\"$:/temp/tmap/snapshot\")})};MapWidget.prototype.handleDownloadSnapshot=function(e){var t=this.document.createElement(\"a\");var i=this.view.getLabel();t.download=e||utils.getSnapshotTitle(i,\"png\");t.href=this.getSnapshot();var s=new MouseEvent(\"click\");t.dispatchEvent(s)};MapWidget.prototype.createAndSaveSnapshot=function(e){var t=this.view.getLabel();var i=e||this.view.getRoot()+\"/snapshot\";$tw.wiki.addTiddler(new $tw.Tiddler({title:i,type:\"image/png\",text:this.getSnapshot(true),modified:new Date}));return i};MapWidget.prototype.getSnapshot=function(e){var t=this.canvas.toDataURL(\"image/png\");return e?utils.getWithoutPrefix(t,\"data:image/png;base64,\"):t};MapWidget.prototype.handleDeleteView=function(){var e=this.view.getLabel();if(this.view.isLocked()){$tm.notify(\"Forbidden!\");return}var t=this.view.getOccurrences();if(t.length){var i={count:t.length.toString(),filter:utils.joinAndWrap(t,\"[[\",\"]]\")};this.dialogManager.open(\"cannotDeleteViewDialog\",i);return}var s=\"You are about to delete the view \"+\"''\"+e+\"'' (no tiddler currently references this view).\";this.openStandardConfirmDialog(function(t){if(t){this.view.destroy();this.setView($tm.misc.defaultViewLabel);this.logger(\"debug\",'view \"'+e+'\" deleted ');$tm.notify('view \"'+e+'\" deleted ')}},s)};MapWidget.prototype.handleTriggeredRefresh=function(e){this.logger(\"log\",e,\"Triggered a refresh\");if(this.id===\"live_tab\"){var t=utils.getTiddler(utils.getText(e));if(t){var i=t.fields[\"tmap.open-view\"]||$tm.config.sys.liveTab.fallbackView;if(i&&i!==this.view.getLabel()){this.setView(i);return}}}this.rebuildGraph({resetFocus:{delay:1e3,duration:1e3}})};MapWidget.prototype.handleRemoveElements=function(e){if(e.nodes.length){this.handleRemoveNodes(e.nodes)}else if(e.edges.length){this.handleRemoveEdges(e.edges)}this.resetVisManipulationBar()};MapWidget.prototype.handleRemoveEdges=function(e){$tm.adapter.deleteEdges(this.graphData.edges.get(e));$tm.notify(\"edge\"+(e.length>1?\"s\":\"\")+\" removed\");this.preventFitAfterRebuild=true};MapWidget.prototype.handleRemoveNodes=function(e){var t=$tm.adapter.getTiddlersById(e);var i={count:e.length.toString(),tiddlers:$tw.utils.stringifyList(t),dialog:{preselects:{\"delete-from\":\"filter\"}}};var s=\"deleteNodeDialog\";this.dialogManager.open(s,i,function(t,i){if(!t)return;if(i.fields[\"delete-from\"]===\"system\"){$tm.adapter.deleteNodes(e);var s=e.length}else{var s=0;for(var a=e.length;a--;){var r=this.view.removeNode(e[a]);if(r)s++}}this.preventFitAfterRebuild=true;$tm.notify(\"Removed \"+s+\" of \"+e.length+\" from \"+i.fields[\"delete-from\"])})};MapWidget.prototype.toggleEnlargedMode=function(e){if(!this.isInSidebar&&e===\"halfscreen\")return;this.logger(\"log\",\"Toggled graph enlargement\");var t=this.enlargedMode;if(t){this.network.setOptions({clickToUse:this.clickToUse});utils.findAndRemoveClassNames([\"tmap-has-\"+t+\"-widget\",\"tmap-\"+t]);this.enlargedMode=null;document.body.scrollTop=this.scrollTop}if(!t||t!==e&&(e===\"fullscreen\"||e===\"halfscreen\"&&!this.isInSidebar)){var i=document.documentElement;this.scrollTop=document.body.scrollTop;this.enlargedMode=e;var s=this.isInSidebar?this.sidebar:utils.getFirstElementByClassName(\"tc-story-river\");$tw.utils.addClass(this.document.body,\"tmap-has-\"+e+\"-widget\");$tw.utils.addClass(s,\"tmap-has-\"+e+\"-widget\");$tw.utils.addClass(this.domNode,\"tmap-\"+e);this.network.setOptions({clickToUse:false});$tm.notify(\"Toggled \"+e+\" mode\")}this.handleResizeEvent()};MapWidget.prototype.handleGenerateWidget=function(e){$tw.rootWidget.dispatchEvent({type:\"tmap:tm-generate-widget\",paramObject:{view:this.view.getLabel()}})};MapWidget.prototype.handleStorePositions=function(e){var t=this.view.getNodeData();var i=this.network.getPositions();for(var s in i){t[s]=t[s]||{};t[s].x=i[s].x;t[s].y=i[s].y}this.view.saveNodeData(t);this.ignoreNextViewModification=true;if(e){$tm.notify(\"positions stored\")}};MapWidget.prototype.handleVisStabilizedEvent=function(e){if(this.hasNetworkStabilized)return;this.hasNetworkStabilized=true;this.logger(\"log\",\"Network stabilized after\",e.iterations,\"iterations\");if(!this.view.isEnabled(\"physics_mode\")){var t=this.graphData.nodesById;var i=[];for(var s in t){if(!t[s].x){i.push(s)}}if(i.length){this.setNodesMoveable(i,false);$tm.notify(i.length+\" nodes were added to the graph\");this.doFitAfterStabilize=true}var a=this.visOptions.physics;a[a.solver].centralGravity=0;this.network.setOptions(this.visOptions)}if(this.doFitAfterStabilize){this.doFitAfterStabilize=false;this.fitGraph(1e3,1e3)}};MapWidget.prototype.handleFocusNode=function(e){this.network.focus($tm.adapter.getId(e.param),{scale:1.5,animation:true})};MapWidget.prototype.isZombieWidget=function(){if(this.domNode.isTiddlyWikiFakeDom===true){return true}else{return!this.document.body.contains(this.getContainer())}};MapWidget.prototype.fitGraph=function(e,t){window.clearTimeout(this.activeFitTimeout);t=t||0;e=e||0;var i=function(){if(this.isZombieWidget())return;this.network.redraw();this.network.fit({animation:{duration:t,easingFunction:\"easeOutQuart\"}})};this.activeFitTimeout=window.setTimeout(i.bind(this),e)};MapWidget.prototype.handleInsertNode=function(e){var t=\"addNodeToMap\";this.dialogManager.open(t,null,function(t,i){if(!t)return;var s=utils.getField(i,\"draft.title\");if(utils.tiddlerExists(s)){if(utils.isMatch(s,this.view.getNodeFilter(\"compiled\"))){$tm.notify(\"Node already exists\");return}else{e=$tm.adapter.makeNode(s,e);this.view.addNode(e)}}else{var a=new $tw.Tiddler(i,{\"draft.title\":null});e.label=s;$tm.adapter.insertNode(e,this.view,a)}this.preventFitAfterRebuild=true})};MapWidget.prototype.handleEditNode=function(e){var t=$tm.indeces.tById[e.id];var i=utils.getTiddler(t);var s=JSON.stringify($tm.config.vis);var a=this.view.getConfig(\"vis\");var r={};r[e.id]=e;var o=$tm.adapter.getInheritedNodeStyles(r);var n=JSON.stringify(o[t]);var d=JSON.stringify(utils.merge({},{color:i.fields[\"color\"]},utils.parseJSON(i.fields[\"tmap.style\"])));var l=this.view.getLabel();var h={id:e.id};var g=this.view.getNodeData(e.id,true)||{};delete g.x;delete g.y;var p={view:l,tiddler:i.fields.title,tidColor:i.fields[\"color\"],tidIcon:i.fields[$tm.field.nodeIcon]||i.fields[\"tmap.fa-icon\"],tidLabelField:\"global.\"+$tm.field.nodeLabel,tidIconField:\"global.\"+$tm.field.nodeIcon,dialog:{preselects:{\"inherited-global-default-style\":s,\"inherited-local-default-style\":a,\"inherited-group-styles\":n,\"global.tmap.style\":d,\"local-node-style\":JSON.stringify(g)}}};var u=function(e,t,i){for(var s=i.length;s--;){p.dialog.preselects[e+\".\"+i[s]]=t[i[s]]||\"\"}};u(\"local\",g,[\"label\",\"tw-icon\",\"fa-icon\",\"open-view\"]);u(\"global\",i.fields,[$tm.field.nodeLabel,$tm.field.nodeIcon,\"tmap.fa-icon\",\"tmap.open-view\"]);this.dialogManager.open(\"editNode\",p,function(i,s){if(!i)return;var a=s.fields;var r=utils.getPropertiesByPrefix(a,\"global.\",true);for(var o in r){utils.setField(t,o,r[o]||undefined)}var n=utils.getPropertiesByPrefix(a,\"local.\",true);var d=utils.parseJSON(a[\"local-node-style\"],{});for(var o in n){d[o]=n[o]||undefined}this.view.saveNodeStyle(e.id,d);this.preventFitAfterRebuild=true})};MapWidget.prototype.handleVisSingleClickEvent=function(e){var t=utils.isTrue($tm.config.sys.singleClickMode);if(t&&!this.editorMode){this.handleOpenMapElementEvent(e)}};MapWidget.prototype.handleVisDoubleClickEvent=function(e){if(e.nodes.length||e.edges.length){if(this.editorMode||!utils.isTrue($tm.config.sys.singleClickMode)){this.handleOpenMapElementEvent(e)}}else{if(this.editorMode){this.handleInsertNode(e.pointer.canvas)}}};MapWidget.prototype.handleOpenMapElementEvent=function(e){if(e.nodes.length){var t=this.graphData.nodesById[e.nodes[0]];if(t[\"open-view\"]){$tm.notify(\"Switching view\");this.setView(t[\"open-view\"])}else{this.openTiddlerWithId(e.nodes[0])}}else if(e.edges.length){this.logger(\"debug\",\"Clicked on an Edge\");var i=this.graphData.edgesById[e.edges[0]].type;this.handleEditEdgeType(i)}else{return}this.visTooltip.hide(0,true)};MapWidget.prototype.handleEditEdgeType=function(e){if(!this.editorMode)return;var t=$tm.config.sys.edgeClickBehaviour;if(t!==\"manager\")return;$tw.rootWidget.dispatchEvent({type:\"tmap:tm-manage-edge-types\",paramObject:{type:e}})};MapWidget.prototype.handleResizeEvent=function(e){if(this.isZombieWidget())return;var t=this.getAttr(\"height\");var i=this.getAttr(\"width\");if(this.isInSidebar){var s=this.domNode.getBoundingClientRect();var a=15;i=document.body.clientWidth-s.left-a+\"px\";var r=parseInt(this.getAttr(\"bottom-spacing\"))||15;var o=window.innerHeight-s.top;t=o-r+\"px\"}this.domNode.style.height=t||\"300px\";this.domNode.style.width=i;this.repaintGraph()};MapWidget.prototype.handleClickEvent=function(e){if(this.isZombieWidget()||!this.network)return;if(!this.graphDomNode.contains(e.target)){var t=this.network.getSelection();if(t.nodes.length||t.edges.length){this.logger(\"debug\",\"Clicked outside; deselecting nodes/edges\");this.network.selectNodes([]);this.resetVisManipulationBar()}}else{this.canvas.focus()}};MapWidget.prototype.handleVisOnContext=function(e){};MapWidget.prototype.handleVisSelectNode=function(e){this.assignActiveStyle(e.nodes)};MapWidget.prototype.assignActiveStyle=function(e){if(!Array.isArray(e))e=[e];var t=this.visOptions.nodes.color;for(var i=e.length;i--;){var s=e[i];var a=this.graphData.nodesById[s];var r=utils.merge({},t,a.color);this.graphData.nodes.update({id:s,color:{highlight:r,hover:r}})}};MapWidget.prototype.handleVisDeselectNode=function(e){};MapWidget.prototype.handleVisDragEnd=function(e){if(!e.nodes.length)return;this.setNodesMoveable(e.nodes,false)};MapWidget.prototype.handleVisBeforeDrawing=function(e){if(this.backgroundImage){e.drawImage(this.backgroundImage,0,0)}};MapWidget.prototype.constructTooltip=function(e,t){var i=utils.parseJSON(e);var s=i.node||i.edge;var a=null;var r=\"text/html\";var o=\"text/vnd-tiddlywiki\";if(i.node){var n=$tm.indeces.tById[s];var d=utils.getTiddler(n);var l=d.fields[$tm.field.nodeInfo];if(l){t.innerHTML=$tw.wiki.renderText(r,o,l)}else if(d.fields.text){var h={type:\"tiddler\",attributes:{tiddler:{type:\"string\",value:n}},children:[{type:\"transclude\",attributes:{},isBlock:true}]};utils.removeArrayElement(this.children,this.tmpTooltipWidget);this.tmpTooltipWidget=this.makeChildWidget(h);this.tmpTooltipWidget.setVariable(\"tv-tiddler-preview\",\"yes\");this.tmpTooltipWidget.render(t,null);this.children.push(this.tmpTooltipWidget);return}else{t.innerHTML=n}}else{var g=this.graphData.edgesById[s];var p=$tm.indeces.allETy[g.type];if(p.description){a=$tw.wiki.renderText(r,o,p.description)}t.innerHTML=a||p.label||p.id}};MapWidget.prototype.handleVisHoverElement=function(e){if($tm.mouse.buttons)return;var t=e.node||e.edge;var i=JSON.stringify(e);if(e.node){this.assignActiveStyle(t)}if(!this.isVisInEditMode()){var s=this.constructTooltip;var i=JSON.stringify(e);this.visTooltip.show(i,s)}};MapWidget.prototype.handleVisBlurElement=function(e){this.visTooltip.hide()};MapWidget.prototype.handleVisLoading=function(e){this.graphLoadingBarDomNode.style.display=\"block\";this.graphLoadingBarDomNode.setAttribute(\"max\",e.total);this.graphLoadingBarDomNode.setAttribute(\"value\",e.iterations)};MapWidget.prototype.handleVisLoadingDone=function(e){this.graphLoadingBarDomNode.style.display=\"none\"};MapWidget.prototype.handleVisDragStart=function(e){if(e.nodes.length){this.visTooltip.hide(0,true);this.assignActiveStyle(e.nodes);this.setNodesMoveable(e.nodes,true)}};MapWidget.prototype.destruct=function(){utils.setDomListeners(\"remove\",window,this.windowDomListeners);utils.setDomListeners(\"remove\",this.domNode,this.widgetDomListeners);this._destructVis()};MapWidget.prototype._destructVis=function(){if(!this.network)return;utils.setDomListeners(\"remove\",this.canvas,this.canvasDomListeners);this.network.destroy();this.network=null};MapWidget.prototype.openTiddlerWithId=function(e){var t=$tm.indeces.tById[e];this.logger(\"debug\",\"Opening tiddler\",t,\"with id\",e);if(this.enlargedMode===\"fullscreen\"){var i=this.wiki.findDraft(t);var s=!!i;if(!s){var a=\"tm-edit-tiddler\";this.dispatchEvent({type:a,tiddlerTitle:t});i=this.wiki.findDraft(t)}var r={\ndraftTRef:i,originalTRef:t};var o=\"fullscreenTiddlerEditor\";this.dialogManager.open(o,r,function(e,a){if(e){var r=\"tm-save-tiddler\";this.dispatchEvent({type:r,tiddlerTitle:i})}else if(!s){utils.deleteTiddlers([i])}var r=\"tm-close-tiddler\";this.dispatchEvent({type:r,tiddlerTitle:t})})}else{var n=this.domNode.getBoundingClientRect();this.dispatchEvent({type:\"tm-navigate\",navigateTo:t,navigateFromTitle:this.getVariable(\"storyTiddler\"),navigateFromNode:this,navigateFromClientRect:{top:n.top,left:n.left,width:n.width,right:n.right,bottom:n.bottom,height:n.height}})}};MapWidget.prototype.getViewHolderRef=function(){if(this.viewHolderRef){return this.viewHolderRef}this.logger(\"info\",\"Retrieving or generating the view holder reference\");var e=this.getAttr(\"view\");if(e){this.logger(\"log\",'User wants to bind view \"'+e+'\" to graph');var t=$tm.path.views+\"/\"+e;if(this.wiki.getTiddler(t)){var i=$tm.path.localHolders+\"/\"+utils.genUUID();this.logger(\"log\",'Created an independent temporary view holder \"'+i+'\"');utils.setText(i,t);this.logger(\"log\",'View \"'+t+'\" inserted into independend holder')}else{this.logger(\"log\",'View \"'+e+'\" does not exist')}}if(typeof i===\"undefined\"){this.logger(\"log\",\"Using default (global) view holder\");var i=$tm.ref.defaultViewHolder}return i};MapWidget.prototype.setView=function(e,t){e=new ViewAbstraction(e);if(!e.exists())return;var i=e.getLabel();t=t||this.viewHolderRef;this.logger(\"info\",\"Inserting view '\"+i+\"' into holder '\"+t+\"'\");this.wiki.addTiddler(new $tw.Tiddler({title:t,text:i}))};MapWidget.prototype.getView=function(e){if(!e&&this.view){return this.view}var t=this.getViewHolderRef();var i=utils.getText(t);var s=new ViewAbstraction(i);this.logger(\"debug\",\"Retrieved view from holder\");if(!s.exists()){this.logger(\"debug\",'Warning: View \"'+i+\"\\\" doesn't exist. Default is used instead.\");s=new ViewAbstraction(\"Default\")}return s};MapWidget.prototype.reloadBackgroundImage=function(e){this.backgroundImage=null;var t=this.view.getConfig(\"background_image\");var i=utils.getTiddler(t);if(!i&&!t)return;var s=new Image;var a=function(e){s.src=e};s.onload=function(){this.backgroundImage=s;this.repaintGraph();if(e){$tm.notify(e)}}.bind(this);if(i){var r=i.fields[\"_canonical_uri\"];if(r){utils.getImgFromWeb(r,a)}else if(i.fields.text){var o=$tw.utils.makeDataUri(i.fields.text,i.fields.type);s.src=o}}else if(t){utils.getImgFromWeb(t,a)}};MapWidget.prototype.getRefreshedDataSet=function(e,t,i){if(!i){return new vis.DataSet(utils.getValues(e))}if(t)i.remove(Object.keys(t));i.update(utils.getValues(e));return i};MapWidget.prototype.repaintGraph=function(){var e=$tw.utils.hasClass(this.document.body,\"tmap-has-fullscreen-widget\");if(this.network&&(!e||e&&this.enlargedMode)){this.logger(\"info\",\"Repainting the whole graph\");this.network.redraw();this.fitGraph(0,1e3)}};MapWidget.prototype.setGraphButtonEnabled=function(e,t){var i=\"vis-button\"+\" \"+\"tmap-\"+e;var s=utils.getFirstElementByClassName(i,this.domNode);$tw.utils.toggleClass(s,\"tmap-button-enabled\",t)};MapWidget.prototype.dialogPostProcessor=function(){this.network.selectNodes([]);this.resetVisManipulationBar()};MapWidget.prototype.setNodesMoveable=function(e,t){if(!e||!e.length||this.view.isEnabled(\"physics_mode\")){return}var i=[];var s=!t;for(var a=e.length;a--;){i.push({id:e[a],fixed:{x:s,y:s}})}this.graphData.nodes.update(i);if(s){this.logger(\"debug\",\"Fixing\",i.length,\"nodes\");this.handleStorePositions()}};MapWidget.prototype.addGraphButtons=function(e){var t=utils.getFirstElementByClassName(\"vis-navigation\",this.domNode);for(var i in e){var s=this.document.createElement(\"div\");s.className=\"vis-button \"+\" \"+\"tmap-\"+i;s.addEventListener(\"click\",e[i].bind(this),false);t.appendChild(s);this.setGraphButtonEnabled(i,true)}};",
            "title": "$:/plugins/felixhayashi/tiddlymap/js/widget/MapWidget",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/plugins/felixhayashi/tiddlymap/license": {
            "title": "$:/plugins/felixhayashi/tiddlymap/license",
            "subtitle": "License",
            "caption": "License",
            "text": "\\rules except wikilink\n\n!! TiddlyMap\n\nCopyright (c) 2014, Felix Küppers\nAll rights reserved.\n\nTiddlyMap is licensed under the [[BSD 2-Clause License|http://opensource.org/licenses/BSD-2-Clause]]. For the exact license terms, please visit [[https://github.com/felixhayashi/TW5-TiddlyMap/blob/master/LICENSE]]. \n\n!! TiddlyWiki\n\nCreated by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\n\nCopyright © Jeremy Ruston 2004-2007 Copyright © UnaMesa Association 2007-2014\n\nPublished under the following [licenses](https://github.com/Jermolene/TiddlyWiki5/tree/master/licenses):\n\n# BSD 3-clause \"New\" or \"Revised\" License (including any right to adopt any future version of a license if permitted)\n# Creative Commons Attribution 3.0 (including any right to adopt any future version of a license if permitted)\n\n!! Vis.js\n\nCopyright (c) 2014 [Almende B.V.](https://github.com/almende/vis)\n\nPublished under the following licenses:\n\n# Apache License Version 2.0, January 2004 http://www.apache.org/licenses/\n# MIT License (MIT)\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/readme": {
            "title": "$:/plugins/felixhayashi/tiddlymap/readme",
            "text": "* Please refer to the project-readme hosted at [[https://github.com/felixhayashi/TW5-TiddlyMap]].\n* A demo with several examples and explanations can be found at [[http://tiddlymap.org]]."
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tmap:unknown": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tmap:unknown",
            "description": "Automatically assigned to an edge that does not have a type assigned",
            "style": "{\"color\":\"gray\"}",
            "show-label": "false"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tw-body:link": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tw-body:link",
            "description": "A link that is contained in the tiddler's body pointing to another resource.",
            "style": "{\"color\":\"orange\", \"dashes\":true}",
            "label": "links to",
            "text": ""
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tw-list:list": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tw-list:list",
            "description": "Contained in a list of this tiddler",
            "style": "{ \"color\": \"red\", \"dashes\":true}",
            "label": "listed in",
            "text": ""
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tw-list:tags": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tw-list:tags",
            "description": "A tag that refers to a tiddler of the same name.",
            "style": "{ \"color\": \"DarkSlateGray\", \"dashes\":true}",
            "label": "tagged with"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig/default": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig/default",
            "caption": "Overview",
            "text": "\\rules except wikilink\n\n<div class=\"tmap-flash-message tmap-plain\">\n  Please visit the [[online docs|http://tiddlymap.org/Documentation]]\n  for more information about the available global options.\n</div>\n<table class=\"tmap-key-value-table\">\n  <tr>\n    <th align=\"left\">Plugin version</th>\n    <td><<pluginVersion>></td>\n  </tr>\n<!--\n  <tr>\n    <th align=\"left\">Datastructure version</th>\n    <td><<dataStructureVersion>></td>\n  </tr>\n-->\n  <tr>\n    <th align=\"left\">Nodes in system</th>\n    <td><<numberOfNodes>></td>\n  </tr>\n  <tr>\n    <th align=\"left\">Edges in system</th>\n    <td><<numberOfEdges>></td>\n  </tr>\n</table>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig/editor": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig/editor",
            "caption": "Editor",
            "text": "\\rules except wikilink\n\n<table class=\"tmap-config-table\">\n  <<tmap-row type:\"input-checkbox\"\n      title:\"Show Neighbour&shy;hood button\"\n      field:\"config.sys.editorMenuBar.showNeighScopeButton\" \n      descr:\"Show or hide the neighbourhood scope button from the menu.\">>\n  <<tmap-row type:\"input-checkbox\"\n      title:\"Show Screen&shy;shot button\"\n      field:\"config.sys.editorMenuBar.showScreenshotButton\" \n      descr:\"Show or hide the screenshot button.\">>\n</table>   \n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig/fields": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig/fields",
            "caption": "Field settings",
            "text": "\\rules except wikilink\n\n<table class=\"tmap-config-table\">\n  <<tmap-row type:\"input-text\"\n      title:\"Node-icon field\"\n      field:\"config.sys.field.nodeIcon\" \n      descr:\"Local image used as node image in the graphs.\">>\n  <<tmap-row type:\"input-text\"\n      title:\"Node-label field\"\n      field:\"config.sys.field.nodeLabel\" \n      descr:\"Alternative node label to use instead of the title.\">>\n  <<tmap-row type:\"input-text\"\n      title:\"Node-info field\"\n      field:\"config.sys.field.nodeInfo\" \n      descr:\"Field used as tooltip when hovering over a node in a graph.\"\n      note:\"It is prohibited to use the text field here.\">>\n</table>   \n\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig/interaction": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig/interaction",
            "caption": "Interaction & behaviour",
            "text": "\\rules except wikilink\n\n<table class=\"tmap-config-table\">\n<!--\n  <<tmap-row type:\"input-select\"\n      title:\"Default node tooltip\"\n      field:\"config.sys.defaultNodeTooltip\" \n      descr:\"What to show when hovering over a node.\"\n      nochoice:\"No\"\n      selectFilter:\"[[nothing|Nothing]]\n                    [[manager|Open edge-type manager]]\">>\n-->\n  <$macrocall type=\"input-select\"\n        $name=\"tmap-row\"\n        title=\"Default startup view\"\n        field=\"config.sys.defaultView\"\n        nochoice=\"Last view used at startup\"\n        selectFilter=<<tmap \"option\" \"selector.allViewsByLabel\">>\n        descr=\"The view to display at startup\" />\n  <<tmap-row type:\"input-checkbox\"\n      title:\"Show popups\"\n      field:\"config.sys.popups.enabled\" \n      descr:\"Set this to true if you want to see automatic\n             popups in the map.\">>\n  <$list filter=\"[config.sys.popups.enabled[true]]\">\n  <<tmap-row type:\"input-text\"\n      title:\"Popup delay\"\n      field:\"config.sys.popups.delay\"\n      descr:\"The time in miliseconds that needs to pass after\n             a tooltip is triggered.\">>\n  <<tmap-row type:\"input-text\"\n      title:\"Popup width\"\n      field:\"config.sys.popups.width\"\n      descr:\"The default max-width of the popup.\"\n      note:\"Make sure you added the desired unit (e.g. `px`).\n            Requires a wiki refresh.\">>\n  <<tmap-row type:\"input-text\"\n      title:\"Popup height\"\n      field:\"config.sys.popups.height\"\n      descr:\"The default max-height of the popup.\"\n      note:\"Make sure you added desired the unit (e.g.  `px`).\n            Requires a wiki refresh.\">>\n  </$list>\n  <<tmap-row type:\"input-checkbox\"\n      title:\"Allow single click mode\"\n      field:\"config.sys.singleClickMode\" \n      descr:\"A single click on a node is sufficient to open the\n             corresponding tiddler.\"\n      note:\"Drag and drop will still work and does not cause a\n            tiddler to be opened. Single click is never active in\n            the map editor.\">>\n  <<tmap-row type:\"input-select\"\n      title:\"Edge click behaviour\"\n      field:\"config.sys.edgeClickBehaviour\" \n      selectFilter:\"[[nothing|Nothing]]\n                    [[manager|Open edge-type manager]]\"\n      descr:\"What should happen when you click on an edge?\">>\n</table>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig/liveTab": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig/liveTab",
            "caption": "Live tab",
            "text": "\\rules except wikilink\n\n<table class=\"tmap-config-table\">\n  <<tmap-row type:\"input-checkbox\"\n      title:\"Show Live tab\"\n      field:\"liveTab\" \n      descr:\"Show or hide the live tab in the sidebar.\">>\n  <$macrocall type=\"input-select\"\n      $name=\"tmap-row\"\n      title=\"Fallback view\"\n      field=\"config.sys.liveTab.fallbackView\" \n      selectFilter=<<tmap \"option\" \"selector.allViewsByLabel\">>\n      descr=\"The view to display in the sidebar's live tab in\n             case the current tiddler did not specify a view\n             to open.\" />\n</table>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig",
            "subtitle": "{{$:/core/images/options-button}} Global configuration of TiddlyMap",
            "classes": "tmap-remove-top-space",
            "text": "\\rules except wikilink\n\n<$macrocall $name=\"tabs\"\n  default=<<concat \"$(template)$/default\">>\n  tabsList=\"[all[shadows]prefix<template>] -[<template>]\"\n/>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig/verbosity": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig/verbosity",
            "caption": "Verbosity",
            "text": "\\rules except wikilink\n\n<div class=\"tmap-flash-message tmap-plain\">\n  Here you can restrict the system's talkativeness.\n</div>\n\n<table class=\"tmap-config-table\">\n  <<tmap-row type:\"input-checkbox\"\n      title:\"Debug output\"\n      field:\"config.sys.debug\" \n      descr:\"Set this to true if you want debug information to be\n             displayed in the browser console.\">>\n  <<tmap-row type:\"input-checkbox\"\n      title:\"Show notifications\"\n      field:\"config.sys.notifications\" \n      descr:\"Set this to true if you want to receive fade-out\n             notifications for important events.\">>\n</table> "
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig/vis": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/globalConfig/vis",
            "classes": "tmap-remove-top-space",
            "caption": "Graph",
            "text": "\\rules except wikilink\n\n<div class=\"tmap-flash-message tmap-info\">\n  The global vis configurations will affect all views and their\n  elements (nodes and edges) unless they are overridden on a lower\n  level. All options below are documented at\n  [[vis.js.org|http://visjs.org/docs/network]].\n</div>\n<div class=\"tmap-flash-message tmap-info\">\n  Only config items that you actually changed have an effect on\n  the graph. Other options are visible, yet, inactive.\n</div>\n<$tmap-config\n    mode=\"manage-config\"\n    inherited=\"vis-inherited\"\n    extension=\"config.vis\" />"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/configureView/default": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/configureView/default",
            "caption": "Overview",
            "text": "\\rules except wikilink\n\n<div class=\"tmap-flash-message tmap-info\">\n   All configurations __only__ affect this view.\n</div>\n\n<table class=\"tmap-key-value-table\">\n  <tr>\n    <th align=\"left\">Created on</th>\n    <td><<createdOn>></td>\n  </tr>\n  <tr>\n    <th align=\"left\">Nodes contained in graph</th>\n    <td><<numberOfNodes>></td>\n  </tr>\n  <tr>\n    <th align=\"left\">Edges contained in graph</th>\n    <td><<numberOfEdges>></td>\n  </tr>\n</table>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/configureView/editFilters": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/configureView/editFilters",
            "caption": "Edit filters",
            "text": "\\rules except wikilink\n\n<div class=\"tmap-flash-message tmap-info\">\n  Completely new to filters? Please read\n  [[Introduction to filter notation|http://tiddlywiki.com/#Introduction%20to%20filter%20notation]]\n  first.\n</div>\n\n<fieldset>\n  <legend>Filters <sup>[1]</sup></legend>\n  <table class=\"tmap-config-table tmap-large-input\">\n    <<tmap-row type:\"input-textarea\"\n        title:\"Node filter\"\n        field:\"filter.prettyNodeFltr\"\n        descr:\"In the map, only those tiddlers that match this filter\n               are shown. Drafts and system tiddlers are automatically\n               excluded.\">>\n    <<tmap-row type:\"input-textarea\"\n        title:\"Edge-type filter\"\n        field:\"filter.prettyEdgeFltr\" \n        descr:\"Only edges with a type that matches the filter are shown.\">>\n  </table>   \n</fieldset>\n\n---\n\n<sup>[1]</sup> In the editors above, a new line is equivalent to a space symbol.<br />\n<sup>[2]</sup> It is suggested to read\n[[Node and edge-type filters|http://tiddlymap.org#Node%20and%20edge-type%20filters]]\nand [[Edge-type namespaces|http://tiddlymap.org#Node%20and%20edge-type%20filters]]\nbefore using Tiddlymap's filter editor."
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/configureView/layout": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/configureView/layout",
            "caption": "Layout",
            "text": "\\rules except wikilink\n\n<table class=\"tmap-config-table\">\n  <<tmap-row type:\"input-checkbox\"\n      title:\"Floating nodes\"\n      field:\"config.physics_mode\" \n      descr:\"Set this to true if you want your nodes to freely\n             swirl around.\">>\n  <<tmap-row type:\"input-text\"\n      title:\"Background image\"\n      field:\"config.background_image\" \n      descr:\"The title of an image tiddler to be used as background\n             in the view.\"\n      note:\"You can also use an image url directly, however, the\n            image needs be stored under the same domain as your wiki.\n            Otherwise, it won't be displayed!\">>\n</table>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/configureView/namespace": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/configureView/namespace",
            "caption": "Namespace",
            "text": "\\rules except wikilink\n\n<table class=\"tmap-config-table tmap-small-input\">\n  <<tmap-row type:\"input-text\"\n      title:\"Edge-type namespace\"\n      field:\"config.edge_type_namespace\" \n      descr:\"A namespace (like `foaf` in `foaf:knows`) that will be\n             automatically added to all edge types you create in\n             this view. The namespace is only added if the types\n             do not exist yet and do not have a namespace assigned yet.\n             Namespaces are always hidden in the graph.\"\n      note:\"Most likely, you don't want the edges created with this\n            namespace to leak into other views, moreover, you don't\n            want edges that do not possess the namespace ever to be\n            shown here. In this case, use a private marker (`_`)\n            in front of your namespace, e.g. `_mynamespace` and use\n            an appropriate edge type filter, i.e. `+[prefix[_mynamespace]]`\n            For further information see:\n            \n            * [[Edge-type namespaces|http://tiddlymap.org/#Edge-type%20namespaces]]\n            * [[Private edge types|http://tiddlymap.org/#Private%20edge%20types]]\n            \">>\n</table>\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/configureView": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/configureView",
            "subtitle": "{{$:/core/images/options-button}} View configuration -- <<view>>",
            "text": "\\rules except wikilink\n\n\\define privateEdgeTypes() [[private edge-types|http://tiddlymap.org/#Private%20edge%20types]]\n\n<$macrocall $name=\"tabs\"\n  default=<<concat \"$(template)$/default\">>\n  tabsList=\"[all[shadows]prefix<template>] -[<template>]\"\n/>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/configureView/vis": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/configureView/vis",
            "caption": "Graph",
            "text": "\\rules except wikilink\n\n<div class=\"tmap-flash-message tmap-info\">\n   The local vis configurations will affect all\n   elements (nodes and edges) of this view, unless they are\n   overridden on a lower level. All options below are documented at\n   [[vis.js.org|http://visjs.org/docs/network]].\n</div>\n<div class=\"tmap-flash-message tmap-info\">\n  Only config items that you actually changed have an effect on the\n  graph. Other options are visible, yet, inactive.\n</div>\n<$tmap-config\n    mode=\"manage-config\"\n    inherited=\"vis-inherited\"\n    extension=\"config.vis\" />"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/cannotDeleteViewDialog": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/cannotDeleteViewDialog",
            "subtitle": "{{$:/core/images/locked-padlock}} You cannot delete this view!",
            "buttons": "ok",
            "text": "\\rules except wikilink\n\nIt is not possible to delete the current view as ''<<count>>'' tiddlers\nare referencing it. To delete the view you must first remove the tiddlymap\nwidgets in the tiddlers listed below or change their view attributes.\n\n''References''\n\n<ul>\n<$list filter=<<filter>> variable=\"item\">\n  <li><$link><<item>></$link></li>\n</$list>\n</ul>\n\nAfter the references are removed, you may delete the view."
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/getConfirmation": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/getConfirmation",
            "subtitle": "{{$:/core/images/import-button}} You must confirm in order to proceed!",
            "text": "\\rules except wikilink\n\n<<message>>\n\n''Are you really sure you want to do this?''"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/createView": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/createView",
            "subtitle": "{{$:/core/images/new-button}} Creating a new view",
            "text": "\\rules except wikilink\n\n<table class=\"tmap-config-table\">\n  <<tmap-row type:\"input-text\"\n      title:\"View name\"\n      field:\"name\" \n      descr:\"The name for the new view. If no name is entered,\n             the program will invent one for you.\"\n      note:\"You cannot override an existing view. In this case,\n            you need to delete the old view first! You must no use\n            slashes (`/`) in the name.\">>\n  <<tmap-row type:\"input-checkbox\"\n      title:\"Clone view\"\n      field:\"clone\" \n      descr:\"Use the view that is currently displayed in the\n             editor as blueprint. The view will be an __exact__\n             clone of the current one, only with a different \n             name.\">>\n</table>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/deleteNodeDialog": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/deleteNodeDialog",
            "subtitle": "{{$:/core/images/delete-button}} You are about to delete <<count>> nodes",
            "text": "\\rules except wikilink\n\n''Please choose an option or abort:''\n\n<$radio tiddler=<<output>> field=\"delete-from\" value=\"system\">\n  Delete nodes from system <sup>[1]</sup>\n</$radio><br />\n<$radio tiddler=<<output>> field=\"delete-from\" value=\"filter\">\n  Delete nodes from graph's filter <sup>[2]</sup>\n</$radio>\n\nThe following nodes will be deleted:\n\n<ul>\n<$list filter=<<tiddlers>>>\n  <li><$view tiddler={{!!title}} field=\"title\" /></li>\n</$list>\n</ul>\n\n---\n\n<sup>[1]</sup>\n<small>This will delete all nodes, their corresponding tiddlers and all connected edges.</small><br/>\n<sup>[2]</sup>\n<small>''Important:'' Removing a node from the graph's filter only works, if the node has been added in the map editor per double click or via \"Add Node\". If the node hasn't been added as mentioned above, you need to change the underlying tiddler in a way that it doesn't match your filter anymore, if you don't want it to be displayed in the graph.</small>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/dublicateIdInfo": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/dublicateIdInfo",
            "subtitle": "{{$:/core/images/info-button}} Dublicate id detected",
            "buttons": "ok_suppress",
            "text": "\\rules except wikilink\n\nTiddlyMap requires the value of the id field (\"tmap.id\") to be\nunique in order to correctly identify nodes and tiddlers.\n\nThe tiddler \"<<param.changedTiddler>>\" had the same id as the\ntiddler \"<<param.existingTiddler>>\".\n\nTherefore TiddlyMap\n\n* assigned a new id to tiddler \"<<param.changedTiddler>>\"\n* removed all edges from \"<<param.changedTiddler>>\""
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/edgeNotVisible": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/edgeNotVisible",
            "subtitle": "{{$:/core/images/info-button}} Edge will not be visible in view \"<<view>>\"",
            "buttons": "ok_suppress",
            "text": "\\rules except wikilink\n\nYou just created an edge of type\n<code><$text text=<<type>> /></code> that will not be\nvisible in this view because it doesn't match your\nedge-type filter settings.\n\nThe current edge-type filter of view \"<<view>>\" looks like this:\n\n<pre><code><$text text=<<eTyFilter>> /></code></pre>\n\nTo have the newly added type displayed in your view, adjust your\nedge-type filter accordingly. \n\nSome suggestions:\n\n<ul>\n  <li>\n    Explicitly add the type to the filter:\n    <code><$text text=\"[[\" /><$text text=<<type>> /><$text text=\"]]\" /></code>\n  </li>\n  <li>\n  <$set\n      filter=\"[<type>regexp[:]splitbefore[:]]\"\n      name=\"prefix\"\n      emptyValue=<<tmap halfOfString \"$(type)$\">>>\n  Add a filter rule (e.g. a prefix filter) that will match\n  your type: <code>[prefix[<<prefix>>]]</code>\n  </$set>\n  </li>\n  <li>Make your current view-filter less restrictive.</li>\n</ul>\n\nFor further information, please see:\n[[Node and edge-type filters|http://tiddlymap.org#Node%20and%20edge-type%20filters]]."
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/editNode/default": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/editNode/default",
            "caption": "Global node style",
            "classes": "tmap-remove-top-space",
            "text": "\\rules except wikilink\n\n<div class=\"tmap-flash-message tmap-info\">\n  A node's ''global configuration''\n  (also referred to as //global individual config//) defines its\n  individual appearance and behaviour in all views.\n</div>\n<<maybeShowTidColorWarning>>\n    \n<$macrocall $name=\"sharedSettings\"\n    twIconField=<<tidIconField>>\n    faIconField=\"global.tmap.fa-icon\"\n    labelField=<<tidLabelField>> />\n\n<$macrocall $name=\"visConfiguration\"\n    mode=\"manage-node-types\"\n    extensionField=\"global.tmap.style\"\n    styleName=\"node's global style\"\n    inheritedList=\"[[inherited-global-default-style]]\n                   [[inherited-local-default-style]]\n                   [[inherited-group-styles]]\" />"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/editNode/local": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/editNode/local",
            "caption": "Local node style",
            "classes": "tmap-remove-top-space",
            "text": "\\rules except wikilink\n    \n<div class=\"tmap-flash-message tmap-info\">\n  The ''local node configuration'' \n  (also referred to as //view-specific node configuration//)\n  overrides the //global individual configuration// and only affects\n  the node's appearance and behaviour in the current view.\n</div>\n<<maybeShowTidColorWarning>>\n\n<fieldset>\n  <legend>Behaviour</legend>\n  <table class=\"tmap-config-table\">\n    <$macrocall type=\"input-select\"\n        $name=\"tmap-row\"\n        title=\"Open view\"\n        field=\"local.open-view\"\n        nochoice=\"Disabled\"\n        selectFilter=<<tmap \"option\" \"selector.allViewsByLabel\">>\n        descr=\"Clicking on this node will open the specified\n               view instead of the tiddler represented by this node.\" />\n  </table>\n</fieldset>\n\n<$macrocall $name=\"sharedSettings\"\n    twIconField=\"local.tw-icon\"\n    faIconField=\"local.fa-icon\"\n    labelField=\"local.label\" />\n                         \n<$macrocall $name=\"visConfiguration\"\n    mode=\"manage-node-types\"\n    extensionField=\"local-node-style\"\n    styleName=\"node's local style\"\n    inheritedList=\"[[inherited-global-default-style]]\n                   [[inherited-local-default-style]]\n                   [[inherited-group-styles]]\n                   [[global.tmap.style]]\" />"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/editNode": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/editNode",
            "subtitle": "{{$:/core/images/edit-button}} Editing style of node \"<<tiddler>>\"",
            "classes": "tmap-remove-top-space",
            "text": "\\rules except wikilink\n\n\\define maybeShowTidColorWarning()\n  <$list filter=\"[<tidColor>regexp[.+]]\">\n  <div class=\"tmap-flash-message tmap-warning\">\n    You have set the tiddler's color\n    field to \"<<tidColor>>\". This value will be completely ignored\n    when you change node's color properties in the vis editor below.\n  </div>\n  </$list>\n\\end\n\n\\define iconSettings(twIconField, faIconField)\n  <fieldset>\n    <legend>Icon Settings</legend>\n    <table class=\"tmap-config-table\">\n      <<tmap-row type:\"input-text\"\n          title:\"TW-icon\"\n          field:\"$twIconField$\"\n          descr:\"A tiddlywiki image reference.\n                 For example '$:/core/icon' for Movotun Jack.\">>\n      <<tmap-row type:\"input-text\"\n          title:\"FA-icon\"\n          field:\"$faIconField$\"\n          descr:\"A Font Awesome icon code.\n                 For example 'f206' for the bicycle symbol.\">>\n    </table>\n  </fieldset>\n\\end\n\n\\define sharedSettings(twIconField, faIconField, labelField)\n  <fieldset>\n    <legend>General Settings</legend>\n    <table class=\"tmap-config-table\">\n      <<tmap-row type:\"input-text\"\n          title:\"Label\"\n          field:\"$labelField$\"\n          descr:\"Use this value as node label.\">>\n    </table>\n  </fieldset>\n  <!-- display icon fieldset -->\n  <<iconSettings \"$twIconField$\" \"$faIconField$\">>  \n\\end\n\n<$macrocall\n  $name=\"tabs\"\n  default=<<concat \"$(template)$/default\">>\n  tabsList=\"[all[shadows]prefix<template>] -[<template>]\"\n/>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/fullscreenTiddlerEditor/draft": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/fullscreenTiddlerEditor/draft",
            "caption": "Draft",
            "text": "\\rules except wikilink\n\n<div class=\"tmap-modal-editor\">\n  <$importvariables filter=\"[all[tiddlers+shadows]prefix[$:/core/macros/]]\">\n    <$set name=\"currentTiddler\" value=<<draftTRef>> >\n      <$transclude tiddler=\"$:/core/ui/EditTemplate\" field=\"text\" mode=\"block\" />\n    </$set>\n  </$importvariables>\n</div>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/fullscreenTiddlerEditor/original": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/fullscreenTiddlerEditor/original",
            "caption": "Preview",
            "text": "\\rules except wikilink\n\n<div class=\"tmap-modal-editor\">\n  <$importvariables filter=\"[all[tiddlers+shadows]prefix[$:/core/macros/]]\">\n    <$set name=\"currentTiddler\" value=<<draftTRef>> >\n      <$transclude tiddler=\"$:/core/ui/ViewTemplate\" field=\"text\" mode=\"block\" />\n    </$set>\n  </$importvariables>\n</div>\n\n<!--\n<$set name=\"currentTiddler\" value=<<draftTRef>> >\n  <$transclude tiddler=\"$:/core/ui/ViewTemplate\" field=\"text\" mode=\"block\" />\n</$set>-->\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/fullscreenTiddlerEditor": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/fullscreenTiddlerEditor",
            "subtitle": "{{$:/core/images/edit-button}} <<originalTRef>>",
            "classes": "tmap-modal-fullscreen-editor tmap-remove-top-space",
            "text": "\\rules except wikilink\n\n\\define defaultTab() $:/plugins/felixhayashi/tiddlymap/dialog/fullscreenTiddlerEditor/original\n\n<$macrocall $name=\"tabs\"\n    default=<<defaultTab>>\n    tabsList=\"[all[shadows]prefix[$:/plugins/felixhayashi/tiddlymap/dialog/fullscreenTiddlerEditor/]]\" />"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/fieldChanged": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/fieldChanged",
            "subtitle": "{{$:/core/images/info-button}} The field \"<<name>>\" changed",
            "text": "\\rules except wikilink\n\nYou changed the field \"<<name>>\" from \"<<oldValue>>\" to \"<<newValue>>\".\n\nIt is recommended to let TiddlyMap copy all values from the former field \"<<oldValue>>\" to the new field \"<<newValue>>\" so the data stored in \"<<oldValue>>\" is not lost. This operation has to be done now or never.\n\nDo you want to move each tiddler's existing \"<<oldValue>>\" value to \"<<newValue>>\"? Please note that any value currently stored in \"<<newValue>>\" would consequently be overridden and the old field \"<<oldValue>>\" would be eventually removed!"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/fullscreenNotSupported": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/fullscreenNotSupported",
            "subtitle": "{{$:/core/images/info-button}} Your machine does not support fullscreen",
            "buttons": "ok_suppress",
            "text": "\\rules except wikilink\n\nPlease have a look [[here|http://caniuse.com/#feat=fullscreen]] to see a list of supported devices/browsers.\n\nSorry for this :("
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/addNodeToMap": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/addNodeToMap",
            "subtitle": "{{$:/core/images/tag-button}} Add node",
            "classes": "tmap-modal-add-node",
            "text": "\\rules except wikilink\n\n\\define backButtonText() back to list\n\\define outputAndTemplate() [[$(output)$]] [[$(template)$]]\n\n\\define editor()\n  <$button class=\"tmap-go-back tc-btn-invisible\">\n    {{$:/core/images/chevron-left}} <<backButtonText>>\n    <$action-deletefield $tiddler=<<temp>> more template />\n    <$action-sendmessage\n        $message=\"tmap:tm-clear-tiddler\"\n        keep=\"draft.title\"\n        title=<<output>> />\n  </$button>\n  \n  <$list filter=\"[<output>get[draft.title]is[tiddler]]\">\n  <div class=\"tmap-flash-message tmap-warning\">\n   Tiddler already exists! Use another title or click\n   \"<<backButtonText>>\" to cancel your edit.\n  </div>\n  </$list>\n  \n  <div class=\"tmap-modal-editor\">\n    <table class=\"tmap-config-table\">\n      <tr class=\"tmap-template-select\">\n        <td>Template</td>\n        <td>\n          <$select\n              tiddler=<<temp>>\n              field=\"template\">\n            <option value=\"\"></option>\n            <$list filter=<<tmap \"option\" \"selector.allPotentialNodes\">>>\n            <option><$view field=\"title\" /></option>\n            </$list> \n          </$select>\n          <$button>Load\n            <$action-sendmessage\n                $message=\"tmap:tm-clear-tiddler\"\n                keep=\"draft.title\"\n                title=<<output>> />\n            <$list filter=\"[<temp>get[template]]\" variable=\"template\">\n            <$action-sendmessage\n                $message=\"tmap:tm-merge-tiddlers\"\n                tiddlers=<<outputAndTemplate>>\n                output=<<output>> />\n            <$action-deletefield $tiddler=<<output>> tmap.id tmap.edges />\n            </$list>\n          </$button>\n       </td>\n       <td></td>\n      </tr>\n    </table>\n    <$importvariables filter=\"[all[tiddlers+shadows]prefix[$:/core/macros/]]\">\n      <$set name=\"currentTiddler\" value=<<output>>>\n        <$transclude tiddler=\"$:/core/ui/EditTemplate\" mode=\"block\" />\n      </$set>\n    </$importvariables>\n  </div>\n\\end\n\n\\define search()\n<p>Add an existing tiddler to the map or create a new one.</p>\n<table id=\"tmap-search-table\">\n  <tr>\n    <td><b>Title:</b></td>\n    <td>\n      <$edit-text\n          tiddler=<<output>>\n          field=\"draft.title\"\n          focus=\"true\"\n          type=\"text\"\n          tag=\"input\"\n          default=\"\" />\n      <$list filter=\"[<output>get[draft.title]!is[tiddler]]\">\n      <$button\n          tooltip=\"The tiddler does not exist yet and you may edit it\n                   before it is added to the map\">\n        {{$:/core/images/edit-button}}\n        <$action-setfield $tiddler=<<temp>> more=\"true\" />\n      </$button> <sup>[1]</sup>\n      </$list>\n    </td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>\n      <$set name=\"term\" value={{!!draft.title}}>\n      <ul class=\"tmap-small-list\">\n        <$list filter=\"[search:title<term>!is[system]!has[draft.of]]\">\n        <li>\n          <$button class=\"tc-btn-invisible tmap-link\">\n            <$view field=\"title\" />\n            <$action-setfield $tiddler=<<output>> draft.title={{!!title}} />\n          </$button>\n        </li>\n        </$list>\n      </ul>\n      </$set>\n    </td>\n  </tr>\n</table>\n\n<$list filter=\"[<output>get[draft.title]!is[tiddler]]\">\n<hr />\n<sup>[1]</sup>\n<small>\n  The tiddler does not exist yet and you may edit it\n  before it is added to the map\n</small>\n</$list>\n\\end\n\n<$list filter=\"[<temp>!has[more]]\" variable=\"item\"><<search>></$list>\n<$list filter=\"[<temp>has[more]]\" variable=\"item\"><<editor>></$list>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/renameView": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/renameView",
            "subtitle": "{{$:/core/images/tag-button}} Please specify a view name",
            "text": "\\rules except wikilink\n\n''Name:''\n<$edit-text focus=\"true\" tiddler=<<output>> field=\"text\" type=\"text\" tag=\"input\" default=\"\"\n            class=\"tmap-trigger-field tmap-triggers-ok-button-on-enter\" />\n\nNote that ''<<count>>'' tiddlers are referencing this view.\n\n<$reveal type=\"nomatch\" text=\"0\" default=<<count>>>\n  \nRenaming the view will cause the reference to be invalid.\nIt is recommended to first remove the tiddlymap widgets in\nthe tiddlers listed below or change their view attributes\naccordingly.\n\n''References''\n\n<ul>\n<$list filter=<<filter>> variable=\"item\">\n  <li><$text text=<<item>> /></li>\n</$list>\n</ul>\n  \n</$reveal>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/saveCanvas": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/saveCanvas",
            "subtitle": "{{$:/core/images/options-button}} Save a snapshot image of view \"<<view>>\"",
            "text": "\\rules except wikilink\n\n\\define preview()\n<div class=\"tmap-save-canvas-preview\">\n  <$transclude tiddler=<<snapshot>> /><br />\n  Measures: <<width>> × <<height>>\n</div>\n\\end\n\n<table class=\"tmap-config-table\">\n<!--\n  <<tmap-row type:\"input-text\"\n      title:\"Name\"\n      field:\"name\">\n-->\n<$macrocall $name=\"tmap-row\"\n    type=\"input-text\"\n    title=\"Name\"\n    field=\"name\"\n    descr=<<preview>> />\n</table>\n\n<fieldset><legend>Options</legend>\n  <table class=\"tmap-config-table\">\n    <<tmap-row type:\"input-radio\"\n        title:\"Action\"\n        field:\"action\" \n        selectFilter:\"[[download|Download]]\n                      [[wiki|Save in wiki]]\n                      [[placeholder|Use as placeholder for this view]]\"\n        descr:\"Save the image by downloading it to your computer or\n               save it as a tiddler in your wiki.<br /><br />\n               A third option is to make TiddlyMap use this image as\n               placeholder for the current view. Placeholders are used\n               when tiddlers are exported in form of static html\n               or when editing a tiddler while having the preview\n               shown. In this case the title input is ignored.\">>\n  </table>\n</fieldset>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/getEdgeType": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/getEdgeType",
            "subtitle": "{{$:/plugins/felixhayashi/tiddlymap/icon}} Edge type specification",
            "text": "\\rules except wikilink\n\\rules except underscore\n\n\\define filter() $(allEdgeTypes)$ +[search:title[$(term)$]]\n\n\\define badge(color, label, tooltip)\n<span style=\"background: $color$\" title=\"$tooltip$\">$label$</span>\n\\end\n\n\\define badges()\n<$tiddler tiddler={{!!text}}>\n<$set name=\"id\" value=<<tmap \"getETyId\" \"$(viewNS)$\">>>\n<$set name=\"isVisible\" value=<<tmap \"isETyVisible\" \"$(viewNS)$\" \"$(eTyFilter)$\">>>\n<div class=\"tmap-badges\">\n  <span\n      style=\"background: darkslategray\"\n      title=\"Your input translates into this id.\">\n  <<id>>\n  </span>\n  <$list filter=\"[<isVisible>regexp[true]]\">\n    <<badge \"green\" \"visible\" \"Matches your view's filter\">>\n  </$list>\n  <$list filter=\"[<isVisible>regexp[false]]\">\n    <<badge \"red\" \"not visible\" \"Doesn't match your view's filter\">>\n  </$list>\n  <$list filter=\"[<id>!regexp[^tmap:unknown$]]\" variable=\"item\">\n    <$list filter=\"[<id>regexp[^_]]\">\n      <<badge \"purple\" \"private\" \"Not shown in other views per default\">>\n    </$list>\n    <$list filter=\"[<id>regexp[.+:.+]]\">\n      <<badge \"orange\" \"namespace\" \"This type is prefixed with a proper namespace\">>\n    </$list>\n  </$list>  \n</div>\n</$set>\n</$set>\n</$tiddler>\n\\end\n\n\\define search()\n<p>\n  You are about to connect \"<$text text=\"$(fromLabel)$\" />\"\n  with \"<$text text=\"$(toLabel)$\" />\". Please specify a type.\n</p>\n<table id=\"tmap-search-table\">\n  <tr>\n    <td><b>Type:</b></td>\n    <td>\n      <$edit-text\n          focus=\"true\"\n          field=\"text\"\n          type=\"text\"\n          tag=\"input\"\n          default=\"\"\n          class=\"tmap-trigger-field tmap-triggers-ok-button-on-enter\" />\n      <<badges>>\n    </td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>\n      <$set name=\"term\" value={{!!text}}>\n      <$set name=\"allEdgeTypes\" value=<<tmap \"option\" \"selector.allEdgeTypesById\">>>\n      <ul class=\"tmap-small-list\">\n        <$list filter=<<filter>>>\n        <li>\n          <$button class=\"tc-btn-invisible tmap-link\">\n            <$view field=\"title\" />\n            <$action-setfield $tiddler=<<output>> text={{!!title}} />\n          </$button>\n        </li>\n        </$list>\n      </ul>\n      </$set>\n      </$set>\n    </td>\n  </tr>\n</table>\n\\end\n\n<$list filter=\"[<temp>!has[more]]\" variable=\"item\"><<search>></$list>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog",
            "text": "\\rules except wikilink\n\n<div class=<<classes>>>\n<$importvariables\n    filter=\"[[$:/plugins/felixhayashi/tiddlymap/misc/macros]]\n            [[$:/core/macros/tabs]]\">\n<$transclude tiddler=<<template>> mode=\"block\" />\n</$importvariables>\n</div>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/welcome": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/welcome",
            "subtitle": "{{$:/core/images/info-button }} Welcome",
            "buttons": "ok",
            "text": "\\rules except wikilink\n\n<$list filter=\"[[$:/plugins/felixhayashi/topstoryview]]\">\n<div class=\"tmap-flash-message tmap-success\">\n  TiddlyMap configured your wiki for optimal use. Please save &amp;\n  restart after closing this dialog.\n</div>\n</$list>\n\nIt seems that you freshly installed TiddlyMap.\n\n* In case you need any help, please consult the [[online docs|http://tiddlymap.org#Documentation]] first.\n* You are welcome to create an [[issue|https://github.com/felixhayashi/TW5-TiddlyMap/issues]] at GitHub for any bug you discover.\n* Make sure to revisit the [[demo site|http://tiddlymap.org]] to see whether your version is up-to-date.\n* If you like TiddlyMap, please give it a star at [[GitHub|https://github.com/felixhayashi/TW5-TiddlyMap]] or tell your friends about it :)\n\nHave a great time.\n\n---\n\n''Please note:'' TiddlyMap is distributed under the [[BSD 2-Clause License|http://opensource.org/licenses/BSD-2-Clause]], which belongs to the same license family, as the license used by TiddlyWiki. By using this plugin you agree to the product's [[License Terms|https://github.com/felixhayashi/TW5-TiddlyMap/blob/master/LICENSE]]."
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/widgetCodeGenerator": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/widgetCodeGenerator",
            "subtitle": "{{$:/core/images/permalink-button}} Widget Code Generator",
            "buttons": "close",
            "text": "\\rules except wikilink\n\n<div class=\"tmap-flash-message tmap-info\">\n  Use the code below to embed a view in a tiddler.\n</div>\n\n<pre style=\"white-space: normal;\">\n&lt;$tmap\n\n<$list filter=\"[<output>has[var.view]]\">\n  view=\"<$view field='var.view' />\"</$list>\n<$list filter=\"[<output>field:var.click-to-use[true]]\">\n  click-to-use=\"true\"</$list>\n<$list filter=\"[<output>has[var.editor]]\">\n  editor=\"<$view field='var.editor' />\"</$list>\n<$list filter=\"[<output>has[var.width]]\">\n  width=\"<$view field='var.width' />\"</$list>\n<$list filter=\"[<output>has[var.height]]\">\n  height=\"<$view field='var.height' />\"</$list>\n<$list filter=\"[<output>has[var.class]]\">\n  class=\"<$view field='var.class' />\"</$list>\n<$list filter=\"[<output>field:var.show-buttons[false]]\">\n  show-buttons=\"false\"</$list>\n<$list filter=\"[<output>has[var.design]]\">\n  design=\"<$view field='var.design' />\"</$list>&gt;&lt;/$tmap&gt;\n</pre>\n\n<fieldset>\n  <legend>Parameters</legend> \n  <table class=\"tmap-config-table\">\n      <$macrocall type=\"input-select\"\n          $name=\"tmap-row\"\n          title=\"View\"\n          field=\"var.view\"\n          nochoice=\" \"\n          selectFilter=<<tmap \"option\" \"selector.allViewsByLabel\">>\n          descr=\"The view to bind the wiedget to\" />\n      <<tmap-row type:\"input-select\"\n          title:\"Editor bar\"\n          field:\"var.editor\"\n          selectFilter:\"[[|Hidden]]\n                        [[vis|Simple]]\n                        [[advanced|Advanced]]\"\n          descr:\"Whether the widget should act as an editor or not.\">>\n      <<tmap-row type:\"input-select\"\n          title:\"Design\"\n          field:\"var.design\"\n          selectFilter:\"[[|Normal]]\n                        [[plain|Plain]]\"\n          descr:\"Usually a header is displayed and borders. Plain\n                 design will only show the mere graph.\">>\n      <<tmap-row type:\"input-text\"\n          title:\"Height\"\n          field:\"var.height\"\n          descr:\"Graph's height in css units. Defaults to '300px'.\">>\n      <<tmap-row type:\"input-text\"\n          title:\"Width\"\n          field:\"var.width\"\n          descr:\"Graph's width in css units. Defaults to '100%'.\">>\n      <<tmap-row type:\"input-text\"\n          title:\"Class\"\n          field:\"var.class\"\n          descr:\"A custom class to apply your own css.\">>\n      <<tmap-row type:\"input-checkbox\"\n          title:\"Click to use\"\n          field:\"var.click-to-use\"\n          default:\"false\"\n          descr:\"A click is needed to enable the graph.\">>\n      <<tmap-row type:\"input-checkbox\"\n          title:\"Show buttons\"\n          field:\"var.show-buttons\"\n          default:\"true\"\n          descr:\"Show or hide the graph's navigation buttons.\">>\n  </table>\n</fieldset>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialogFooter/close": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialogFooter/close",
            "text": "\\rules except wikilink\n\n<$button class=\"tmap-dialog-button tmap-close-button\" tooltip=\"Close this dialog\">Close\n\n  <!-- trigger dialog callback -->\n  <$action-setfield $tiddler=<<result>> text=\"1\" />\n                       \n</$button>\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialogFooter/ok": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialogFooter/ok",
            "text": "\\rules except wikilink\n\n<$button class=\"tmap-dialog-button tmap-ok-button\" tooltip=\"Confirm dialog\">OK\n\n  <!-- trigger dialog callback -->\n  <$action-setfield $tiddler=<<result>> text=\"1\" />\n                       \n</$button>\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialogFooter/ok_cancel": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialogFooter/ok_cancel",
            "text": "\\rules except wikilink\n\n<$transclude tiddler=\"$:/plugins/felixhayashi/tiddlymap/dialogFooter/ok\" mode=\"inline\" />\n<$button class=\"tmap-dialog-button tmap-cancel-button\" tooltip=\"Close dialog without saving\">Cancel\n  <!-- trigger dialog callback -->\n  <$action-setfield $tiddler=<<result>> text=\"\" />\n</$button>\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialogFooter/ok_suppress": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialogFooter/ok_suppress",
            "text": "\\rules except wikilink\n\n<$set name=\"currentTiddler\" value=<<title>> >\n\n<$checkbox field=\"suppress\" checked=\"1\" unchecked=\"0\" default=\"0\"> Do not show this dialog again</$checkbox>\n<$button class=\"tmap-dialog-button tmap-ok-button\" tooltip=\"Confirm this dialog\">OK\n\n  <!-- trigger dialog callback -->\n  <$action-setfield $tiddler=<<result>> text=\"1\" />\n  \n  <!-- suppress dialog in the future -->\n  <$action-sendmessage $message=\"tmap:tm-suppress-dialog\"\n                       dialog=<<templateId>>\n                       suppress={{!!suppress}} />\n                       \n</$button>\n\n</$set>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialogFooter": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialogFooter",
            "text": "\\rules except wikilink\n\n\\define footer() $:/plugins/felixhayashi/tiddlymap/dialogFooter/$(buttons)$\n\n<$transclude tiddler=<<footer>> />\n\n<!-- we need this button to be able to close a tiddler from outside programmatically -->\n<$button class=\"tmap-hidden-close-button\" message=\"tm-close-tiddler\" />"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialogFooter/element_type_manager": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialogFooter/element_type_manager",
            "text": "\\rules except wikilink\n\n<$button\n    class=\"tmap-dialog-button tmap-save-button\"\n    tooltip=\"Save the current changes\">Save\n  <$action-sendmessage\n      $message=\"tmap:tm-save-type-form\"\n      mode=<<mode>>\n      output=<<output>> />\n</$button>\n<$button\n    class=\"tmap-dialog-button tmap-cancel-button\"\n    tooltip=\"Cancel the most resent changes and exit\">Quit\n  <$action-setfield $tiddler=<<result>> text=\"1\" />\n</$button>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager/deleteType": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager/deleteType",
            "caption": "Removal",
            "text": "\\rules except wikilink\n\n\\define manage-edge-types()\n  <$macrocall $name=\"tmap-row\"\n      type=\"input-checkbox\"\n      title=\"Delete type\"\n      field=\"temp.deleteType\"\n      default={{!id}}\n      readonly={{!!temp.idImmutable}}\n      descr=\"If you want to delete this type, set this to true\n             and click the save button afterwards. Predefined system\n             types cannot be deleted.\" note=\"Consequently, all edges\n             of this type will be deleted.\" />\n\\end\n\n\\define manage-node-types()\n  <$macrocall $name=\"tmap-row\"\n      type=\"input-checkbox\"\n      title=\"Delete type\"\n      field=\"temp.deleteType\"\n      default={{!id}}\n      readonly={{!!temp.idImmutable}}\n      descr=\"If you want to delete this type, set this to true and\n             click the save button afterwards. Predefined system\n             types cannot be deleted.\" />\n\\end\n\n<table class=\"tmap-config-table\"><$macrocall $name=<<mode>> /></table>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager/description": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager/description",
            "caption": "Description",
            "text": "\\rules except wikilink\n\n\\define manage-edge-types()\n  <<tmap-row type:\"input-textarea\"\n      title:\"Description\"\n      field:\"description\"\n      descr:\"An optional description for this type. The\n             description will be displayed as tooltip when\n             moving the mouse over an edge of this type.\">>\n\\end\n\n\\define manage-node-types()\n  <<tmap-row type:\"input-textarea\"\n      title:\"Description\"\n      field:\"description\" \n      descr:\"An optional description for this type.\">>\n\\end\n\n<table class=\"tmap-config-table\">\n  <$macrocall $name=<<mode>> />\n</table>\n\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager/generalSettings": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager/generalSettings",
            "caption": "General",
            "text": "\\rules except wikilink\n\n\\define manage-edge-types()\n  <<tmap-row type:\"input-text\"\n      title:\"Label\"\n      field:\"label\" \n      descr:\"An optional alias used as edge-label.\">>\n  <<tmap-row type:\"input-checkbox\"\n      title:\"Show label\"\n      field:\"show-label\"\n      default:\"true\"\n      descr:\"If unchecked, no edge label will be displayed.\">>\n\\end\n\\define manage-node-types()\n  <$list filter=\"[<currentTiddler>!field:id[tmap:neighbour]]\">\n  <<tmap-row type:\"input-textarea\"\n      title:\"Scope\"\n      field:\"scope\" \n      descr:\"A filter expression that defines, which nodes inherit\n             this node-type and its style.\">>\n  </$list>\n  <$macrocall type=\"input-select\"\n      $name=\"tmap-row\" \n      title=\"Priority\"\n      field=\"priority\"\n      selectFilter=<<tmap \"scale\" \"100\">>\n      descr=\"When a type has a a higher priority than another type,\n             its style will override the other style\" />\n\\end\n\n<table class=\"tmap-config-table\">\n  <$macrocall\n    $name=\"tmap-row\"\n    title=\"Identifier\"\n    field=\"temp.newId\"\n    type=\"input-text\"\n    default={{!!id}}\n    readonly={{!!temp.idImmutable}}\n    descr=\"A unique identifier\"\n  />\n  <$macrocall $name=<<mode>> />\n</table>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager/overview": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager/overview",
            "caption": "Overview",
            "text": "\\rules except wikilink\n\n\\define date(f) <$view field=$f$ format=\"date\" template=\"DDth mmm hh:mm:ss\"/>\n\n! <$link to={{!!typeTRef}}><$view field=\"id\" /></$link>\n\n<table class=\"tmap-key-value-table\">\n  <tr>\n    <th align=\"left\">Created on</th>\n    <td>\n      <<date \"created\">>\n    </td>\n  </tr>\n  <tr>\n    <th align=\"left\">Modified on</th>\n    <td><<date \"modified\">></td>\n  </tr>\n  <tr>\n    <th align=\"left\">Usage count</th>\n    <td>\n      <span class=\"tmap-edge-type-specific\">\n        <$view field=\"temp.usageCount\" />\n      </span>\n      <span class=\"tmap-node-type-specific\">\n        <$count filter={{!!scope}}>0</$count>\n      </span>\n    </td>\n  </tr>\n</table>\n\n<$view field=\"description\">//No description available//</$view>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager/styling": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager/styling",
            "caption": "Styling",
            "text": "\\rules except wikilink\n\n\\define url()\n  <$set\n      filter=\"[<mode>prefix[manage-edge-types]]\"\n      name=\"module\"\n      value=\"edges\"\n      emptyValue=\"nodes\">\n    [[visjs.org|http://visjs.org/docs/network/$(module)$]]\n  </$set>\n\\end\n\n<fieldset class=\"tmap-node-type-specific\">\n  <legend>Icon Settings</legend>\n  <table class=\"tmap-config-table\">\n    <<tmap-row type:\"input-text\"\n        title:\"TW-icon\"\n        field:\"tw-icon\"\n        descr:\"A tiddlywiki image reference.\n               For example '$:/core/icon' for Movotun Jack.\">>\n    <<tmap-row type:\"input-text\"\n        title:\"FA-icon\"\n        field:\"fa-icon\"\n        descr:\"A Font Awesome icon code.\n               For example 'f206' for the bicycle symbol.\">>\n  </table>\n</fieldset>\n\n<fieldset><legend>Visjs styles</legend>\n  <div class=\"tmap-flash-message tmap-info\">\n     All visjs options below are documented at <<url>>.\n  </div>\n  <div class=\"tmap-flash-message tmap-info\">\n     Only config items that you actually changed have an effect on\n     the graph. Other options are visible, yet, inactive.\n  </div>\n  <$tmap-config\n      mode=<<mode>>\n      inherited=\"vis-inherited\"\n      extension=\"style\" />\n</fieldset>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager",
            "subtitle": "{{$:/core/images/tag-button}} <<topic>>",
            "buttons": "element_type_manager",
            "classes": "tmap-remove-top-space",
            "text": "\\rules except wikilink\n\n\\define defaultTab() \n$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager/overview\n\\end\n\n\\define settingsTab()\n$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager/generalSettings\n\\end\n\n\\define tabsFilter()\n[all[shadows]prefix[$:/plugins/felixhayashi/tiddlymap/dialog/MapElementTypeManager/]]\n\\end\n\n\\define searchFilter()\n$(searchSelector)$\n+[sort[title]nsort[priority]]\n+[removeprefix<typeRootPath>removeprefix[/]]\n+[search:title{$:/temp/tmap/MapElementTypeSearch}]\n\\end\n\n\\define managerClass() tmap-$(mode)$\n\n\\define typePath() $(typeRootPath)$/$(id)$\n\n<div id=\"tmap-element-type-manager\" class=<<managerClass>>>\n  <div>\n    <div class=\"tmap-searchbar\">\n      <$edit-text\n          focus=\"true\"\n          tiddler=\"$:/temp/tmap/MapElementTypeSearch\"\n          type=\"text\"\n          tag=\"input\"\n          default=\"\" />\n      <$list filter=\"[{$:/temp/tmap/MapElementTypeSearch}regexp[.+]]\n                     +[addprefix[/]]\n                     +[addprefix<typeRootPath>]\n                     +[!is[tiddler]!is[shadow]]\">\n      <$button tooltip=\"Create a new type of this name\">\n      {{$:/core/images/new-button}}\n        <$action-setfield $tiddler=\"$:/temp/tmap/MapElementTypeSearch\" text=\"\" />\n        <$action-sendmessage\n            $message=\"tmap:tm-create-type\"\n            mode=<<mode>> id={{$:/temp/tmap/MapElementTypeSearch}}\n            output=<<output>> />\n      </$button>\n      </$list>\n          \n    </div>\n    <ul>\n      <$list\n          filter=<<searchFilter>>\n          emptyMessage=<<noTypeFound>>\n          variable=\"id\">\n      <li>\n        <span class=\"tmap-ranking tmap-node-type-specific\">\n          # <$view tiddler=<<typePath>> field=\"priority\">1</$view>\n        </span>\n        <$button class=\"tc-btn-invisible tmap-link\"><<id>>\n          <$action-setfield\n              $tiddler=<<qualify \"$:/state/tabs/MapElementTypeManager\">>\n              text=<<defaultTab>> />\n          <$action-sendmessage\n              $message=\"tmap:tm-load-type-form\"\n              id=<<id>>\n              mode=<<mode>>\n              output=<<output>> />\n        </$button>\n      </li>\n      </$list>\n    </ul>\n  </div>\n  <div>\n    <$reveal type=\"nomatch\" text=\"\" default={{!!id}} >\n      <$macrocall\n          $name=\"tabs\"\n          default=<<defaultTab>>\n          state=\"$:/state/tabs/MapElementTypeManager\"\n          tabsList=<<tabsFilter>> />\n    </$reveal>\n    <$reveal type=\"match\" text=\"\" default={{!!id}} >\n      <div class=\"tmap-flash-message tmap-info\">\n        Please select a type from the list or create a new one by\n        entering the type name in the search field on the left.\n      </div>\n      <div class=\"tmap-flash-message tmap-info tmap-node-type-specific\">\n        The number next to the node-type label represents it's priority.\n      </div>\n    </$reveal>\n  </div>\n</div>"
        },
        "$:/plugins/felixhayashi/tiddlymap/misc/advancedEditorBar": {
            "title": "$:/plugins/felixhayashi/tiddlymap/misc/advancedEditorBar",
            "text": "\\rules except wikilink\n\\define showEdgeField() show-$(curEdgeId)$\n\n<!-- === View Switcher ========================================== -->\n\n<div class=\"tmap-menu-bar\">\n  View:\n  <$reveal type=\"match\" text=\"false\" default=<<isViewBound>> >\n    <$select\n        tiddler=<<viewHolder>>\n        field=\"text\"\n        default=<<viewLabel>> >\n      <$list filter=<<tmap \"option\" \"selector.allViewsByLabel\">> >\n        <option value={{!!title}}>\n          <$view tiddler={{!!title}} field=\"title\" />\n        </option>\n      </$list>\n    </$select>\n  </$reveal>\n  <$reveal type=\"match\" text=\"true\" default=<<isViewBound>> >\n    <b><<viewLabel>></b>\n  </$reveal>\n\n<!-- === Menu =================================================== -->\n\n  <$button\n      popup=<<qualify \"$:/temp/menu\">>\n      tooltip=\"Open the Menu\">{{$:/core/images/menu-button}}\n  </$button>\n  \n  <$reveal type=\"popup\" position=\"below\" state=<<qualify \"$:/temp/menu\">> >\n    <div class=\"tc-drop-down\">\n      <a href=\"http://tiddlymap.org#Documentation\" target=\"_blank\">\n        {{$:/core/images/info-button}} Open online help\n      </a>\n      <$button class=\"tc-btn-invisible\" message=\"tmap:tm-create-view\">\n        {{$:/core/images/new-button}} Create new view\n      </$button>\n      <$button class=\"tc-btn-invisible\" message=\"tmap:tm-generate-widget\">\n        {{$:/core/images/permalink-button}} Grab widget code\n      </$button>\n      <div class=\"tmap-list-separator\">Global configurations:</div>\n      <$button class=\"tc-btn-invisible\" message=\"tmap:tm-configure-system\">\n        {{$:/core/images/options-button}} Configure TiddlyMap\n      </$button>\n      <$button class=\"tc-btn-invisible\" message=\"tmap:tm-manage-edge-types\">\n        <span class=\"tmap-unicode-icon\">◭</span> Manage edge-types\n      </$button>\n      <$button class=\"tc-btn-invisible\" message=\"tmap:tm-manage-node-types\">\n        <span class=\"tmap-unicode-icon\">▢</span> Manage node-types\n      </$button>\n      <div class=\"tmap-view-actions\">\n        <div class=\"tmap-list-separator\">Actions for this view:</div>\n        <$button class=\"tc-btn-invisible\" message=\"tmap:tm-edit-view\">\n          {{$:/core/images/options-button}} Configure view\n        </$button>\n        <$button class=\"tc-btn-invisible\" message=\"tmap:tm-store-position\">\n          {{$:/core/images/globe}} Save positions\n        </$button>\n        <$button class=\"tc-btn-invisible\" message=\"tmap:tm-rename-view\">\n          {{$:/core/images/tag-button}} Rename view\n        </$button>\n        <$button class=\"tc-btn-invisible\" message=\"tmap:tm-delete-view\">\n          {{$:/core/images/delete-button}} Delete view\n        </$button>\n      </div>\n    </div>\n  </$reveal>\n  \n<!-- === Neighbourhood menu ===================================== -->\n\n  <$reveal\n      type=\"match\"\n      text=\"true\"\n      default=<<tmap \"option\"\n                     \"config.sys.editorMenuBar.showNeighScopeButton\">>>\n    <$button\n        class=<<neighScopeBtnClass>>\n        tooltip=\"Change the neighbourhood scope\"\n        popup=<<qualify \"$:/temp/neighScope\">>>☀\n    </$button>\n  </$reveal>\n  \n  <$reveal type=\"popup\" position=\"below\" state=<<qualify \"$:/temp/neighScope\">> >\n    <div class=\"tc-drop-down\">\n      <div class=\"tmap-list-separator\">Neighbourhood scope</div>\n      <$button class=\"tc-btn-invisible\">None\n        <$action-setfield\n            $tiddler=<<viewRoot>>\n            config.neighbourhood_scope=\"\" />\n      </$button>\n      <$list filter=\"[[1|1 step distance]]\n                     [[2|2 step distance]]\n                     [[3|3 step distance]]\n                     [[4|4 step distance]]\n                     [[5|5 step distance]]\">\n        <$button class=\"tc-btn-invisible\">\n          <<tmap \"splitAndSelect\" \"|\" \"1\">>\n          <$action-setfield\n              $tiddler=<<viewRoot>>\n              config.neighbourhood_scope=<<tmap \"splitAndSelect\" \"|\" \"0\">> />\n        </$button>\n      </$list>\n      <$button class=\"tc-btn-invisible\">No limit\n        <$action-setfield\n            $tiddler=<<viewRoot>>\n            config.neighbourhood_scope=\"100\" />\n      </$button>\n      <div class=\"tmap-list-separator\">Neighbourhood traversal</div>\n      <$radio field=\"config.neighbourhood_directions\" value=\"in\"> Incoming</$radio><br />\n      <$radio field=\"config.neighbourhood_directions\" value=\"out\"> Outgoing</$radio><br />\n      <$radio field=\"config.neighbourhood_directions\" value=\"\"> Both</$radio>\n      <div class=\"tmap-list-separator\">Other</div>\n      <$checkbox field=\"config.show_inter_neighbour_edges\"\n          checked=\"true\" unchecked=\"false\"> Inter-neighbour edges</$checkbox>\n      \n    </div>\n  </$reveal>\n  \n<!-- === Export menu ============================================ -->\n  \n  <$reveal\n      type=\"match\"\n      text=\"true\"\n      default=<<tmap \"option\"\n                     \"config.sys.editorMenuBar.showScreenshotButton\">>>\n    <$button\n        tooltip=\"Open the map-export menu\"\n        popup=<<qualify \"$:/temp/mapExport\">>>\n      {{$:/core/images/download-button}}\n    </$button>\n  </$reveal>\n  \n  <$reveal\n      type=\"popup\"\n      position=\"below\"\n      state=<<qualify \"$:/temp/mapExport\">>>\n    <div class=\"tc-drop-down\">\n    <$button\n        class=\"tc-btn-invisible\"\n        tooltip=\"Export the graph and all its elements\n                 in form of a JSON file\">\n        {{$:/core/images/permalink-button}} Save as JSON file\n      <$action-sendmessage\n          $message=\"tmap:tm-download-graph\"\n          view=<<viewLabel>> />\n    </$button>\n    <$button\n        class=\"tc-btn-invisible\"\n        tooltip=\"Create a png image to download or save it\n                 as image or view-placeholder in your wiki\">\n        {{$:/core/images/palette}} Save as png image\n      <$action-sendmessage $message=\"tmap:tm-save-canvas\" />\n    </$button>\n    </div>\n  </$reveal>\n    \n</div>"
        },
        "$:/plugins/felixhayashi/tiddlymap/misc/focusButton": {
            "title": "$:/plugins/felixhayashi/tiddlymap/misc/focusButton",
            "text": "\\define filter() [list[$:/temp/tmap/nodes/$(viewLabel)$]search:title{$:/temp/tmap/bar/search}]\n\\define concat(str) $str$\n\n\\define state() $(widgetPopupsPath)$/focus\n\n<div class=\"tmap-focus-button\">\n  <$reveal type=\"match\" state=<<state>> text=\"\">\n    <$button\n        tooltip=\"Zoom on a specific node\"\n        class=<<tv-config-toolbar-class>>>{{$:/core/images/advanced-search-button}}\n     <$action-setfield $tiddler=\"$:/temp/tmap/bar/search\" text=\"\" />\n     <$action-setfield $tiddler=<<state>> text=\"1\" />\n    </$button>\n  </$reveal>\n  <$reveal type=\"nomatch\" state=<<state>> text=\"\">\n    <$button\n        tooltip=\"Close zoom popup\"\n        class=<<tv-config-toolbar-class>>>{{$:/core/images/advanced-search-button}}\n     <$action-setfield $tiddler=<<state>> text=\"\" />\n    </$button>\n    <div class=\"tmap-search-dropdown\">\n      <div class=\"tc-drop-down\">\n        <$edit-text\n            focus=\"true\"\n            tiddler=\"$:/temp/tmap/bar/search\"\n            field=\"text\"\n            type=\"text\"\n            tag=\"input\"\n            default=\"\" />\n        <small><$count filter=<<filter>> /> results</small>\n        <hr />\n        <div class=\"tmap-very-small-list\">\n          <$list filter=<<filter>>\n              variable=\"item\"\n              emptyMessage=\"//No results//\">\n            <$button\n                class=\"tc-btn-invisible\"\n                message=\"tmap:tm-focus-node\"\n                param=<<item>>>\n              <$view tiddler=<<item>> field=\"title\" />\n            </$button>\n          </$list>\n        </div>\n      </div>\n    </div>\n  </$reveal>\n</div>"
        },
        "$:/plugins/felixhayashi/tiddlymap/hook/editor": {
            "caption": "Map",
            "tags": "$:/tags/SideBar",
            "title": "$:/plugins/felixhayashi/tiddlymap/hook/editor",
            "text": "\\define width() calc(100% - 15px)\n\n<div class=\"tmap-mobile-editor\">\n  <div class=\"tmap-flash-message tmap-warning\">\n    The editor is not displayed in mobile mode.\n  </div>\n</div>\n<div class=\"tmap-desktop-editor\">\n  <$tiddlymap\n    class=\"tmap-sidebar-map-editor\"\n    editor=\"advanced\"\n    object-id=\"main_editor\"\n    click-to-use=\"false\">\n  </$tiddlymap>\n</div>"
        },
        "$:/plugins/felixhayashi/tiddlymap/hook/liveTab": {
            "title": "$:/plugins/felixhayashi/tiddlymap/hook/liveTab",
            "caption": "Live",
            "text": "\\define width() calc(100% - 15px)\n\n<div class=\"tmap-mobile-editor\">\n  <div class=\"tmap-flash-message tmap-warning\">\n    The live tab is not displayed in mobile mode.\n  </div>\n</div>\n<div class=\"tmap-desktop-editor\">\n  <$set name=\"view\"\n      filter=\"[{$:/temp/tmap/currentTiddler}get[tmap.open-view]]\"\n      emptyValue=<<tmap \"option\" \"config.sys.liveTab.fallbackView\">>>\n  <div>\n    <$tiddlymap\n        view=<<view>>\n        click-to-use=\"false\"\n        refresh-triggers=\"$:/temp/tmap/currentTiddler\"\n        object-id=\"live_tab\">\n    </$tiddlymap>\n  </div>\n  </$set> \n</div>"
        },
        "$:/plugins/felixhayashi/tiddlymap/misc/quickConnectButton": {
            "tags": "$:/tags/ViewToolbar",
            "title": "$:/plugins/felixhayashi/tiddlymap/misc/quickConnectButton",
            "description": "{{$:/language/Buttons/TiddlyMap/Hint}}",
            "caption": "{{$:/plugins/felixhayashi/tiddlymap/icon}} {{$:/language/Buttons/TiddlyMap/Caption}}",
            "text": "\\define buttonClass() $(tv-config-toolbar-class)$ $(additional-classes)$\n\n\\define nonExistentItem()\n<<item>> <span style=\"color: #9E9E9E\">(will be created)</span>\n\\end\n\n\\define noConnectionsMsg()\n<tr><td colspan=\"4\">//No connections found!//</td></tr>\n\\end\n\n\\define normalSearchFilter()\n[!is[system]!has[draft.of]search:title{$:/temp/quickConnectSearch}sortcs[title]limit[50]]\n\\end\n\n\\define regexSearchFilter()\n[!is[system]!has[draft.of]regexp{$:/temp/quickConnectSearch}sortcs[title]limit[50]]\n\\end\n\n\\define showButton(state)\n<$button set=\"$:/temp/tmap/state/popup/quickConnect\"\n         setTo=\"$state$\" tooltip={{$:/language/Buttons/TiddlyMap/Hint}} \n         aria-label={{$:/language/Buttons/TiddlyMap/Caption}}\n         class=<<buttonClass>>>\n<$list filter=\"[<tv-config-toolbar-icons>prefix[yes]]\">{{$:/plugins/felixhayashi/tiddlymap/icon}}</$list>\n<$list filter=\"[<tv-config-toolbar-text>prefix[yes]]\">\n<span class=\"tc-btn-text\"><$text text={{$:/language/Buttons/TiddlyMap/Caption}}/></span>\n</$list>\n</$button>\n\\end\n\n\\define searchResults()\n<td>\n  <$button tooltip=\"Create incoming edge\">\n    <<tmap \"option\" \"misc.arrows.in\">>\n    <$action-sendmessage $message=\"tmap:tm-create-edge\"\n                         from=<<item>>\n                         to=<<currentTiddler>>\n                         force=\"true\"\n                         label={{$:/temp/quickConnectSearch/type}}\n                         view={{$:/temp/quickConnectSearch/view}} />\n  </$button>\n</td>\n<td>\n  <$button tooltip=\"Create outgoing edge\">\n    <<tmap \"option\" \"misc.arrows.out\">>\n    <$action-sendmessage $message=\"tmap:tm-create-edge\"\n                         from=<<currentTiddler>>\n                         to=<<item>>\n                         force=\"true\"\n                         label={{$:/temp/quickConnectSearch/type}}\n                         view={{$:/temp/quickConnectSearch/view}} />\n  </$button>\n</td>\n<td>\n  <$list\n      filter=\"[<item>is[tiddler]]\"\n      emptyMessage=<<nonExistentItem>>>\n    <$view tiddler=<<item>> field=\"title\" />\n  </$list>\n</td>\n\\end\n\n\\define hidePopup()\n<$macrocall $name=\"showButton\" state=<<qualify>> />\n\\end\n\n\\define showPopup()\n<$set name=\"additional-classes\" value=\"tmap-active-button\">\n  <$macrocall $name=\"showButton\" state=\"\" />\n</$set>\n<$set\n    name=\"searchFilter\"\n    filter=\"[field:title[$:/state/tmap/tid-toolbar]has[re-filter]]\"\n    value=<<regexSearchFilter>>\n    emptyValue=<<normalSearchFilter>>>\n<div class=\"tmap-quick-connect tc-reveal tc-popup\">\n  <div class=\"tc-drop-down\">\n    <div class=\"title\">Create connection</div>\n    <table class=\"tmap-quick-connect-search-bar\">\n      <tr>\n        <td>Type:</td>\n        <td>\n          <$edit-text\n              tiddler=\"$:/temp/quickConnectSearch/type\"\n              field=\"text\"\n              type=\"text\"\n              tag=\"input\"\n              default=\"\" />\n          <$select tiddler=\"$:/temp/quickConnectSearch/type\" default=\"\">\n            <option></option>\n            <$list filter=<<tmap \"option\" \"selector.allEdgeTypesById\">>>\n              <option>{{!!title}}</option>\n            </$list>\n          </$select>\n        </td>\n      </tr>\n      <tr>\n        <td>Search:</td>\n        <td>\n          <$edit-text tiddler=\"$:/temp/quickConnectSearch\" type=\"text\" tag=\"input\" default=\"\"></$edit-text>\n          <$checkbox\n              tiddler=\"$:/state/tmap/tid-toolbar\"\n              field=\"re-filter\"\n              checked=\"1\"\n              unchecked=\"\"\n              default=\"\"> regexp\n          </$checkbox>\n<!--\n          <small>(<$count filter=<<searchFilter>> /> results)</small>\n-->\n        </td>\n      </tr>\n      </table>\n      <table class=\"tmap-create-connection-table\">\n      <tr>\n        <td colspan=\"2\">\n          <table class=\"tmap-very-small-list\">\n            <$list\n                filter=<<searchFilter>>\n                variable=\"item\">\n            <tr><<searchResults>></tr>\n            </$list>\n            <tr>\n            <$list filter=\"[{$:/temp/quickConnectSearch}regexp[.+]] -[is[tiddler]]\" variable=\"item\">\n              <<searchResults>>\n            </$list>\n            </tr>\n          </table>\n        </td>\n      </tr>\n    </table>\n    <div class=\"title\">Existing Connections</div>\n    <div class=\"tmap-quick-connect-existing-bar\">\n      <$select\n          tiddler=\"$:/state/tmap/tid-toolbar\"\n          field=\"direction\"\n          default=\"both\">\n          <option value=\"both\">both</option>\n          <option value=\"in\">incoming</option>\n          <option value=\"out\">outgoing</option>\n      </$select>\n      <$checkbox\n          tiddler=\"$:/state/tmap/tid-toolbar\"\n          field=\"filter.links\"\n          checked=\"-[[tw-body:link]]\"\n          unchecked=\"\"\n          default=\"\"> hide links\n      </$checkbox>\n    </div>\n    <table class=\"tmap-connection-table\">\n<!--\n    <tr>\n      <th></th>\n      <th>Tiddler</th>\n      <th>Type</th>\n      <th></th>\n    </tr>\n-->\n    \n    <$tmap-connections\n        filter=<<tmap mergeFields \"$:/state/tmap/tid-toolbar\" \"filter.\">>\n        direction={{$:/state/tmap/tid-toolbar!!direction}}\n        emptyMessage=<<noConnectionsMsg>>>\n      <tr>\n        <td title=<<direction>>><<directionSymbol>></td>\n        <td><$link to=<<neighbour>>><$view field=\"title\" /></$link></td>\n        <td><<edge.type>></td>\n        <td>\n          <$button\n              tooltip=\"Delete this connection\"\n              class=\"tc-btn-invisible\">{{$:/core/images/close-button}}\n            <$action-sendmessage $message=\"tmap:tm-remove-edge\"\n                id=<<edge.id>>\n                from=<<edge.from>>\n                to=<<edge.to>>\n                type=<<edge.type>> />\n          </$button>\n        </td>\n      </tr>\n    </$tmap-connections>\n    </table>   \n  </div>\n</div>\n</$set>\n\\end\n\n<$list filter=\"[all[current]is[tiddler]]\"><$list filter=\"[{$:/temp/tmap/state/popup/quickConnect}prefix<qualify>]\" variable=\"item\" emptyMessage=<<hidePopup>>><<showPopup>></$list></$list>"
        },
        "$:/plugins/felixhayashi/tiddlymap/media/fullscreen.png": {
            "title": "$:/plugins/felixhayashi/tiddlymap/media/fullscreen.png",
            "type": "image/png",
            "text": "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"
        },
        "$:/plugins/felixhayashi/tiddlymap/media/halfscreen.png": {
            "title": "$:/plugins/felixhayashi/tiddlymap/media/halfscreen.png",
            "type": "image/png",
            "text": "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"
        },
        "$:/plugins/felixhayashi/tiddlymap/icon": {
            "tags": "$:/tags/Image",
            "title": "$:/plugins/felixhayashi/tiddlymap/icon",
            "text": "<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   class=\"tc-image-tiddlymap-button tc-image-button\"\n   version=\"1.1\"\n   width=\"22pt\"\n   height=\"22pt\"\n   viewBox=\"0 0 128 128\">\n  <defs\n     id=\"defs4\">\n    <marker\n       refX=\"0\"\n       refY=\"0\"\n       orient=\"auto\"\n       id=\"Arrow1Lend\"\n       style=\"overflow:visible\">\n      <path\n         d=\"M 0,0 5,-5 -12.5,0 5,5 0,0 z\"\n         transform=\"matrix(-0.8,0,0,-0.8,-10,0)\"\n         id=\"path3850\"\n         style=\"fill-rule:evenodd;stroke:#000000;stroke-width:1pt\" />\n    </marker>\n    <marker\n       refX=\"0\"\n       refY=\"0\"\n       orient=\"auto\"\n       id=\"Arrow1Lstart\"\n       style=\"overflow:visible\">\n      <path\n         d=\"M 0,0 5,-5 -12.5,0 5,5 0,0 z\"\n         transform=\"matrix(0.8,0,0,0.8,10,0)\"\n         id=\"path3847\"\n         style=\"fill-rule:evenodd;stroke:#000000;stroke-width:1pt\" />\n    </marker>\n    <inkscape:path-effect\n       effect=\"skeletal\"\n       id=\"path-effect4329\" />\n    <inkscape:path-effect\n       effect=\"skeletal\"\n       id=\"path-effect4321\" />\n    <inkscape:path-effect\n       effect=\"skeletal\"\n       id=\"path-effect4315\" />\n    <inkscape:path-effect\n       effect=\"skeletal\"\n       id=\"path-effect4307\" />\n    <inkscape:path-effect\n       effect=\"skeletal\"\n       id=\"path-effect4299\" />\n    <inkscape:path-effect\n       effect=\"skeletal\"\n       id=\"path-effect4293\" />\n  </defs>\n  <g\n     transform=\"translate(0,-1024.5289)\"\n     id=\"layer1\">\n    <path\n       d=\"m 17.867073,4.5821643 a 3.7249374,3.7249374 0 1 1 -7.449875,0 3.7249374,3.7249374 0 1 1 7.449875,0 z\"\n       transform=\"matrix(-6.3328802,0,0,6.2775831,193.9581,1100.3667)\"\n       id=\"path4139-1-14\"\n       style=\"fill-opacity:1;fill-rule:nonzero\" />\n    <path\n       d=\"M 77.450496,1064.5069 C 58.849552,1025.9634 15.704158,1023.3858 2.8821873e-7,1034.558 L 0.02388589,1035.2674 C 24.502636,1022.2072 44.810725,1042.1507 60.163934,1074.112 z\"\n       id=\"path4337\"\n       style=\"fill-opacity:1;stroke-width:0.58181816;stroke-miterlimit:4;stroke-dasharray:none;marker-start:none;marker-end:none\" />\n    <path\n       d=\"m 12.878637,11.280739 4.75937,-2.7478243 4.759371,-2.7478236 0,5.4956479 0,5.495648 -4.759371,-2.747824 z\"\n       transform=\"matrix(4.6545455,0,0,4.6545455,-13.580429,1027.7638)\"\n       id=\"path3004\"\n       style=\"fill-opacity:1;fill-rule:nonzero\" />\n  </g>\n  <metadata\n     id=\"metadata3772\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:title></dc:title>\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n</svg>\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/media/surface.png": {
            "title": "$:/plugins/felixhayashi/tiddlymap/media/surface.png",
            "type": "image/png",
            "text": "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"
        },
        "$:/language/Buttons/TiddlyMap/Caption": {
            "title": "$:/language/Buttons/TiddlyMap/Caption",
            "text": "tiddlymap"
        },
        "$:/language/Buttons/TiddlyMap/Hint": {
            "title": "$:/language/Buttons/TiddlyMap/Hint",
            "text": "Toggle TiddlyMap actions"
        },
        "$:/plugins/felixhayashi/tiddlymap/misc/macros": {
            "title": "$:/plugins/felixhayashi/tiddlymap/misc/macros",
            "text": "\\define concat(str) $str$\n\n\\define input-text(field, index, default, readonly)\n  <$reveal type=\"match\" text=\"\" default=\"$readonly$\">\n    <$edit-text tiddler=<<output>> field=\"$field$\" index=\"$index$\" type=\"text\" tag=\"input\" default=\"$default$\" />\n  </$reveal>\n  <$reveal type=\"nomatch\" text=\"\" default=\"$readonly$\">\n    <input type=\"text\" value=\"$default$\" readonly=\"true\" disabled=\"true\" />\n  </$reveal>\n\\end\n\n\\define input-button(field, index, default, default, label:\"Proceed\")\n  <div class=\"tmap-button-wrapper\">\n  <$button>$label$\n    <$action-setfield $tiddler=<<output>> $field=\"$field$\" index=\"$index$\" $value=\"$default$\" />\n  </$button>\n  </div>\n\\end\n\n\\define input-textarea(field, index, default, default)\n  <$edit-text tiddler=<<output>> field=\"$field$\" index=\"$index$\" autoHeight=\"no\" type=\"text\" tag=\"textarea\" default=\"$default$\" />\n\\end\n\n\\define input-checkbox(field, index, readonly, default)\n  <$reveal type=\"match\" text=\"\" default=\"$readonly$\">\n    <$checkbox\n        tiddler=<<output>>\n        field=\"$field$\"\n        index=\"$index$\"\n        checked=\"true\"\n        unchecked=\"false\"\n        default=\"$default$\" />\n  </$reveal>\n  <$reveal type=\"nomatch\" text=\"\" default=\"$readonly$\">\n    <input type=\"checkbox\" value=\"$default$\" readonly=\"true\" disabled=\"true\" />\n  </$reveal>\n\\end\n\n\\define input-multi-checkbox(selectFilter, invert:\"no\", default)\n  <div class=\"tmap-no-stretch\">\n  <$list\n      filter=\"$selectFilter$\"\n      emptyMessage=\"– This list contains no items –\">\n    <$checkbox\n        tiddler=<<output>>\n        tag=<<tmap \"splitAndSelect\" \"|\" \"0\">>>\n      <$view\n          tiddler=<<tmap \"splitAndSelect\" \"|\" \"1\">>\n          field=\"title\" />\n    </$checkbox><br />\n  </$list>\n  </div>\n\\end\n\n\\define input-select(field, index, selectFilter, default, nochoice)\n  <$select\n      tiddler=<<output>>\n      field=\"$field$\"\n      index=\"$index$\"\n      default=\"$default$\">\n    <$set name=\"nochoice\" value=\"$nochoice$\">\n      <$list filter=\"[<nochoice>regexp[.+]]\">\n        <option value=\"\"><b><<nochoice>></b></option>\n      </$list>\n    </$set>\n    <$list filter=\"$selectFilter$\">\n      <option value=<<tmap \"splitAndSelect\" \"|\" \"0\">> >\n        <$view tiddler=<<tmap \"splitAndSelect\" \"|\" \"1\">> field=\"title\" />   \n      </option>\n    </$list> \n  </$select>\n\\end\n\n\\define input-radio(field, index, selectFilter, default)\n  <$list filter=\"$selectFilter$\">\n    <$radio\n        tiddler=<<output>>\n        field=\"$field$\"\n        index=\"$index$\"\n        value=<<tmap \"splitAndSelect\" \"|\" \"0\">>>\n      <<tmap \"splitAndSelect\" \"|\" \"1\">>\n    </$radio><br />\n  </$list>\n\\end\n\n\\define tmap-row(title, field, index, type, descr, note, label, default, readonly, reset, selectFilter, nochoice, invert)\n  <tr>\n    <td class=\"tmap-title\">$title$:</td>\n    <td>\n        <<$type$\n          field:\"$field$\"\n          index:\"$index$\"\n          readonly:\"$readonly$\"\n          default:\"$default$\"\n          label:\"$label$\"\n          invert:\"$invert$\"\n          selectFilter:\"$selectFilter$\"\n          nochoice:\"$nochoice$\" >>\n        <$reveal type=\"match\" text=\"true\" default=\"$reset$\">\n          <$button>reset\n            <$action-setfield $tiddler=<<output>> $field=\"$field$\" $index=\"$index$\" $value=\"$default$\" />\n          </$button>\n        </$reveal>\n    </td>\n    <td>\n      <span class=\"tmap-description\">$descr$</span>\n      <$reveal type=\"nomatch\" text=\"\" default=\"$note$\">\n        <div class=\"tmap-note\">''Note:'' $note$</div>\n      </$reveal>\n    </td>\n  </tr>\n\\end\n\n\\define visConfiguration(inheritedList,\n                         extensionField,\n                         styleName:\"style\")\n                         \n  <fieldset><legend>Visjs configurations ($styleName$)</legend>\n    <div class=\"tmap-flash-message tmap-info\">\n      Only config items that you actually changed have an effect on\n      the graph. Other options are visible, yet, inactive.\n    </div>\n    <$tmap-config\n        mode=\"manage-node-types\"\n        inherited=\"$inheritedList$\"\n        extension=\"$extensionField$\"\n    />\n  </fieldset>\n\\end"
        },
        "$:/plugins/felixhayashi/tiddlymap/misc/defaultViewHolder": {
            "title": "$:/plugins/felixhayashi/tiddlymap/misc/defaultViewHolder",
            "text": "Default"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/nodeTypes/tmap:neighbour": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/nodeTypes/tmap:neighbour",
            "description": "Neighbours are all nodes that are not part of the original set of nodes (\"matches\") but are connected (either outgoing or incoming) to a node of the original set.",
            "style": "{\"color\":\"#565656\"}"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Default/filter/edges": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Default/filter/edges"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Default/filter/nodes": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Default/filter/nodes"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Default": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Default",
            "config.physics_mode": "false",
            "isview": "true"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Live View/filter/edges": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Live View/filter/edges",
            "filter": "[prefix[$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes]]",
            "text": "\n\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Live View/filter/nodes": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Live View/filter/nodes",
            "filter": "[field:title{$:/temp/tmap/currentTiddler}]"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Live View": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Live View",
            "config.neighbourhood_scope": "1",
            "config.refresh-triggers": "$:/temp/tmap/currentTiddler",
            "config.physics_mode": "true",
            "config.vis": "{\"physics\":{\"forceAtlas2Based\":{\"springLength\":0,\"springConstant\":0.09}}}",
            "isview": "true"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Graph search/filter/nodes": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Graph search/filter/nodes",
            "filter": "[!is[system]search{$:/temp/search}] [!is[system]search:tags{$:/temp/search}] [!is[system]search:text{$:/temp/search}limit[10]]"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Graph search": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Graph search",
            "config.refresh-triggers": "$:/temp/search",
            "config.neighbourhood_scope": "1",
            "config.physics_mode": "true"
        }
    }
}