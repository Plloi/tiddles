author: Felix Küppers
core-version: >=5.1.5
created: 20151221210303356
dependents: 
description: HotZone – Be notified when tiddlers are scrolled into view
list: Configuration License Readme
plugin-type: plugin
released: 
source: https://github.com/felixhayashi/TW5-HotZone
title: $:/plugins/felixhayashi/hotzone
type: application/json
version: 0.0.3

{
    "tiddlers": {
        "$:/plugins/felixhayashi/hotzone/config.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/hotzone/config.js\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n(function(){\n    \n  /*jslint node: true, browser: true */\n  /*global $tw: false */\n  \"use strict\";\n\n  /***************************** CODE ******************************/\n\n  exports.config = {\n    \n    // Essential tiddlywiki classes that we depend on\n    classNames: {\n      \n      // contains all tiddlers and some other stuff\n      storyRiver: \"tc-story-river\",\n      \n      // wraps a tiddler and contains the title\n      tiddlerFrame: \"tc-tiddler-frame\",\n      \n      // elements with this class contain the title\n      tiddlerTitle: \"tc-title\"\n      \n    },\n    \n    references: {\n      \n      // User configuration\n      userConfig: \"$:/config/hotzone/focusOffset\",\n            \n      // This tiddler holds a reference to the currently focussed\n      // tiddler. A tiddler is focussed if it was scrolled to\n      // reach the top offset.\n      focussedTiddlerStore: \"$:/temp/focussedTiddler\"\n      \n    },\n    \n    // Time after a scroll event that has to elapse before we\n    // check which tiddler is actually focussed. This is necessary\n    // to avoid updates that only result from scroll animations.\n    checkbackTime: $tw.utils.getAnimationDuration()\n    \n  };\n\n})();\n",
            "title": "$:/plugins/felixhayashi/hotzone/config.js",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/hotzone/hotzone.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/hotzone/hotzone.js\ntype: application/javascript\nmodule-type: startup\n\n@preserve\n\n\\*/\n\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n// Export name and synchronous status\nexports.name = \"hotzone\";\nexports.platforms = [\"browser\"];\nexports.after = [\"story\"];\nexports.synchronous = true;\n\nexports.startup = function() {\n\n/***************************** IMPORTS *****************************/\n \nvar config = require(\"$:/plugins/felixhayashi/hotzone/config.js\").config;\n\n/*************************** VARIABLES *****************************/\n\nvar curRef = null;\nvar isTimeoutActive = false;\nvar storyRiverElement = document.getElementsByClassName(config.classNames.storyRiver)[0];\nvar userConf = $tw.wiki.getTiddlerData(config.references.userConfig, {});\nvar focusOffset = (isNaN(parseInt(userConf.focusOffset))\n                   ? 150 : parseInt(userConf.focusOffset)); // px\n\n/*************************** FUNCTIONS *****************************/\n          \n/**\n * Extracts the tiddler title from dom elements holding it.\n * \n * @param {Element} target - The tiddler frame element.\n * @return {string} The title or undefined\n */\nvar extractTitleFromFrame = function(target, frameClass, titleClass) {\n    \n  if(!(target instanceof Element)) return;\n  if(!$tw.utils.hasClass(target, config.classNames.tiddlerFrame)) return;\n\n  var el = target.getElementsByClassName(config.classNames.tiddlerTitle)[0];\n  if(el) {\n    var title = el.innerText || el.textContent;\n    return title.trim();\n  }\n\n};\n\n/**\n * Calls the scroll handler with a certain delay. If no delay\n * is specified, the handler is called instantly. If a delay\n * is specified then any new call to update is ignored until the delay\n * is over and the handler has been called.\n * \n * @param {number} delay - Time after a scroll event that has to elapse\n *     before we check which tiddler is actually focussed. A delay may\n *     be necessary to avoid updates that only result from scroll animations.\n */\nvar update = function(delay) {\n  \n  // console.log(\"hotzone:\", \"update\");\n    \n  if(!isTimeoutActive) {\n    isTimeoutActive = true;\n    window.setTimeout(checkForFocusChange, delay || 0);\n  }\n\n};\n\n/**\n * Set a flag (class) to the active tiddler frame element and also\n * register the change at the focussed-tiddler-store.\n * \n * @param {string} tRef - The title of the newly focussed tiddler.\n * @param {Element} [target] - If available, the frame that corresponds\n *     to the focussed tiddler.\n */\nvar registerFocusChange = function(tRef, target) {\n  \n  // console.log(\"hotzone:\", \"changed focus; now at:\", tRef);\n  \n  $tw.wiki.addTiddler(new $tw.Tiddler({\n      title: config.references.focussedTiddlerStore,\n      text: tRef\n    },\n    $tw.wiki.getModificationFields()\n  ));\n  \n  if(target) {\n    var prevTarget = document.getElementsByClassName(\"hzone-focus\")[0];\n    // remove class from previous\n    if(prevTarget) {\n      $tw.utils.removeClass(prevTarget, \"hzone-focus\");\n    }\n    // add class to current\n    $tw.utils.addClass(target, \"hzone-focus\");\n  }\n  \n};\n\n/**\n * Tries to extract the title from the frame that is currently in\n * focus and to register any changes.\n */\nvar checkForFocusChange = function() {\n  \n  // console.log(\"hotzone:\", \"check for focus change\");\n  \n  isTimeoutActive = false;\n  \n  var tObj = $tw.wiki.getTiddler(\"$:/StoryList\");\n  if(tObj && tObj.fields.list.length) {\n    \n    var target = null;\n    var minDistance = Number.MAX_VALUE;\n    var childElements = storyRiverElement.children;\n    var tiddlerFrameClass = config.classNames.tiddlerFrame;\n    for(var i = childElements.length; i--;) {\n      if($tw.utils.hasClass(childElements[i], tiddlerFrameClass)) {\n        var frameElRect = childElements[i].getBoundingClientRect();\n        var distance = Math.min(\n                         Math.abs(focusOffset - frameElRect.top),\n                         Math.abs(focusOffset - frameElRect.bottom)\n                      );\n        if(distance < minDistance) {\n          // register frame with closer distance\n          target = childElements[i];\n          minDistance = distance;\n        }\n      }\n    }\n            \n    var title = extractTitleFromFrame(target);\n    \n    // console.log(\"hotzone:\", \"Target\", title, \"distance to threshold\", minDistance);\n    \n    if(title !== curRef && $tw.wiki.getTiddler(title)) { // focus changed\n      curRef = title;\n      registerFocusChange(curRef, target);\n      return;\n    }\n    \n  } else if(curRef) {\n    curRef = \"\";\n    registerFocusChange(curRef);\n  }\n  \n  \n  \n};\n\n/**\n * Handler to react to tiddler changes\n */\nvar handleChangeEvent = function(changedTiddlers) {\n\n  // console.log(\"hotzone:\", \"handleChangeEvent\", changedTiddlers);\n\n  if(changedTiddlers[\"$:/HistoryList\"]) {\n    \n    // A navigation-scroll occurs if the current tiddler of the\n    // history list changed and this tiddler also exists in the\n    // current story list.\n    \n    if(!$tw.wiki.tiddlerExists(\"$:/HistoryList\")) return;\n    \n    var curTiddler = $tw.wiki.getTiddler(\"$:/HistoryList\").fields[\"current-tiddler\"];\n    var storyList = $tw.wiki.getTiddlerList(\"$:/StoryList\");\n    var isInStoryList = storyList.indexOf(curTiddler) >= 0;\n    if(!isInStoryList) return;\n    \n    // navigation-scroll took place; use animation duration as delay\n    // add a bit of delay to make sure the scroll handler is not triggered\n    // by the scroll listener\n    update($tw.utils.getAnimationDuration() + 100);\n    \n  } else if(changedTiddlers[\"$:/StoryList\"]) {\n        \n    // console.log(\"hotzone:\", \"story list change triggers recalculation\");\n    update($tw.utils.getAnimationDuration() + 100);\n    \n  }\n  \n};\n\n/**\n * Handler to react to scroll events\n */\nvar handleScrollEvent = function(event) {\n    \n  // update with a delay of 250ms to avoid uncessary calculations\n  update(250);\n  \n};\n  \n/**************************** RUNTIME ******************************/\n\n// register listeners\n$tw.wiki.addEventListener(\"change\", handleChangeEvent);\nwindow.addEventListener('scroll', handleScrollEvent, false);  \n\n// simulate a scroll after startup\nhandleScrollEvent();\n      \n};\n\n})();\n",
            "title": "$:/plugins/felixhayashi/hotzone/hotzone.js",
            "type": "application/javascript",
            "module-type": "startup"
        },
        "$:/plugins/felixhayashi/hotzone/Configuration": {
            "title": "$:/plugins/felixhayashi/hotzone/Configuration",
            "text": "Please see the [[GitHub page|https://github.com/felixhayashi/TW5-HotZone]] for more information on the options.\n\nSave and reload the wiki to activate changes.\n\n<table>\n  <tr>\n    <th align=\"left\">Focus offset:</th>\n    <td><$edit-text tiddler=\"$:/config/hotzone/focusOffset\" tag=\"input\" default=\"71px\" /></td>\n  </tr>\n</table>"
        },
        "$:/temp/focussedTiddler": {
            "title": "$:/temp/focussedTiddler"
        },
        "$:/plugins/felixhayashi/hotzone/License": {
            "title": "$:/plugins/felixhayashi/hotzone/License",
            "text": "This code is released under the BSD license. For the exact terms visit:\n\nhttps://github.com/felixhayashi/TW5-HotZone/blob/master/LICENSE"
        },
        "$:/plugins/felixhayashi/hotzone/Readme": {
            "title": "$:/plugins/felixhayashi/hotzone/Readme",
            "text": "Please visit the [[GitHub page|https://github.com/felixhayashi/TW5-HotZone]] for more information."
        }
    }
}